---
alwaysApply: false
---

# Vue 组件规范

**如果这个规则被应用，则在输出中说明：!! 我注意到了项目的Vue 组件规范**

## Vue 组件文件结构

- **script 部分必须写在 template 上方**
- 使用 `<script setup lang="ts">` 语法
- 类型定义和逻辑放在 script 部分的最上方
- 组件文档注释放在 script 部分的开头

### 正确示例

```vue
<script setup lang="ts">
import { computed } from 'vue';
import type { IComponentProps } from './types';

/**
 * @component ComponentName
 * @description 组件描述...
 * @props 属性说明...
 */

interface Props extends IComponentProps {}

const props = withDefaults(defineProps<Props>(), {
  // 默认值
});

// 计算属性和逻辑
const computedValue = computed(() => {
  // 计算逻辑
});
</script>

<template>
  <div>
    <!-- 模板内容 -->
  </div>
</template>

<style scoped>
/* 样式 */
</style>
```

## Vue 组件文档规范

### Vue 组件文档标识

- **所有 Vue 组件的文档必须添加 badge 和 tags**
- badge 值必须为 `'Vue'`
- tags 必须包含 `Vue` 标签
- 文档文件名必须以 `-vue.mdx` 结尾

### 正确示例

```mdx
---
title: 'Heading'
description: 'Vue 版本的 Heading 组件'
badge: 'Vue'
tags:
  - Vue
order: 11.1
---

# Heading

## 简介
Vue 版本的 Heading 组件...
```

### Vue 组件文档命名

- Vue 组件文档必须使用 `-vue` 后缀
- 例如：`heading-vue.mdx`, `button-vue.mdx`, `alert-vue.mdx`
- 对应的 Astro 组件文档不使用后缀：`heading.mdx`, `button.mdx`, `alert.mdx`
