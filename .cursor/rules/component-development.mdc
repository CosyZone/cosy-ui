---
alwaysApply: true
---

# 组件开发规范

## 核心原则

### 1. 示例组件样式规范

- **优先使用组件库组件**，不满足需求时使用原生 CSS 样式
- **禁止**使用 Tailwind 类
- 使用 `style` 属性定义样式，避免多行 style 属性
- 示例组件需要独立于任何 CSS 框架

**正确示例（优先使用组件库）**：

```astro
<Button variant="primary" size="lg">
  主要按钮
</Button>
```

**正确示例（原生 CSS 作为备选）**：

```astro
<button style="background-color: #3b82f6; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; border: none;">
  自定义按钮
</button>
```

**错误示例**：

```astro
<button class="cosy:btn cosy:btn-primary">
  错误：使用 Tailwind 类
</button>
```

### 2. 项目结构规范

#### 核心组件项目

- 位置：`packages/cosy-ui/src-astro/{component-name}/`
- index.ts 保持简洁，只导出组件和类型
- 在 [index-astro.ts](mdc:packages/cosy-ui/index-astro.ts) 中按字母顺序导出

#### 示例组件项目

- 位置：`packages/cosy-docs/src/components/{component-name}/`
- 使用 ComponentPackage 导出容器组件
- 避免不必要的嵌套层级

### 3. 文档规范

#### Props 注释排序

- `@props` 必须按字母顺序（A-Z）排列
- 文档必须按照 `@props` 的顺序编写
- 每个属性使用多标签展示多种用法

#### 文档标题规范

- **二级标题必须使用 props 的名字**
- 文档结构：简介 → 按字母顺序的 props 二级标题 → 其他内容
- 每个 props 的二级标题后跟对应的容器组件

**正确示例**：

```markdown
# Button

## 简介
Button 组件用于触发一个即时操作...

## block
是否为块级显示，设置为 true 时按钮占满容器宽度。
<ButtonPackage.Block />

## class
自定义 CSS 类名，用于覆盖默认样式。
<ButtonPackage.CustomStyle />

## disabled
是否禁用按钮，设置为 true 时按钮不可点击。
<ButtonPackage.States />
```

#### 容器组件规范

- 使用 [CodeContainer](mdc:packages/cosy-ui/src-astro/code-container/CodeContainer.astro)
- 使用 `?raw` 后缀导入源代码
- 每个功能特性一个标签页
- 提供 titles 数组
- **每个标签页的 div 必须有对应的 id**：`id="tab-1"`, `id="tab-2"`, `id="tab-3"` 等
- **属性的每个值都要至少有一个对应的标签**：确保组件属性的每个可能值都有对应的示例展示

**正确示例**：

```astro
<CodeContainer
  codes={[code1, code2, code3, code4]}
  titles={['none', 'fade', 'slide', 'zoom']}>
  <div id="tab-1">
    <Component transition="none" />
  </div>
  <div id="tab-2">
    <Component transition="fade" />
  </div>
  <div id="tab-3">
    <Component transition="slide" />
  </div>
  <div id="tab-4">
    <Component transition="zoom" />
  </div>
</CodeContainer>
```

**错误示例**：

```astro
<CodeContainer codes={[code1, code2]}>
  <div>  <!-- 错误：缺少 id -->
    <Component />
  </div>
  <div>  <!-- 错误：缺少 id -->
    <Component variant="advanced" />
  </div>
</CodeContainer>
```

**错误示例（缺少属性值）**：

```astro
<CodeContainer codes={[code1, code2]} titles={['none', 'fade']}>
  <div id="tab-1">
    <Component transition="none" />
  </div>
  <div id="tab-2">
    <Component transition="fade" />
  </div>
  <!-- 错误：缺少 slide 和 zoom 值的展示 -->
</CodeContainer>
```

### 4. 开发流程

#### 创建新组件

1. 创建核心组件和类型
2. 创建示例组件（优先使用组件库组件）
3. 创建容器组件（多标签展示）
4. 创建中英文文档（按核心组件的props字母顺序，二级标题使用props名字）
5. 执行 `pnpm build:docs` 验证

#### 检查清单

- [ ] 核心组件导入 [style.ts](mdc:packages/cosy-ui/style.ts)
- [ ] 示例组件优先使用组件库组件，不满足需求时使用原生 CSS
- [ ] 容器组件使用多标签展示
- [ ] **容器组件每个标签页 div 都有对应的 id**：`id="tab-1"`, `id="tab-2"` 等
- [ ] **属性的每个值都要至少有一个对应的标签**：确保组件属性的每个可能值都有对应的示例展示
- [ ] Props 按字母顺序排列
- [ ] 文档按 Props 顺序编写
- [ ] **二级标题使用 props 名字**
- [ ] 构建验证通过
- [ ] **每个属性使用多标签展示多种用法**
- [ ] **复杂属性使用三级标题拆分**：当单个属性功能特性过多时，使用三级标题分别展示不同场景
- [ ] **接口命名以 I 开头**：所有 interface 必须以大写字母 I 开头

### 5. 常见错误避免

1. **示例组件使用 Tailwind 类** → 优先使用组件库组件，不满足需求时使用原生 CSS
2. **多行 style 属性** → 合并为单行
3. **Props 未按字母顺序** → 重新排序
4. **文档未按 Props 顺序** → 重新组织
5. **二级标题未使用 props 名字** → 使用 props 名字作为二级标题
6. **容器组件未使用多标签** → 为每个特性创建标签
7. **容器组件标签页缺少 id** → 为每个标签页 div 添加 `id="tab-1"`, `id="tab-2"` 等
8. **属性值展示不完整** → 确保组件属性的每个可能值都有对应的示例展示
9. **忘记构建验证** → 执行 `pnpm build:docs`
10. **接口命名不规范** → 确保所有 interface 名称以大写字母 I 开头

### 6. 命名规范

#### 接口命名

- **接口名称必须以大写字母 `I` 开头**
- 使用 PascalCase 命名方式
- 名称应清晰描述接口的用途

**正确示例**：

```typescript
interface IButtonProps {
  variant?: string;
  size?: string;
}

interface IUserData {
  id: number;
  name: string;
}

interface IApiResponse<T> {
  data: T;
  status: number;
}
```

**错误示例**：

```typescript
interface ButtonProps {  // 错误：未以 I 开头
  variant?: string;
}

interface userInfo {    // 错误：未以 I 开头且非 PascalCase
  name: string;
}
```

### 7. 导入规范

#### 核心组件

```typescript
import { Component } from '@coffic/cosy-ui';
import type { ComponentProps } from '@coffic/cosy-ui';
```

#### 示例组件

```typescript
import { ComponentPackage } from '@/components/component-name/index.ts';
```

#### 容器组件

```astro
import { CodeContainer } from '@coffic/cosy-ui';
import ExampleCode from './Example.astro?raw';
```
