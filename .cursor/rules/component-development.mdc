# 组件开发规范

## 核心原则

### 1. 示例组件样式规范

- **优先使用组件库组件**，不满足需求时使用原生 CSS 样式
- **禁止**使用 Tailwind 类
- 使用 `style` 属性定义样式，避免多行 style 属性
- 示例组件需要独立于任何 CSS 框架

**正确示例（优先使用组件库）**：

```astro
<Button variant="primary" size="lg">
  主要按钮
</Button>
```

**正确示例（原生 CSS 作为备选）**：

```astro
<button style="background-color: #3b82f6; color: white; padding: 0.5rem 1rem; border-radius: 0.375rem; border: none;">
  自定义按钮
</button>
```

**错误示例**：

```astro
<button class="cosy:btn cosy:btn-primary">
  错误：使用 Tailwind 类
</button>
```

### 2. 项目结构规范

#### 核心组件项目

- 位置：`packages/cosy-ui/src-astro/{component-name}/`
- index.ts 保持简洁，只导出组件和类型
- 在 [index-astro.ts](mdc:packages/cosy-ui/index-astro.ts) 中按字母顺序导出

#### 示例组件项目

- 位置：`packages/cosy-docs/src/components/{component-name}/`
- 使用 ComponentPackage 导出容器组件
- 避免不必要的嵌套层级

### 3. 文档规范

#### Props 注释排序

- `@props` 必须按字母顺序（A-Z）排列
- 文档必须按照 `@props` 的顺序编写
- 每个属性使用多标签展示多种用法

#### 容器组件规范

- 使用 [CodeContainer](mdc:packages/cosy-ui/src-astro/code-container/CodeContainer.astro)
- 使用 `?raw` 后缀导入源代码
- 每个功能特性一个标签页
- 提供 titles 数组

### 4. 开发流程

#### 创建新组件

1. 创建核心组件和类型
2. 创建示例组件（优先使用组件库组件）
3. 创建容器组件（多标签展示）
4. 创建中英文文档（按核心组件的props字母顺序）
5. 执行 `pnpm build:docs` 验证

#### 检查清单

- [ ] 核心组件导入 [style.ts](mdc:packages/cosy-ui/style.ts)
- [ ] 示例组件优先使用组件库组件，不满足需求时使用原生 CSS
- [ ] 容器组件使用多标签展示
- [ ] Props 按字母顺序排列
- [ ] 文档按 Props 顺序编写
- [ ] 构建验证通过
- [ ] **每个属性使用多标签展示多种用法**
- [ ] **复杂属性使用三级标题拆分**：当单个属性功能特性过多时，使用三级标题分别展示不同场景

### 5. 常见错误避免

1. **示例组件使用 Tailwind 类** → 优先使用组件库组件，不满足需求时使用原生 CSS
2. **多行 style 属性** → 合并为单行
3. **Props 未按字母顺序** → 重新排序
4. **文档未按 Props 顺序** → 重新组织
5. **容器组件未使用多标签** → 为每个特性创建标签
6. **忘记构建验证** → 执行 `pnpm build:docs`

### 6. 导入规范

#### 核心组件

```typescript
import { Component } from '@coffic/cosy-ui';
import type { ComponentProps } from '@coffic/cosy-ui';
```

#### 示例组件

```typescript
import { ComponentPackage } from '@/components/component-name/index.ts';
```

#### 容器组件

```astro
import { CodeContainer } from '@coffic/cosy-ui';
import ExampleCode from './Example.astro?raw';
```
