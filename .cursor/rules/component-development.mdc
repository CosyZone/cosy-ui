# 组件开发规则

这个规则总结了cosy-ui组件库的开发、修改和优化的最佳实践。

## 项目架构规范

### 1. 组件分离原则

- **核心组件**：放在 `packages/cosy-ui/src-astro/` 中，只包含实际的业务组件
- **示例组件**：示例组件应放在 `packages/cosy-docs/src/components/` 中
- **容器组件**：以 `Container` 结尾的容器组件也应放在文档项目中
- **基础示例**：如 `ComponentBasic.astro` 等基础示例也应放在文档项目中

### 2. 示例组件放置规则

- **位置**：`packages/cosy-docs/src/components/{component-name}/`
- **导入**：示例组件从 `@coffic/cosy-ui` 导入核心组件和类型
- **导出**：在文档项目中创建独立的 `index.ts` 导出 `ComponentPackage`
- **文档引用**：文档通过相对路径导入示例组件的 `ComponentPackage`

### 3. 架构优势

- **关注点分离**：核心组件库专注于组件本身，文档项目专注于展示
- **减少打包体积**：核心组件库不包含示例代码
- **独立维护**：示例组件可以独立于核心组件进行更新和维护
- **清晰边界**：明确区分生产代码和演示代码

## 组件基本规范

### 1. 样式使用规范

#### 核心组件样式规范

- **必须**导入 [style.ts](mdc:packages/cosy-ui/style.ts) 在组件顶部（仅限核心组件）
- **优先**使用 daisyUI 的类，如：`card`、`card-body`、`card-title`等
- **辅助**使用 Tailwind CSS，但必须加 `cosy:` 前缀
- **正确示例**：`cosy:mx-auto`、`cosy:dark:bg-red-500`
- **错误示例**：`lg:cosy:mx-auto`（应该是 `cosy:lg:mx-auto`）
- **注意**：not-prose 不需要前缀

#### 示例组件样式规范

- **文档示例组件**：通过 `@coffic/cosy-ui` 导入，无需直接导入 style.ts
- **优先使用组件库组件**：优先使用组件库中的组件（如 Button、Card 等），它们都有良好的设计
- **原生 CSS 样式作为备选**：当组件库的组件不满足要求时，再使用原生 CSS 样式
- **禁止使用 Tailwind 类**：示例组件中不要使用 `cosy:` 前缀的 Tailwind 类

**正确示例（优先使用组件库组件）**：

```astro
---
import { AlertDialog, Button } from '@coffic/cosy-ui';
---

<div style="padding: 1rem;">
  <Button onclick="showAlertDialog('basic-dialog')">
    显示确认对话框
  </Button>
  
  <AlertDialog message="这是一个基础的确认对话框示例" id="basic-dialog" />
</div>
```

**正确示例（原生 CSS 样式作为备选）**：

```astro
<button
  style="
    background-color: #3b82f6;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    cursor: pointer;
  "
  onclick="showDialog()">
  显示对话框
</button>
```

**错误示例**：

```astro
<button class="cosy:btn cosy:btn-primary" onclick="showDialog()">
  显示对话框
</button>
```

**原因**：

1. 组件库组件有良好的设计，直接使用更简单
2. 示例组件需要独立于任何 CSS 框架，确保用户无论使用什么技术栈都能正常工作
3. 当组件库组件不满足需求时，使用原生 CSS 样式作为备选方案

### 2. Props接口规范

- Props接口必须与组件文档中的 `@props` 描述**完全一致**
- 如果文档提到某个属性，接口中必须定义
- 参考 [Card.astro](mdc:packages/cosy-ui/src-astro/card/Card.astro) 的完整Props定义

### 3. 组件文档规范

- 必须包含完整的JSDoc注释：`@component`、`@description`、`@usage`、`@props`、`@slots`
- 使用示例要覆盖主要功能场景
- Props描述要准确，包含类型和默认值
- 组件注释文档必须包括每个props的用法：在 `@props` 部分详细说明每个属性的用途、类型、默认值和使用场景
- 中英文文档必须按逻辑顺序介绍各个prop：按照使用频率和功能相关性排序，从基础属性到高级属性，确保文档结构清晰易读

## 组件Package结构

### 1. 核心组件项目结构

参考 [alert/index.ts](mdc:packages/cosy-ui/src-astro/alert/index.ts) 的简洁模式：

```typescript
// packages/cosy-ui/src-astro/component-name/index.ts
export { default as Component } from './Component.astro';
export type { ComponentProps } from './types';
```

**重要**：

- 核心组件项目的 index.ts 应保持简洁，只导出组件和类型
- **不要**在核心组件项目中包含示例组件
- **不要**在核心组件项目中包含 ComponentPackage

### 2. 文档项目示例组件结构

```typescript
// packages/cosy-docs/src/components/component-name/index.ts
import Basic from './Basic.astro';
import BasicContainer from './BasicContainer.astro';
// ... 其他示例组件

export const ComponentPackage = {
  ComponentContainers: {
    Basic: BasicContainer,
    CustomStyle: CustomStyleContainer,
    // ... 其他容器
  },
};
```

### 3. 示例组件命名规范

- 基础示例：`Basic.astro` 或 `Basic.astro`
- 功能示例：`{FeatureName}.astro`
- 容器组件：`{FeatureName}Container.astro`

### 4. 示例组件导入规范

- **核心组件**：`import { Component } from '@coffic/cosy-ui';`
- **类型**：`import type { ComponentProps } from '@coffic/cosy-ui';`
- **CodeContainer**：`import { CodeContainer } from '@coffic/cosy-ui';`
- **本地组件**：使用相对路径 `'./ExampleComponent.astro'`

### 5. 容器组件规范

- 使用 [CodeContainer](mdc:packages/cosy-ui/src-astro/code-container/CodeContainer.astro) 来展示代码
- **源码导入最佳实践**：在容器组件中直接导入源码（`?raw`）
- **多标签展示要求**：每个功能特性必须使用单独的标签页展示，不能将所有示例放在一个标签中
- **源码对应要求**：每个标签页都必须有对应的源码，codes 数组中的源码顺序必须与标签页顺序一致
- **标题要求**：必须提供 titles 数组，为每个标签页添加有意义的标题
- 标准模式：

  ```astro
  ---
  import { CodeContainer } from '@coffic/cosy-ui';
  import ExampleComponent from './ExampleComponent.astro';
  import FeatureExample from './FeatureExample.astro';
  
  // 导入对应的源码
  import ExampleComponentCode from './ExampleComponent.astro?raw';
  import FeatureExampleCode from './FeatureExample.astro?raw';
  ---
  
  <CodeContainer 
    titles={['基础示例', '功能示例']}
    codes={[ExampleComponentCode, FeatureExampleCode]}>
    <div id="tab-1">
      <ExampleComponent />
    </div>
    <div id="tab-2">
      <FeatureExample />
    </div>
  </CodeContainer>
  ```

- **多标签容器组件**应使用 CodeContainer 的多标签特性，每个标签对应一个功能演示
- 必须包含组件文档注释：`@component`、`@description`

### 6. 多标签展示强制要求

**重要**：当组件有多个功能特性时，必须为每个特性创建单独的示例组件和标签页：

**正确做法**：

```astro
<!-- 容器组件 -->
---
import { CodeContainer } from '@coffic/cosy-ui';
import BasicExample from './BasicExample.astro';
import FeatureExample from './FeatureExample.astro';
import CustomStyleExample from './CustomStyleExample.astro';

// 导入对应的源码
import BasicExampleCode from './BasicExample.astro?raw';
import FeatureExampleCode from './FeatureExample.astro?raw';
import CustomStyleExampleCode from './CustomStyleExample.astro?raw';
---

<CodeContainer 
  titles={['基础用法', '功能特性', '自定义样式']}
  codes={[BasicExampleCode, FeatureExampleCode, CustomStyleExampleCode]}>
  <div id="tab-1">
    <BasicExample />
  </div>
  <div id="tab-2">
    <FeatureExample />
  </div>
  <div id="tab-3">
    <CustomStyleExample />
  </div>
</CodeContainer>
```

**错误做法**：

```astro
<!-- 不要将所有示例放在一个标签中 -->
<CodeContainer codes={[code]}>
  <div id="tab-1">
    <BasicExample />
    <FeatureExample />
    <CustomStyleExample />
  </div>
</CodeContainer>
```

**错误做法**：

```astro
<!-- 不要使用错误的源码对应 -->
<CodeContainer codes={[wrongCode]}>
  <div id="tab-1">
    <BasicExample />
  </div>
  <div id="tab-2">
    <FeatureExample />
  </div>
</CodeContainer>
```

## 组件文档规范

### 1. 文档文件结构

- 中文文档：`packages/cosy-docs/content/courses/zh-cn/components/{component}.mdx`
- 英文文档：`packages/cosy-docs/content/courses/en/components/{component}.mdx`

### 2. 文档内容规范

- frontmatter 必须包含：`title`、`description`、`folder: false`、`order`
- **核心组件导入**：`import { Component } from '@coffic/cosy-ui';`
- **示例组件导入**：`import { ComponentPackage } from '@/components/component-name/index.ts';`
- 文档结构参考 [alert.mdx](mdc:packages/cosy-ui-docs/content/courses/zh-cn/components/alert.mdx)

### 3. 文档排序规范

- `order` 值必须根据文档文件名的字母顺序生成
- 确保 `abc.mdx` 的 order 值比 `def.mdx` 的 order 值小
- 推荐使用连续递增的整数，如：1, 2, 3, 4...
- 新增文档时需要检查现有文档的order值，确保按字母顺序正确排列

### 4. 必须包含的章节

- **简介** - 组件描述和特性
- **基础用法** - `<ComponentPackage.ComponentContainers.Basic/>`
- **功能示例** - 展示各种特性的用法
- **自定义样式** - `<ComponentPackage.ComponentContainers.CustomStyle/>`

## 开发流程

### 1. 创建新组件的步骤

#### 核心组件开发

1. 在 `packages/cosy-ui/src-astro/{component-name}/` 创建核心组件
2. 创建简洁的 index.ts，只导出组件和类型
3. 在 [index-astro.ts](mdc:packages/cosy-ui/index-astro.ts) 中导出组件
4. 执行 pnpm build:ui 确保构建成功

#### 示例组件开发

1. 在 `packages/cosy-docs/src/components/{component-name}/` 创建示例组件
2. **为每个功能特性创建单独的示例组件**
3. 创建对应的容器组件，使用多标签展示
4. 创建 ComponentPackage 导出
5. 更新文档中的导入路径

### 2. 修复现有组件的步骤

### 3. 迁移现有示例组件

1. **识别示例组件**：找出所有以 `E` 开头和 `Container` 结尾的组件
2. **移动到文档项目**：`mv packages/cosy-ui/src-astro/{component}/E*.astro packages/cosy-docs/src/components/{component}/`
3. **更新导入路径**：示例组件中的导入改为从 `@coffic/cosy-ui` 导入
4. **创建文档导出**：在文档项目中创建 ComponentPackage
5. **更新文档导入**：文档中导入路径改为相对路径
6. **清理核心项目**：从核心组件项目的 index.ts 中移除示例组件导出

## 检查问题和修复

### 1. 检查问题

- 确认是否使用了自定义CSS类而非daisyUI类
- 检查Tailwind类是否正确添加了 `cosy:` 前缀
- 验证Props接口是否与文档描述一致
- 确认核心组件是否导入了 [style.ts](mdc:packages/cosy-ui/style.ts)
- 检查示例组件是否正确放置在文档项目中
- 检查示例组件是否优先使用组件库组件，或使用原生 CSS 样式而不是 Tailwind 类
- 检查容器组件是否正确使用 `?raw` 后缀导入源代码
- 检查容器组件是否使用多标签展示，每个功能特性一个标签
- 检查容器组件的源码数组是否与标签页一一对应
- 检查容器组件是否提供了 titles 数组，为每个标签页添加了有意义的标题
- 检查组件注释文档是否包含每个props的用法：确保 `@props` 部分详细说明了每个属性的用途、类型、默认值和使用场景
- 检查中英文文档是否按逻辑顺序介绍各个prop：确保文档结构清晰，按照使用频率和功能相关性排序

### 2. 修复组件

- 替换自定义CSS类为daisyUI标准类
- 添加正确的Tailwind前缀
- 完善Props接口
- 确保功能实现与文档描述一致
- 确保示例组件正确导入核心组件
- 将示例组件中的 Tailwind 类替换为组件库组件或原生 CSS 样式
- 确保容器组件使用 `?raw` 后缀导入源代码
- 确保容器组件使用多标签展示，每个功能特性一个标签
- 确保容器组件的源码数组与标签页一一对应
- 确保容器组件提供了 titles 数组，为每个标签页添加了有意义的标题
- 完善组件注释文档的props用法：在 `@props` 部分详细说明每个属性的用途、类型、默认值和使用场景
- 重新组织中英文文档结构：按照使用频率和功能相关性排序，从基础属性到高级属性，确保文档结构清晰易读

### 3. 全局暴露组件

- 在 [index-astro.ts](mdc:packages/cosy-ui/index-astro.ts) 中添加**核心组件**导出
- 按字母顺序插入到正确位置：`export * from './component-name';`
- **不要**导出示例组件到核心组件库

### 4. 创建文档

- 创建中英文文档文件
- 正确导入核心组件和示例组件
- 确保所有示例都能正常工作
- 正确设置文档的order值，确保按字母顺序排列

### 5. 构建验证

- **必须**在完成所有操作后执行 `pnpm build:docs`
- 确保构建过程无错误
- 如果构建失败，必须修复所有错误后重新构建
- 只有构建成功才算完成组件开发

## 常见错误避免

1. **CSS类错误**：不要使用未定义的自定义类
2. **前缀错误**：Tailwind类必须加 `cosy:` 前缀
3. **接口不完整**：Props接口必须与文档一致
4. **导入缺失**：忘记导入 [style.ts](mdc:packages/cosy-ui/style.ts)（仅限核心组件）
5. **示例组件放错位置**：示例组件应放在文档项目而不是核心组件项目
6. **文档导入错误**：文档中导入路径应该分别导入核心组件和示例组件
7. **Package导出混乱**：ComponentPackage应该在文档项目中导出，不在核心组件项目
8. **全局导出错误**：不要在核心组件库中导出示例组件
9. **构建验证缺失**：忘记执行 `pnpm build:docs` 验证构建
10. **文档排序错误**：文档的order值不符合字母顺序
11. **示例组件样式错误**：示例组件使用 Tailwind 类而不是组件库组件或原生 CSS 样式
12. **容器组件导入错误**：容器组件没有使用 `?raw` 后缀导入源代码
13. **多标签展示错误**：将所有示例放在一个标签中，而不是为每个功能特性创建单独的标签
14. **源码对应错误**：容器组件的源码数组与标签页不一一对应
15. **标题缺失错误**：容器组件没有提供 titles 数组或标题不完整
16. **Props文档缺失**：组件注释文档缺少 `@props` 部分或props说明不完整
17. **文档结构混乱**：中英文文档没有按逻辑顺序介绍各个prop，结构不清晰

## 检查清单

修改/新建组件时，确保以下项目都已完成：

### 核心组件

- [ ] 导入 [style.ts](mdc:packages/cosy-ui/style.ts)
- [ ] 使用daisyUI类和正确的Tailwind前缀
- [ ] Props接口完整且与文档一致
- [ ] 功能实现与文档描述一致
- [ ] index.ts 保持简洁，只导出组件和类型
- [ ] 在 [index-astro.ts](mdc:packages/cosy-ui/index-astro.ts) 中按字母顺序添加了组件导出
- [ ] 组件注释文档包含每个props的用法：在 `@props` 部分详细说明每个属性的用途、类型、默认值和使用场景
- [ ] 中英文文档按逻辑顺序介绍各个prop：按照使用频率和功能相关性排序，从基础属性到高级属性

### 示例组件（文档项目中）

- [ ] 示例组件放在 `packages/cosy-docs/src/components/{component-name}/`
- [ ] 正确从 `@coffic/cosy-ui` 导入核心组件和类型
- [ ] 创建了基础示例组件
- [ ] 创建了自定义样式示例
- [ ] 创建了对应的容器组件
- [ ] 容器组件使用 CodeContainer 的多标签特性
- [ ] 容器组件包含完整的组件文档注释
- [ ] 创建了 ComponentPackage 导出
- [ ] 示例组件优先使用组件库组件：优先使用 Button、Card 等组件库组件
- [ ] 示例组件使用原生 CSS 样式作为备选：当组件库组件不满足需求时使用原生样式
- [ ] 容器组件正确导入源代码：使用 `?raw` 后缀导入示例组件源代码
- [ ] 多标签展示要求：为每个功能特性创建单独的示例组件和标签页
- [ ] 源码对应要求：容器组件的源码数组与标签页一一对应
- [ ] 标题要求：容器组件提供了 titles 数组，为每个标签页添加了有意义的标题

### 文档

- [ ] 创建了中英文文档
- [ ] 正确导入核心组件和示例组件
- [ ] 文档中的所有示例都能正常工作
- [ ] 文档order值按字母顺序正确设置
- [ ] 执行 `pnpm build:docs` 验证构建成功
- [ ] 正确导入核心组件和示例组件
- [ ] 文档中的所有示例都能正常工作
- [ ] 文档order值按字母顺序正确设置
- [ ] 执行 `pnpm build:docs` 验证构建成功
