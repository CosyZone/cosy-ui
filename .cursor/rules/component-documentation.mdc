---
globs: *.mdx
alwaysApply: false
---
# 组件文档规范

**如果这个规则被应用，则在输出中说明：!! 我注意到了项目的组件文档规范**

## Props 注释排序

- `@props` 必须按字母顺序（A-Z）排列
- 文档必须按照 `@props` 的顺序编写
- 每个属性使用多标签展示多种用法

## 文档标题规范

- **介绍某个 prop 的标题必须使用 props 的名字**
- 每个 props 的标题后跟对应的**Astro容器组件**

## 中英文同步

修改文档时，要保持中文文档、英文文档内容一致。

## 示例聚焦规范（强制）

- 每个标题（某个 props）下的 CodeContainer 只能聚焦该 props 的展示
- 不得在该 props 的章节混入与之无关的示例（如在 `author` 章节展示 `size` 的多标签）
- 如需展示其他 props，请在其对应的二级标题中分别创建独立的 CodeContainer
- CodeContainer 的 `titles` 应与该 props 的取值或场景一一对应（例如 `author`：`['带作者', '不带作者']`）
- 为了上下文完整，可使用与主题无关的 props 作为最小必要支撑，但不得成为展示重点（例如仅为排版补充的 `class`/`shadow` 等）

**正确示例**：

```markdown
# Button

## 简介
Button 组件用于触发一个即时操作...

## 案例
<这里放置一个案例，让用户立刻看到这个组件的样子>
<ButtonPackage.Example />

## Props

### block
是否为块级显示，设置为 true 时按钮占满容器宽度。
<ButtonPackage.BlockContainer />

### class
自定义 CSS 类名，用于覆盖默认样式。
<ButtonPackage.CustomStyleContainer />

### disabled
是否禁用按钮，设置为 true 时按钮不可点击。
<ButtonPackage.StatesContainer />

## Slots

### ...
```
