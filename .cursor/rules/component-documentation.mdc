---
alwaysApply: true
---
# 组件文档规范

如果这个规则被应用，则在输出中说明：🤔 我注意到了项目的组件文档规范。

我们的根本目的是展示组件的所有Props和Slots的用法，确保用户能够轻松理解和使用每个组件。

以 Alert 组件为例，不管是新建还是更新组件的文档，都按照以下步骤严格执行。

1. 最顶部的内容

```mdx
---
title: 'Alert'
description: 'Alert 组件用于向用户显示重要的提示信息，支持多种类型的提示样式和交互效果'
folder: false
order: 1.1
---
```

Order 属性设置策略

- **每个 mdx 文档顶部都有 order 属性，用于控制文档在导航中的排序**
- **order 值必须严格按照字母在字母表中的顺序排列**
- **核心规则**：
  - A 开头的文档：order 值必须是 1.x（如 1.1, 1.2, 1.3...）
  - B 开头的文档：order 值必须是 2.x（如 2.1, 2.2, 2.3...）
  - C 开头的文档：order 值必须是 3.x（如 3.1, 3.2, 3.3...）
  - 以此类推，按照字母在字母表中的顺序

2. 导入关键组件

```ts
import { ComponentPackage } from '@/components/alert/index';
```

其中'@/components/alert/index' 组件导出文件内容必须是这样：

```ts
import AlertActionContainer from "./AlertActionContainer.astro";
import AlertBasicContainer from "./AlertBasicContainer.astro";

export const AlertPackage = {
    Action: AlertActionContainer,
    Basic: AlertBasicContainer,
};
```

其中某个组件容器文件内容必须是这样：

```ts
---
/**
 * @component AlertActionContainer
 * @description 自定义操作按钮 Alert 组件示例容器
 */
import { CodeContainer } from '@coffic/cosy-ui';
import AlertAction from './AlertAction.astro';
import AlertActionVue from './AlertActionVue.astro';
import AlertActionSourceCode from './AlertAction.astro?raw';
import AlertActionVueSourceCode from './AlertActionVue.astro?raw';
---

<CodeContainer
    codes={[
        AlertActionSourceCode,
        AlertActionVueSourceCode,
    ]}
    titles={[
        '基础按钮',
        '基础按钮'
    ]}>
    <div id="tab-1" data-label="astro">
        <AlertAction />
    </div>
    <div id="tab-2" data-label="vue">
        <AlertActionVue />
    </div>
</CodeContainer>
```

其中`AlertAction`是向用户展示`Alert`组件的用法，其内容是这样（Vue版本也类似）：

```ts
---
import { Alert } from '@coffic/cosy-ui';
---

<Alert type="info" title="自定义操作">
    你可以通过 action slot 在右侧自定义按钮。
    <div slot="action">
        <button
            style="
        background-color: #3b82f6;
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.375rem;
        cursor: pointer;
        font-size: 0.875rem;
      "
            onclick="alert('自定义操作')">
            自定义操作
        </button>
    </div>
</Alert>
```

3. 写标题

必须是这样：

```markdown
# {frontmatter.title}
```

4. 介绍组件

```markdown
## 简介

Alert 组件用于向用户显示重要的提示信息，支持多种类型的提示样式和交互效果。

组件特性：

- 支持四种预设类型，每种类型有对应的图标和颜色
- 可添加标题使提示更醒目
- 支持自定义 class 覆盖默认样式
- 响应式设计，适配不同屏幕尺寸
- 可控制是否显示图标
- 支持设置垂直方向外边距
- 支持多种样式变体
```

5. 案例

```markdown
## 案例

<ComponentPackage.Basic />
```

6. 介绍Props

```markdown
## Props

### class

自定义 CSS 类名，用于覆盖默认样式。

<ComponentPackage.CustomStyle />

### closable

是否可关闭，设置为 false 时隐藏关闭按钮。

<ComponentPackage.Closable />
```

注意：

- `@props` 必须按字母顺序（A-Z）排列
- 每个Pros使用多标签展示多种用法
- 介绍某个 prop 的标题必须使用 prop 的名字

7. 介绍Slots

```markdown
## Slots

### action

通过 `action` slot 可以在 Alert 右侧自定义操作按钮：

<ComponentPackage.Action />
```

8. 检查英文文档，必须和中文文档内容一致
