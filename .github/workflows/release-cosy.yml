---
# 🎉 Cosy UI 发布工作流
#
# 这个工作流程用于自动化 Cosy UI 组件库的发布过程。
#
# 工作流程说明：
# 1. 开发流程 (dev 分支)：
#    - 在 dev 分支进行日常开发
#    - 提交并推送到 dev 分支
#
# 2. 预发布流程 (pre 分支)：
#    - 将 dev 分支合并到 pre 分支
#    - 自动升级小版本号并发布预发布版本
#
# 3. 正式发布 (main 分支)：
#    - 预发布版本测试通过后
#    - 将 pre 分支合并到 main 分支
#    - 自动移除版本号中的预发布标识
#    - 构建项目
#    - 创建新标签
#    - 发布正式版本
#
# 发布条件：
# - 推送到 pre 分支时触发预发布
# - 推送到 main 分支时触发正式发布
#
# 使用方法：
# 1. 日常开发完成后：
#    ```bash
#    git add .
#    git commit -m "feat: your changes"
#    git push origin dev
#    ```
#
# 2. 预发布版本：
#    ```bash
#    git checkout pre
#    git merge dev
#    git push origin pre
#    ```
#
# 3. 正式发布：
#    ```bash
#    git checkout main
#    git merge pre
#    git push origin main
#    ```
#
name: 📦 Release Cosy UI

on:
    push:
        branches:
            - pre # 预发布分支
            - main # 正式发布分支
        tags:
            - "*"

# 添加工作流级别的权限
permissions:
    contents: write
    pull-requests: write
    issues: write
    actions: write
    statuses: write
    checks: write
    id-token: write

env:
    tag: ${{ github.event.head_commit.id }}
    version: ${{ github.ref_name }}
    is_prerelease: ${{ github.ref == 'refs/heads/pre' }}

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  fetch-depth: 0

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "23"
                  registry-url: "https://registry.npmjs.org"

            - name: Setup PNPM
              uses: pnpm/action-setup@v2
              with:
                  version: 10

            - name: Install Dependencies
              run: pnpm install

            - name: Configure Git
              run: |
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

            - name: Bump Version
              run: |
                  # 🚀 升级版本号
                  ./scripts/bump-version.sh patch packages/cosy-ui

                  # 📋 读取升级后的版本号并设置环境变量
                  NEW_VERSION=$(node -p "require('./packages/cosy-ui/package.json').version")
                  echo "VERSION=${NEW_VERSION}" >> $GITHUB_ENV
                  echo "🎯 版本号已设置: ${NEW_VERSION}"

            - name: Build Packages
              run: pnpm build:ui

            - name: Commit Version Changes
              run: |
                  current_branch=${GITHUB_REF#refs/heads/}
                  git pull origin $current_branch
                  git add .
                  git commit -m "👷 CI: ${{ env.is_prerelease == 'true' && 'prerelease' || 'release' }} version ${{ env.VERSION }}"
                  git tag v${{ env.VERSION }}
                  git push origin $current_branch
                  git push origin v${{ env.VERSION }}
              env:
                  GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}

            - name: Sync Version Changes
              run: |
                  # 根据当前分支决定同步策略
                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                    # main 分支同步到 pre 和 dev
                    branches=("pre" "dev")
                  else
                    # pre 分支只同步到 dev
                    branches=("dev")
                  fi

                  # 遍历需要同步的分支
                  for branch in "${branches[@]}"; do
                    git checkout $branch
                    git pull origin $branch
                    
                    # 🔄 使用版本升级脚本同步版本号
                    ./scripts/bump-version.sh custom ${{ env.VERSION }} packages/cosy-ui
                    
                    git add .
                    git commit -m "👷 Chore: sync version ${{ env.VERSION }} from $current_branch branch"
                    git push origin $branch
                  done
              env:
                  GITHUB_TOKEN: ${{ secrets.COMMIT_TOKEN }}

            - name: Create GitHub Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ env.VERSION }}
                  generate_release_notes: true
                  prerelease: ${{ env.is_prerelease == 'true' }}
