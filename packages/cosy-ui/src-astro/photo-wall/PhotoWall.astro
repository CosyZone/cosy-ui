---
/**
 * @component PhotoWall
 *
 * @description
 * PhotoWall 组件用于展示照片墙，采用不规则布局设计，支持多种尺寸的照片卡片。
 * 组件会自动排列照片，创建视觉层次丰富的展示效果。
 *
 * @design
 * 设计理念：
 * 1. 不规则布局 - 通过不同尺寸的卡片创建动态的视觉层次
 * 2. 响应式设计 - 自适应不同屏幕尺寸
 * 3. 灵活配置 - 支持多种样式和交互选项
 * 4. 性能优化 - 高效的布局计算和渲染
 *
 * @usage
 * 基本用法：
 * ```astro
 * <PhotoWall photos={photos} />
 * ```
 *
 * 自定义样式：
 * ```astro
 * <PhotoWall
 *   photos={photos}
 *   hover={true}
 *   clickable={true}
 *   gap="md"
 *   padding="lg"
 *   rounded="lg"
 * />
 * ```
 *
 * 带中心标题：
 * ```astro
 * <PhotoWall
 *   photos={photos}
 *   title="我的相册"
 *   subtitle="美好回忆"
 * />
 * ```
 *
 * @props
 * @prop {PhotoCardData[]} photos - 照片卡片数据数组，包含图片信息、标题、样式等
 * @prop {PaddingSize} [padding='md'] - 容器内边距，支持 none、sm、md、lg、xl、2xl、3xl、4xl 八种内边距
 * @prop {RoundedSize} [rounded='md'] - 卡片圆角大小，支持 none、sm、md、lg、xl、2xl、3xl、full 八种圆角
 * @prop {('none'|'xs'|'sm'|'md'|'lg'|'xl')} [gap='md'] - 卡片间距，支持 none、xs、sm、md、lg、xl 六种间距
 * @prop {boolean} [hover=true] - 是否启用悬停效果，设置为 true 时显示悬停动画
 * @prop {boolean} [clickable=true] - 是否启用点击效果，设置为 true 时卡片可点击
 * @prop {Size} [width='full'] - 容器宽度，支持多种预设尺寸
 * @prop {BackgroundColor} [background] - 容器背景色，支持多种预设的语义化背景色
 * @prop {BorderSize} [border='none'] - 是否显示边框，设置为 true 时显示容器边框
 * @prop {boolean} [centered=true] - 是否居中显示，设置为 true 时容器居中显示
 * @prop {string} [title] - 中心标题，在图片墙中心显示标题文字，带有遮罩效果确保可读性
 * @prop {string} [subtitle] - 中心副标题，与 title 配合使用，显示在标题下方
 * @prop {string} [class] - 自定义 CSS 类名，用于覆盖默认样式
 * @prop {string} [style] - 自定义样式，用于覆盖默认样式
 */

// 导入样式
import "../../style.ts";

// 导入类型定义
import type {
	PhotoCardData,
	IPhotoWallProps,
	PaddingSize,
	RoundedSize,
	BackgroundColor,
	Size,
	BorderSize,
} from "./props";

// 导入 Container 组件
import Container from "../container/Container.astro";

// 从 Astro.props 中解构出属性
const {
	photos,
	padding = "md",
	rounded = "md",
	gap = "md",
	hover = true,
	clickable = true,
	width = "full",
	background,
	border = "none",
	centered = true,
	title,
	subtitle,
	class: className,
	style: customStyle,
	...rest
} = Astro.props as IPhotoWallProps & { class?: string; style?: string };

// 计算照片墙的类名
const getPhotoWallClasses = () => {
	const classes = [
		"cosy:grid",
		"cosy:grid-cols-12",
		"cosy:auto-rows-[minmax(0,1fr)]",
		"cosy:relative",
	];

	// Gap classes
	const gapClasses: Record<string, string> = {
		none: "cosy:gap-0",
		xs: "cosy:gap-1",
		sm: "cosy:gap-2",
		md: "cosy:gap-4",
		lg: "cosy:gap-6",
		xl: "cosy:gap-8",
	};

	if (gapClasses[gap]) {
		classes.push(gapClasses[gap]);
	}

	if (className) {
		classes.push(className);
	}

	return classes;
};

// 计算卡片布局
const getCardLayout = (index: number, card: PhotoCardData) => {
	const colSpan = 3; // 每个卡片占用3列
	const rowSpan = 3; // 每个卡片占用3行，确保正方形
	const itemsPerRow = 4;
	const currentRow = Math.floor(index / itemsPerRow);
	const currentCol = index % itemsPerRow;
	const colStart = currentCol * 3 + 1;
	const rowStart = currentRow * 3 + 1;
	const finalColStart = Math.min(colStart, 13 - colSpan);
	return {
		gridArea: `${rowStart} / ${finalColStart} / ${rowStart + rowSpan} / ${finalColStart + colSpan}`,
		colSpan,
		rowSpan,
	};
};

// 计算卡片类名
const getCardClasses = (card: PhotoCardData) => {
	const classes = [
		"cosy:relative",
		"cosy:overflow-hidden",
		"cosy:aspect-square",
		"cosy:bg-gray-100",
		"cosy:flex",
		"cosy:items-center",
		"cosy:justify-center",
		"cosy:group",
	];

	// Rounded classes
	const roundedClasses: Record<string, string> = {
		none: "cosy:rounded-none",
		sm: "cosy:rounded-sm",
		md: "cosy:rounded-md",
		lg: "cosy:rounded-lg",
		xl: "cosy:rounded-xl",
		"2xl": "cosy:rounded-2xl",
		"3xl": "cosy:rounded-3xl",
		full: "cosy:rounded-full",
	};

	if (roundedClasses[rounded]) {
		classes.push(roundedClasses[rounded]);
	}

	// Hover classes
	if (hover) {
		classes.push(
			"cosy:transition-transform cosy:duration-300 hover:cosy:scale-105",
		);
	}

	// Clickable classes
	if (clickable) {
		classes.push("cosy:cursor-pointer");
	}

	return classes;
};

const photoWallClasses = getPhotoWallClasses();
---

<Container 
  width={width} 
  background={background} 
  border={border} 
  centered={centered} 
  padding={padding}
  rounded={rounded} 
  style={customStyle}
  class="not-prose"
  ignore-heading>
  <div class:list={photoWallClasses}>
    {photos.map((photo, index) => {
      const layout = getCardLayout(index, photo);
      const cardClasses = getCardClasses(photo);
      
      return (
        <div 
          class:list={cardClasses}
          style={`grid-area: ${layout.gridArea};`}
          data-photo-id={photo.id}
        >
          <img
            src={photo.src}
            alt={photo.alt || `Photo ${index + 1}`}
            class="cosy:absolute cosy:inset-0 cosy:w-full cosy:h-full cosy:object-cover cosy:object-center"
            loading="lazy"
          />
          {(photo.title || photo.subtitle) && (
            <div class="cosy:absolute cosy:inset-0 cosy:bg-black/20 cosy:flex cosy:flex-col cosy:items-center cosy:justify-center cosy:opacity-0 group-hover:cosy:opacity-100 cosy:transition-opacity cosy:duration-300">
              {photo.title && (
                <h3 class="cosy:text-white cosy:text-sm cosy:font-medium cosy:text-center cosy:px-2 cosy:mb-1">
                  {photo.title}
                </h3>
              )}
              {photo.subtitle && (
                <p class="cosy:text-white/80 cosy:text-xs cosy:text-center cosy:px-2">
                  {photo.subtitle}
                </p>
              )}
            </div>
          )}
        </div>
      );
    })}
    
    <!-- 中心标题区域 -->
    {title && (
      <div class="cosy:absolute cosy:inset-0 cosy:flex cosy:items-center cosy:justify-center cosy:pointer-events-none">
        <!-- 标题内容容器 -->
        <div class="cosy:relative cosy:text-center cosy:z-10 cosy:px-6 cosy:py-4">
          <!-- 遮罩层 - 只覆盖文字区域 -->
          <div class="cosy:absolute cosy:inset-0 cosy:bg-white/80 cosy:backdrop-blur-sm cosy:rounded-2xl"></div>
          <!-- 标题内容 -->
          <div class="cosy:relative cosy:z-10">
            <h2 class="cosy:text-4xl cosy:font-bold cosy:text-gray-900 cosy:mb-2 cosy:leading-tight">
              {title}
            </h2>
            {subtitle && (
              <p class="cosy:text-lg cosy:text-gray-600 cosy:font-medium">
                {subtitle}
              </p>
            )}
          </div>
        </div>
      </div>
    )}
  </div>
</Container>
