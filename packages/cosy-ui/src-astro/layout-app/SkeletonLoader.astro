---
/**
 * @component SkeletonLoader
 *
 * @description
 * SkeletonLoader 组件是一个智能的骨架屏加载器，用于在页面加载或路由切换时显示骨架屏。
 * 它会监听 Astro 的页面过渡事件，在加载期间隐藏实际内容并显示骨架屏。
 *
 * @design
 * 设计理念：
 * 1. 用户体验优先 - 通过骨架屏提供视觉反馈，避免空白页面
 * 2. 智能切换 - 自动在加载状态和内容状态之间切换
 * 3. 可定制性 - 支持自定义骨架屏样式和布局
 * 4. 性能优化 - 使用 CSS 动画，避免阻塞主线程
 *
 * @usage
 * 基本用法：
 * ```astro
 * <SkeletonLoader>
 *   <div>实际内容</div>
 * </SkeletonLoader>
 * ```
 *
 * 自定义骨架屏：
 * ```astro
 * <SkeletonLoader
 *   skeletonClass="cosy:bg-gray-200 cosy:animate-pulse"
 *   loadingDelay={500}
 * >
 *   <div>实际内容</div>
 * </SkeletonLoader>
 * ```
 *
 * @props
 * - loadingDelay?: number - 延迟显示时间（毫秒），默认为 1000ms
 * - skeletonClass?: string - 骨架屏的自定义 CSS 类名
 * - showSkeleton?: boolean - 是否显示骨架屏，默认为 true
 *
 * @slots
 * - default - 实际内容，在加载完成后显示
 *
 * @events
 * 组件会自动监听以下 Astro 事件：
 * - astro:page-load - 页面加载完成时显示内容
 * - astro:before-preparation - 页面准备前显示骨架屏
 * - astro:before-swap - 路由切换前显示骨架屏
 * - astro:after-swap - 路由切换后显示内容
 */

import '../../style.ts';

export interface Props {
  /** 延迟显示时间（毫秒），默认1000ms */
  loadingDelay?: number;
  /** 骨架屏的自定义 CSS 类名 */
  skeletonClass?: string;
}

const { loadingDelay = 1000, skeletonClass = '' } = Astro.props;

// 生成唯一的 ID
const loaderId = `skeleton-loader-${Math.random().toString(36).substr(2, 9)}`;
---

<div id={loaderId} class="cosy:relative">
  <!-- 骨架屏 -->
  <div id={`${loaderId}-skeleton`} style="display: none;" class={skeletonClass}>
    <div class="cosy:skeleton cosy:h-96 cosy:w-96"></div>
  </div>

  <!-- 实际内容 -->
  <div
    id={`${loaderId}-content`}
    class="cosy:relative cosy:z-20"
    style="opacity: 1; transition: opacity 0.3s ease-in-out;">
    <slot />
  </div>
</div>

<script is:inline define:vars={{ loaderId, loadingDelay }}>
  let showTimeout = null;
  let hideTimeout = null;
  let loaded = false;

  const getSkeletonElement = () => {
    return document.getElementById(`${loaderId}-skeleton`);
  };

  const getContentElement = () => {
    return document.getElementById(`${loaderId}-content`);
  };

  const showSkeleton = () => {
    const skeleton = getSkeletonElement();
    const content = getContentElement();

    if (!skeleton || !content || loaded) return;

    // 隐藏内容
    content.style.opacity = '0';
    // 显示骨架屏
    skeleton.style.display = 'flex';
  };

  // 显示骨架屏的函数
  const showLoader = () => {
    if (loaded) return;

    // 设置延迟显示
    showTimeout = setTimeout(() => {
      if (loaded) return;
      showSkeleton();
    }, loadingDelay);
  };

  // 监听 Astro 页面过渡事件
  document.addEventListener('astro:page-load', () => {
    loaded = true;
  });

  document.addEventListener('astro:before-preparation', () => {
    loaded = false;
    showLoader('astro:before-preparation');
  });

  // 监听路由变化
  document.addEventListener('astro:before-swap', () => {
    loaded = false;
    showLoader('astro:before-swap');
  });

  document.addEventListener('astro:after-swap', () => {
    loaded = true;
  });

  // 页面卸载时清理定时器
  window.addEventListener('beforeunload', () => {
    if (showTimeout) {
      clearTimeout(showTimeout);
    }
    if (hideTimeout) {
      clearTimeout(hideTimeout);
    }
  });
</script>
