---

/**
 * @component Image
 *
 * @description
 * Image 组件是一个智能图片组件，根据图片源类型自动选择合适的处理方式。
 * 对于本地图片使用 LocalImage 组件（基于 Astro Image 优化），
 * 对于远程图片使用 RemoteImage 组件（包含加载状态和错误处理）。
 *
 * @props
 * - alt: string - 图片的替代文本，用于无障碍访问和图片加载失败时的显示
 * - border?: BorderSize - 图片的边框样式，支持多种边框粗细
 * - class?: string - 自定义 CSS 类名，用于覆盖默认样式
 * - height?: number - 图片的高度，单位为像素
 * - hover?: 'none' | 'scale' | 'brightness' | 'blur' - 图片的悬停效果，支持缩放、亮度调整和模糊效果
 * - lazy?: boolean - 是否启用图片懒加载，默认为 true（仅对远程图片有效）
 * - loading?: 'lazy' | 'eager' - 图片的加载方式，支持 lazy 和 eager
 * - loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton' - 加载指示器类型，支持脉冲、旋转器、进度条和骨架屏（仅对远程图片有效）
 * - objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down' - 图片的填充方式，控制图片如何适应容器
 * - objectPosition?: string - 图片的位置，控制图片在容器中的对齐方式
 * - rounded?: RoundedSize - 图片的圆角大小，提供多种圆角选项
 * - mask?: MaskType - 图片的遮罩形状，支持多种几何形状
 * - shadow?: ShadowSize - 图片的阴影效果，增强视觉层次感
 * - showError?: boolean - 是否显示加载失败的错误图，默认为 true（仅对远程图片有效）
 * - showPlaceholder?: boolean - 是否显示加载中的占位图，默认为 true（仅对远程图片有效）
 * - src: ImageSource - 图片源，可以是本地图片或远程URL
 * - tooltip?: string - 图片的提示文本，鼠标悬停时显示
 * - tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right' - 提示框的位置，默认为 top
 * - tooltipColor?: 'neutral' | 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' - 提示框的颜色主题
 * - tooltipOpen?: boolean - 是否强制显示提示框，默认为 false
 * - transition?: 'none' | 'fade' | 'slide' | 'zoom' - 图片的过渡动画效果，支持淡入、滑动和缩放
 * - width?: number - 图片的宽度，单位为像素
 * - preview?: boolean - 是否启用点击图片预览大图
 *
 * @usage
 * 基本用法（自动识别图片类型）：
 * ```astro
 * <Image src="/images/photo.jpg" alt="本地图片" />
 * <Image src="https://example.com/image.jpg" alt="远程图片" />
 * ```
 *
 * 带样式效果：
 * ```astro
 * <Image
 *   src="/images/photo.jpg"
 *   alt="一张照片"
 *   rounded="lg"
 *   shadow="md"
 *   hover="scale"
 * />
 * ```
 *
 * 远程图片带加载指示器：
 * ```astro
 * <Image
 *   src="https://example.com/large-image.jpg"
 *   alt="远程大图"
 *   loadingIndicator="progress"
 * />
 * ```
 */

import type { ImageMetadata } from 'astro';
import { cn } from '../../src/class';
import type {
    BorderSize,
    MaskType,
    RoundedSize,
    ShadowSize,
} from '../../src/common';
import Button from '../button/Button.astro';
import LocalImage from './LocalImage.astro';
import RemoteImage from './RemoteImage.astro';
import type { ImageSource } from './types';

export interface Props {
    /**
     * 图片的替代文本
     */
    alt: string;
    /**
     * 图片的边框样式
     * @default "none"
     */
    border?: BorderSize;
    /**
     * 自定义类名
     */
    class?: string;
    /**
     * 图片的高度
     */
    height?: number;
    /**
     * 图片的悬停效果
     * @default "none"
     */
    hover?: 'none' | 'scale' | 'brightness' | 'blur';
    /**
     * 是否启用图片懒加载
     * @default true
     */
    lazy?: boolean;
    /**
     * 图片的加载方式
     * @default "lazy"
     */
    loading?: 'lazy' | 'eager';
    /**
     * 加载指示器类型
     * @default "skeleton"
     */
    loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton';
    /**
     * 图片的填充方式
     * @default "cover"
     */
    objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
    /**
     * 图片的位置
     * @default "center"
     */
    objectPosition?: string;
    /**
     * 图片的圆角大小
     * @default "none"
     */
    rounded?: RoundedSize;
    /**
     * 图片的遮罩形状
     * @default "none"
     */
    mask?: MaskType;
    /**
     * 图片的阴影效果
     * @default "none"
     */
    shadow?: ShadowSize;
    /**
     * 是否显示加载失败的错误图
     * @default true
     */
    showError?: boolean;
    /**
     * 是否显示加载中的占位图
     * @default true
     */
    showPlaceholder?: boolean;
    /**
     * 图片源，可以是本地图片或远程URL
     */
    src: ImageSource;
    /**
     * 图片的过渡动画
     * @default "none"
     */
    transition?: 'none' | 'fade' | 'slide' | 'zoom';
    /**
     * 图片的提示文本
     */
    tooltip?: string;
    /**
     * 提示框的位置
     * @default "top"
     */
    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';
    /**
     * 提示框的颜色主题
     * @default "neutral"
     */
    tooltipColor?:
        | 'neutral'
        | 'primary'
        | 'secondary'
        | 'accent'
        | 'info'
        | 'success'
        | 'warning'
        | 'error';
    /**
     * 是否强制显示提示框
     * @default false
     */
    tooltipOpen?: boolean;
    /**
     * 图片的宽度
     */
    width?: number;
    /**
     * 作为背景层渲染（用于容器背景），使外层容器绝对定位铺满父级
     * @default false
     */
    asBackground?: boolean;
    /**
     * 是否启用点击图片预览大图
     * @default false
     */
    preview?: boolean;
    /**
     * 图片的布局方式
     * @default "constrained"
     */
    layout?: string;
}

const {
    src: imageSource,
    alt,
    width,
    height,
    layout = 'constrained',
    asBackground = false,
    loading = 'lazy',
    objectFit = 'cover',
    objectPosition = 'center',
    showPlaceholder = true,
    showError = true,
    class: className = '',
    rounded = 'none',
    mask = 'none',
    shadow = 'none',
    border = 'none',
    hover = 'none',
    transition = 'none',
    loadingIndicator = 'skeleton',
    tooltip,
    tooltipPlacement = 'top',
    tooltipColor = 'neutral',
    tooltipOpen = false,
    preview = false,
} = Astro.props;

// 判断是否为本地图片（ImageMetadata）
const isLocalImage = typeof imageSource !== 'string';
const previewEnabled = !!preview;
const previewId = `cosy-image-preview-${Math.random().toString(36).slice(2)}`;
const previewSrc = isLocalImage
    ? (imageSource as ImageMetadata).src
    : (imageSource as string);

// 构建通用属性对象
const commonProps = {
    alt,
    width,
    height,
    layout,
    objectFit,
    objectPosition,
    class: className,
    rounded,
    mask,
    shadow,
    border,
    hover,
    transition,
    tooltip,
    tooltipPlacement,
    tooltipColor,
    tooltipOpen,
};

// 远程图片专用属性
const remoteProps = {
    ...commonProps,
    loading,
    showPlaceholder,
    showError,
    loadingIndicator,
    src: imageSource as string,
};

// 本地图片专用属性
const localProps = {
    ...commonProps,
    src: imageSource as ImageMetadata,
};

// 使用 classBuilder 构建容器类名
const containerClass = cn()
    .add('not-prose')
    .flex()
    .items('center')
    .justify('center')
    .add('cosy:align-middle', 'cosy:mx-auto', 'cosy:my-auto')
    .add(asBackground ? 'cosy:absolute' : 'cosy:relative')
    .add(asBackground ? '' : 'cosy:w-full', asBackground ? '' : 'cosy:h-full')
    .inset(asBackground ? 0 : (undefined as any))
    .add(previewEnabled ? 'cosy:cursor-zoom-in' : '')
    .build();
---

<div
    class={containerClass}
    onclick={previewEnabled
        ? `window.__cosyImagePreviewOpen('${previewId}')`
        : undefined}
    data-image-container>
    {
        isLocalImage ? (
            <LocalImage {...localProps} />
        ) : (
            <RemoteImage {...remoteProps} />
        )
    }
</div>

{
    previewEnabled && (
        <div
            id={previewId}
            class="cosy:fixed cosy:inset-0 cosy:z-[999] cosy:bg-black/80 cosy:backdrop-blur-sm cosy:hidden cosy:p-4"
            data-cosy-image-preview
            onclick={`window.__cosyImagePreviewClose('${previewId}')`}>
            <div class="cosy:relative cosy:w-full cosy:h-full cosy:flex cosy:items-center cosy:justify-center">
                <img
                    src={previewSrc}
                    alt={alt}
                    class="cosy:max-h-[85vh] cosy:max-w-[92vw] cosy:w-auto cosy:h-auto cosy:rounded-lg cosy:shadow-2xl"
                    onclick="event.stopPropagation()"
                />
                <Button
                    shape="circle"
                    size="sm"
                    variant="ghost"
                    class="cosy:absolute cosy:top-8 cosy:right-4 cosy:text-white cosy:bg-white/10 hover:cosy:bg-white/20 cosy:border-0 cosy:shadow-none cosy:!min-h-0 cosy:h-9 cosy:w-9 cosy:p-0"
                    onclick={`event.stopPropagation(); window.__cosyImagePreviewClose('${previewId}')`}>
                    ✕
                </Button>
            </div>
        </div>
    )
}

<script>
    declare global {
        interface Window {
            __cosyImagePreviewOpen: (id: string) => void;
            __cosyImagePreviewClose: (id: string) => void;
        }
    }

    window.__cosyImagePreviewOpen = (id: string) => {
        const el = document.getElementById(id);
        if (!el) return;
        el.classList.remove('cosy:hidden');
        el.classList.add('cosy:flex');

        const onEsc = (e: KeyboardEvent) => {
            if (e.key === 'Escape') {
                window.__cosyImagePreviewClose(id);
            }
        };
        document.addEventListener('keydown', onEsc, { once: true });
    };

    window.__cosyImagePreviewClose = (id: string) => {
        const el = document.getElementById(id);
        if (!el) return;
        el.classList.remove('cosy:flex');
        el.classList.add('cosy:hidden');
    };
</script>
