---
/**
 * @component Image
 *
 * @description
 * Image 组件是一个基于 Astro Image 组件的增强图片组件，提供了丰富的功能，
 * 包括自动图片优化、懒加载、加载状态指示、错误处理以及各种视觉效果。
 * 它旨在提供更好的用户体验和性能优化。
 *
 * @design
 * 设计理念：
 * 1. 用户体验优先 - 提供加载状态反馈，减少用户等待焦虑
 * 2. 性能优化 - 自动图片优化，支持多种格式和尺寸
 * 3. 错误处理 - 优雅地处理图片加载失败的情况
 * 4. 视觉一致性 - 提供统一的圆角、阴影和过渡效果
 * 5. 灵活配置 - 支持多种自定义选项，适应不同场景
 *
 * @props
 * - alt: string - 图片的替代文本，用于无障碍访问和图片加载失败时的显示
 * - class?: string - 自定义 CSS 类名，用于覆盖默认样式
 * - height?: number - 图片的高度，单位为像素
 * - hover?: 'none' | 'scale' | 'brightness' | 'blur' - 图片的悬停效果，支持缩放、亮度调整和模糊效果
 * - lazy?: boolean - 是否启用图片懒加载，默认为 true
 * - loading?: 'lazy' | 'eager' - 图片的加载方式，支持 lazy 和 eager
 * - loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton' - 加载指示器类型，支持脉冲、旋转器、进度条和骨架屏
 * - objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down' - 图片的填充方式，控制图片如何适应容器
 * - objectPosition?: string - 图片的位置，控制图片在容器中的对齐方式
 * - rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full' - 图片的圆角大小，提供多种圆角选项
 * - shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' - 图片的阴影效果，增强视觉层次感
 * - showError?: boolean - 是否显示加载失败的错误图，默认为 true
 * - showPlaceholder?: boolean - 是否显示加载中的占位图，默认为 true
 * - src: ImageSource - 图片源，可以是本地图片或远程URL
 * - transition?: 'none' | 'fade' | 'slide' | 'zoom' - 图片的过渡动画效果，支持淡入、滑动和缩放
 * - width?: number - 图片的宽度，单位为像素
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Image src="/images/photo.jpg" alt="一张照片" />
 * ```
 *
 * 带样式效果：
 * ```astro
 * <Image
 *   src="/images/photo.jpg"
 *   alt="一张照片"
 *   rounded="lg"
 *   shadow="md"
 *   hover="scale"
 * />
 * ```
 *
 * 自定义加载指示器：
 * ```astro
 * <Image
 *   src="https://example.com/large-image.jpg"
 *   alt="远程大图"
 *   loadingIndicator="progress"
 * />
 * ```
 */

import { Image as AstroImage } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import '../../style.ts';
import { AlertTriangle } from '../../index-astro';
import type { ImageSource } from './image.ts';

interface Props {
  /**
   * 图片的替代文本
   */
  alt: string;
  /**
   * 自定义类名
   */
  class?: string;
  /**
   * 图片的高度
   */
  height?: number;
  /**
   * 图片的悬停效果
   * @default "none"
   */
  hover?: 'none' | 'scale' | 'brightness' | 'blur';
  /**
   * 是否启用图片懒加载
   * @default true
   */
  lazy?: boolean;
  /**
   * 图片的加载方式
   * @default "lazy"
   */
  loading?: 'lazy' | 'eager';
  /**
   * 加载指示器类型
   * @default "skeleton"
   */
  loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton';
  /**
   * 图片的填充方式
   * @default "cover"
   */
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  /**
   * 图片的位置
   * @default "center"
   */
  objectPosition?: string;
  /**
   * 图片的圆角大小
   * @default "none"
   */
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  /**
   * 图片的阴影效果
   * @default "none"
   */
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  /**
   * 是否显示加载失败的错误图
   * @default true
   */
  showError?: boolean;
  /**
   * 是否显示加载中的占位图
   * @default true
   */
  showPlaceholder?: boolean;
  /**
   * 图片源，可以是本地图片或远程URL
   */
  src: ImageSource;
  /**
   * 图片的过渡动画
   * @default "none"
   */
  transition?: 'none' | 'fade' | 'slide' | 'zoom';
  /**
   * 图片的宽度
   */
  width?: number;
}

const {
  src: imageSource,
  alt,
  width,
  height,
  loading = 'lazy',
  objectFit = 'cover',
  objectPosition = 'center',
  showPlaceholder = true,
  showError = true,
  class: className = '',
  rounded = 'none',
  shadow = 'none',
  hover = 'none',
  transition = 'none',
  loadingIndicator = 'skeleton',
} = Astro.props;

// 判断是否为远程图片
const isRemoteImage =
  typeof imageSource === 'string' &&
  (imageSource.startsWith('http') || imageSource.startsWith('//'));

// 判断是否为本地图片（ImageMetadata）
const isLocalImage = typeof imageSource === 'object' && 'src' in imageSource;

// 获取图片源
const imgSrc = typeof imageSource === 'string' ? imageSource : imageSource.src;

// 对象映射定义所有可能的类名
const objectFitClasses = {
  contain: 'cosy:object-contain',
  cover: 'cosy:object-cover',
  fill: 'cosy:object-fill',
  none: 'cosy:object-none',
  'scale-down': 'cosy:object-scale-down',
};

const roundedClasses = {
  none: '',
  sm: 'cosy:rounded-sm',
  md: 'cosy:rounded-md',
  lg: 'cosy:rounded-lg',
  xl: 'cosy:rounded-xl',
  '2xl': 'cosy:rounded-2xl',
  '3xl': 'cosy:rounded-3xl',
  full: 'cosy:rounded-full',
};

const shadowClasses = {
  none: '',
  sm: 'cosy:shadow-sm',
  md: 'cosy:shadow-md',
  lg: 'cosy:shadow-lg',
  xl: 'cosy:shadow-xl',
  '2xl': 'cosy:shadow-2xl',
};

const hoverClasses = {
  none: '',
  scale: 'cosy:hover:scale-110',
  brightness: 'cosy:hover:brightness-110',
  blur: 'cosy:hover:blur-sm',
};

const transitionClasses = {
  none: '',
  fade: 'cosy:transition-opacity cosy:duration-300',
  slide: 'cosy:transition-transform cosy:duration-300',
  zoom: 'cosy:transition-all cosy:duration-300',
};

// 构建图片类名
const imgClasses = [
  'cosy:object-center',
  objectFitClasses[objectFit] || objectFitClasses['cover'],
  roundedClasses[rounded],
  shadowClasses[shadow],
  hoverClasses[hover],
  transitionClasses[transition],
  className,
]
  .filter(Boolean)
  .join(' ');

// 构建占位图类名
const placeholderClasses = [
  'cosy:absolute cosy:inset-0',
  roundedClasses[rounded],
  loadingIndicator === 'skeleton' || loadingIndicator === 'pulse'
    ? 'cosy:animate-pulse cosy:bg-base-300'
    : '',
]
  .filter(Boolean)
  .join(' ');

// 构建错误占位图类名
const errorClasses = [
  'cosy:absolute cosy:inset-0 cosy:flex cosy:items-center cosy:justify-center',
  roundedClasses[rounded],
  'cosy:bg-error cosy:bg-opacity-10',
]
  .filter(Boolean)
  .join(' ');
---

<script is:inline>
  function handleImageLoad(img) {
    if (!(img instanceof HTMLImageElement)) return;
    const placeholder = img.parentElement?.querySelector('[data-placeholder]');
    if (placeholder) {
      placeholder.classList.add('opacity-0');
      setTimeout(() => placeholder.remove(), 300);
    }
  }

  function handleImageError(img) {
    if (!(img instanceof HTMLImageElement)) return;
    const placeholder = img.parentElement?.querySelector('[data-placeholder]');
    if (placeholder) {
      placeholder.remove();
    }
    const errorElement = img.parentElement?.querySelector('[data-error]');
    if (errorElement) {
      errorElement.classList.remove('hidden');
    }
  }

  function simulateLoadingProgress(img) {
    if (
      !(img instanceof HTMLImageElement) ||
      img.getAttribute('data-remote') !== 'true'
    )
      return;
    const progressBar = img.parentElement?.querySelector('progress');
    if (!progressBar) return;

    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      if (progress >= 100 || img.complete) {
        clearInterval(interval);
        progress = 100;
      }
      progressBar.value = Math.min(progress, 100);
    }, 200);

    img.addEventListener('load', () => {
      clearInterval(interval);
      progressBar.value = 100;
    });

    img.addEventListener('error', () => {
      clearInterval(interval);
    });
  }

  function initializeImageHandlers() {
    document.querySelectorAll('img[data-remote]').forEach((img) => {
      if (img instanceof HTMLImageElement) {
        if (img.complete) {
          handleImageLoad(img);
        } else {
          img.addEventListener('load', () => handleImageLoad(img));
          img.addEventListener('error', () => handleImageError(img));
          if (img.getAttribute('data-remote') === 'true') {
            simulateLoadingProgress(img);
          }
        }
      }
    });
  }

  document.addEventListener('astro:page-load', initializeImageHandlers);
  initializeImageHandlers();
</script>

<div
  class="cosy:relative cosy:w-full cosy:h-full cosy:align-middle cosy:mx-auto cosy:my-auto cosy:justify-center cosy:flex cosy:items-center">
  {/* 使用 Astro Image 组件处理本地图片 */}
  {
    isLocalImage ? (
      <AstroImage
        src={imageSource as ImageMetadata}
        alt={alt}
        width={width}
        height={height}
        class={imgClasses}
        style={{ objectPosition }}
      />
    ) : (
      /* 使用原生 img 标签处理远程图片
         Astro Image 组件不支持远程图片，因为：
         1. 需要在构建时处理图片优化
         2. 无法在构建时访问远程图片
         3. 无法生成多种格式和尺寸
         4. 无法进行图片压缩和优化
      */
      <img
        src={imgSrc}
        alt={alt}
        width={width}
        height={height}
        loading={loading}
        class={imgClasses}
        style={{ objectPosition }}
        data-remote={isRemoteImage ? 'true' : 'false'}
        decoding="async"
        {...(isRemoteImage && {
          'data-loading': 'true',
          'data-src': imgSrc,
        })}
      />
    )
  }

  {/* 加载占位图 */}
  {
    showPlaceholder && (
      <div class={placeholderClasses} data-placeholder>
        {/* 远程图片加载指示器 */}
        {isRemoteImage && loadingIndicator === 'spinner' && (
          <div class="cosy:absolute cosy:inset-0 cosy:m-auto cosy:text-primary cosy:loading cosy:loading-spinner cosy:loading-lg" />
        )}

        {isRemoteImage && loadingIndicator === 'progress' && (
          <div class="cosy:right-0 cosy:bottom-0 cosy:left-0 cosy:absolute">
            <progress class="cosy:w-full cosy:progress cosy:progress-primary" />
          </div>
        )}
      </div>
    )
  }

  {/* 错误占位图 */}
  {
    showError && (
      <div class={errorClasses} data-error hidden>
        <AlertTriangle size="32px" class="cosy:text-error" />
      </div>
    )
  }
</div>
