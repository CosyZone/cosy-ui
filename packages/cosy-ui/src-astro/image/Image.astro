---
/**
 * @component Image
 *
 * @description
 * Image 组件是一个智能图片组件，根据图片源类型自动选择合适的处理方式。
 * 对于本地图片使用 LocalImage 组件（基于 Astro Image 优化），
 * 对于远程图片使用 RemoteImage 组件（包含加载状态和错误处理）。
 *
 * @design
 * 设计理念：
 * 1. 智能分发 - 根据图片类型自动选择最佳处理方式
 * 2. 统一接口 - 提供一致的 API，隐藏内部实现差异
 * 3. 性能优化 - 本地图片自动优化，远程图片提供加载反馈
 * 4. 用户体验 - 统一的视觉效果和交互体验
 *
 * @props
 * - alt: string - 图片的替代文本，用于无障碍访问和图片加载失败时的显示
 * - border?: 'none' | 'sm' | 'md' | 'lg' | 'xl' - 图片的边框样式，支持多种边框粗细
 * - class?: string - 自定义 CSS 类名，用于覆盖默认样式
 * - height?: number - 图片的高度，单位为像素
 * - hover?: 'none' | 'scale' | 'brightness' | 'blur' - 图片的悬停效果，支持缩放、亮度调整和模糊效果
 * - lazy?: boolean - 是否启用图片懒加载，默认为 true（仅对远程图片有效）
 * - loading?: 'lazy' | 'eager' - 图片的加载方式，支持 lazy 和 eager
 * - loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton' - 加载指示器类型，支持脉冲、旋转器、进度条和骨架屏（仅对远程图片有效）
 * - objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down' - 图片的填充方式，控制图片如何适应容器
 * - objectPosition?: string - 图片的位置，控制图片在容器中的对齐方式
 * - rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full' - 图片的圆角大小，提供多种圆角选项
 * - mask?: 'circle' | 'decagon' | 'diamond' | 'heart' | 'hexagon' | 'hexagon-2' | 'none' | 'pentagon' | 'square' | 'squircle' | 'star' | 'star-2' | 'triangle' | 'triangle-2' | 'triangle-3' | 'triangle-4' - 图片的遮罩形状，支持多种几何形状
 * - shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' - 图片的阴影效果，增强视觉层次感
 * - showError?: boolean - 是否显示加载失败的错误图，默认为 true（仅对远程图片有效）
 * - showPlaceholder?: boolean - 是否显示加载中的占位图，默认为 true（仅对远程图片有效）
 * - src: ImageSource - 图片源，可以是本地图片或远程URL
 * - tooltip?: string - 图片的提示文本，鼠标悬停时显示
 * - tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right' - 提示框的位置，默认为 top
 * - tooltipColor?: 'neutral' | 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' - 提示框的颜色主题
 * - tooltipOpen?: boolean - 是否强制显示提示框，默认为 false
 * - transition?: 'none' | 'fade' | 'slide' | 'zoom' - 图片的过渡动画效果，支持淡入、滑动和缩放
 * - width?: number - 图片的宽度，单位为像素
 *
 * @usage
 * 基本用法（自动识别图片类型）：
 * ```astro
 * <Image src="/images/photo.jpg" alt="本地图片" />
 * <Image src="https://example.com/image.jpg" alt="远程图片" />
 * ```
 *
 * 带样式效果：
 * ```astro
 * <Image
 *   src="/images/photo.jpg"
 *   alt="一张照片"
 *   rounded="lg"
 *   shadow="md"
 *   hover="scale"
 * />
 * ```
 *
 * 远程图片带加载指示器：
 * ```astro
 * <Image
 *   src="https://example.com/large-image.jpg"
 *   alt="远程大图"
 *   loadingIndicator="progress"
 * />
 * ```
 */

import type { ImageMetadata } from 'astro';
import '../../style.ts';
import type { ImageSource } from './image.ts';
import LocalImage from './LocalImage.astro';
import RemoteImage from './RemoteImage.astro';
import type { BorderType } from './utils';
import ImagePromptPanel from './ImagePromptPanel.astro';

export interface Props {
  /**
   * 图片的替代文本
   */
  alt: string;
  /**
   * 图片的边框样式
   * @default "none"
   */
  border?: BorderType;
  /**
   * 自定义类名
   */
  class?: string;
  /**
   * 图片的高度
   */
  height?: number;
  /**
   * 图片的悬停效果
   * @default "none"
   */
  hover?: 'none' | 'scale' | 'brightness' | 'blur';
  /**
   * 是否启用图片懒加载
   * @default true
   */
  lazy?: boolean;
  /**
   * 图片的加载方式
   * @default "lazy"
   */
  loading?: 'lazy' | 'eager';
  /**
   * 加载指示器类型
   * @default "skeleton"
   */
  loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton';
  /**
   * 图片的填充方式
   * @default "cover"
   */
  objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down';
  /**
   * 图片的位置
   * @default "center"
   */
  objectPosition?: string;
  /**
   * 图片的圆角大小
   * @default "none"
   */
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  /**
   * 图片的遮罩形状
   * @default "none"
   */
  mask?:
    | 'circle'
    | 'decagon'
    | 'diamond'
    | 'heart'
    | 'hexagon'
    | 'hexagon-2'
    | 'none'
    | 'pentagon'
    | 'square'
    | 'squircle'
    | 'star'
    | 'star-2'
    | 'triangle'
    | 'triangle-2'
    | 'triangle-3'
    | 'triangle-4';
  /**
   * 图片的阴影效果
   * @default "none"
   */
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  /**
   * 是否显示加载失败的错误图
   * @default true
   */
  showError?: boolean;
  /**
   * 是否显示加载中的占位图
   * @default true
   */
  showPlaceholder?: boolean;
  /**
   * 图片源，可以是本地图片或远程URL
   */
  src: ImageSource;
  /**
   * 图片的过渡动画
   * @default "none"
   */
  transition?: 'none' | 'fade' | 'slide' | 'zoom';
  /**
   * 图片的提示文本
   */
  tooltip?: string;
  /**
   * 提示框的位置
   * @default "top"
   */
  tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';
  /**
   * 提示框的颜色主题
   * @default "neutral"
   */
  tooltipColor?:
    | 'neutral'
    | 'primary'
    | 'secondary'
    | 'accent'
    | 'info'
    | 'success'
    | 'warning'
    | 'error';
  /**
   * 是否强制显示提示框
   * @default false
   */
  tooltipOpen?: boolean;
  /**
   * 图片的宽度
   */
  width?: number;
  /**
   * 生成提示词
   */
  prompt?: string;
  /**
   * 使用模型
   */
  model?: string;
  /**
   * 是否展示生成信息面板（prompt/model）
   * @default true
   */
  showPromptPanel?: boolean;
}

const {
  src: imageSource,
  alt,
  width,
  height,
  loading = 'lazy',
  objectFit = 'cover',
  objectPosition = 'center',
  showPlaceholder = true,
  showError = true,
  class: className = '',
  rounded = 'none',
  mask = 'none',
  shadow = 'none',
  border = 'none',
  hover = 'none',
  transition = 'none',
  loadingIndicator = 'skeleton',
  tooltip,
  tooltipPlacement = 'top',
  tooltipColor = 'neutral',
  tooltipOpen = false,
  prompt = '',
  model = '',
  showPromptPanel = true,
} = Astro.props;

// 判断是否为本地图片（ImageMetadata）
const isLocalImage = typeof imageSource === 'object' && 'src' in imageSource;

// 构建通用属性对象
const commonProps = {
  alt,
  width,
  height,
  objectFit,
  objectPosition,
  class: className,
  rounded,
  mask,
  shadow,
  border,
  hover,
  transition,
  tooltip,
  tooltipPlacement,
  tooltipColor,
  tooltipOpen,
};

// 远程图片专用属性
const remoteProps = {
  ...commonProps,
  loading,
  showPlaceholder,
  showError,
  loadingIndicator,
  src: imageSource as string,
};

// 本地图片专用属性
const localProps = {
  ...commonProps,
  src: imageSource as ImageMetadata,
};
---

<>
  <div class="relative inline-block">
    {
      isLocalImage ? (
        <LocalImage {...localProps} />
      ) : (
        <RemoteImage {...remoteProps} />
      )
    }

    {/* 生成信息面板 */}
    {
      showPromptPanel !== false && (prompt || model) && (
        <ImagePromptPanel prompt={prompt} model={model} />
      )
    }
  </div>
</>
