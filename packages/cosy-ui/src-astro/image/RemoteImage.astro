---
/**
 * @component RemoteImage
 *
 * @description
 * 专门处理远程图片的组件，提供加载状态指示、错误处理和进度条功能。
 * 适用于外部图片资源，支持懒加载和多种加载指示器。
 *
 * @props
 * - alt: string - 图片的替代文本
 * - border?: 'none' | 'sm' | 'md' | 'lg' | 'xl' - 图片的边框样式
 * - class?: string - 自定义 CSS 类名
 * - height?: number - 图片的高度
 * - hover?: 'none' | 'scale' | 'brightness' | 'blur' - 悬停效果
 * - lazy?: boolean - 是否启用懒加载
 * - loading?: 'lazy' | 'eager' - 加载方式
 * - loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton' - 加载指示器类型
 * - objectFit?: 'contain' | 'cover' | 'fill' | 'none' | 'scale-down' - 填充方式
 * - objectPosition?: string - 图片位置
 * - rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full' - 圆角大小
 * - mask?: 'circle' | 'decagon' | 'diamond' | 'heart' | 'hexagon' | 'hexagon-2' | 'none' | 'pentagon' | 'square' | 'squircle' | 'star' | 'star-2' | 'triangle' | 'triangle-2' | 'triangle-3' | 'triangle-4' - 遮罩形状
 * - shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' - 阴影效果
 * - showError?: boolean - 是否显示错误图
 * - showPlaceholder?: boolean - 是否显示占位图
 * - src: string - 远程图片 URL
 * - tooltip?: string - 提示文本
 * - tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right' - 提示框位置
 * - tooltipColor?: 'neutral' | 'primary' | 'secondary' | 'accent' | 'info' | 'success' | 'warning' | 'error' - 提示框颜色
 * - tooltipOpen?: boolean - 是否强制显示提示框
 * - transition?: 'none' | 'fade' | 'slide' | 'zoom' - 过渡动画
 * - width?: number - 图片的宽度
 */

import ImageTooltipWrapper from './TooltipWrapper.astro';
import ImagePlaceholder from './ImagePlaceholder.astro';
import ImageError from './ImageError.astro';
import {
    objectFitClasses,
    roundedClasses,
    maskClasses,
    shadowClasses,
    borderClasses,
    hoverClasses,
    transitionClasses,
    type ObjectFitType,
    type HoverType,
    type TransitionType,
} from './utils';
import type {
    MaskType,
    ShadowSize,
    BorderSize,
    RoundedSize,
} from '../../src/common';

interface Props {
    /**
     * 图片的替代文本
     */
    alt: string;
    /**
     * 图片的边框样式
     * @default "none"
     */
    border?: BorderSize;
    /**
     * 自定义类名
     */
    class?: string;
    /**
     * 图片的高度
     */
    height?: number;
    /**
     * 图片的悬停效果
     * @default "none"
     */
    hover?: HoverType;
    /**
     * 是否启用图片懒加载
     * @default true
     */
    lazy?: boolean;
    /**
     * 图片的加载方式
     * - lazy：延迟加载，接近视口时再请求，减少首屏带宽占用；页面可见后仍可能继续加载
     * - eager：尽快加载，适合首屏关键图片；可能占用带宽并推迟 window load 完成
     * @default "lazy"
     */
    loading?: 'lazy' | 'eager';
    /**
     * 加载指示器类型
     * @default "skeleton"
     */
    loadingIndicator?: 'pulse' | 'spinner' | 'progress' | 'skeleton';
    /**
     * 图片的填充方式
     * @default "cover"
     */
    objectFit?: ObjectFitType;
    /**
     * 图片的位置
     * @default "center"
     */
    objectPosition?: string;
    /**
     * 图片的圆角大小
     * @default "none"
     */
    rounded?: RoundedSize;
    /**
     * 图片的遮罩形状
     * @default "none"
     */
    mask?: MaskType;
    /**
     * 图片的阴影效果
     * @default "none"
     */
    shadow?: ShadowSize;
    /**
     * 是否显示加载失败的错误图
     * @default true
     */
    showError?: boolean;
    /**
     * 是否显示加载中的占位图
     * @default true
     */
    showPlaceholder?: boolean;
    /**
     * 远程图片 URL
     */
    src: string;
    /**
     * 图片的过渡动画
     * @default "none"
     */
    transition?: TransitionType;
    /**
     * 图片的提示文本
     */
    tooltip?: string;
    /**
     * 提示框的位置
     * @default "top"
     */
    tooltipPlacement?: 'top' | 'bottom' | 'left' | 'right';
    /**
     * 提示框的颜色主题
     * @default "neutral"
     */
    tooltipColor?:
        | 'neutral'
        | 'primary'
        | 'secondary'
        | 'accent'
        | 'info'
        | 'success'
        | 'warning'
        | 'error';
    /**
     * 是否强制显示提示框
     * @default false
     */
    tooltipOpen?: boolean;
    /**
     * 图片的宽度
     */
    width?: number;
    /**
     * 图片的布局方式
     * @default "constrained"
     */
    layout?: string;
}

const {
    src: imageUrl,
    alt,
    width,
    height,
    layout = 'constrained',
    loading = 'lazy',
    objectFit = 'cover',
    objectPosition = 'center',
    showPlaceholder = true,
    showError = true,
    class: className = '',
    rounded = 'none',
    mask = 'none',
    shadow = 'none',
    border = 'none',
    hover = 'none',
    transition = 'none',
    loadingIndicator = 'skeleton',
    tooltip,
    tooltipPlacement = 'top',
    tooltipColor = 'neutral',
    tooltipOpen = false,
} = Astro.props;

// 构建图片类名
const imgClasses = [
    'cosy:object-center',
    objectFitClasses[objectFit] || objectFitClasses['cover'],
    roundedClasses[rounded],
    maskClasses[mask],
    shadowClasses[shadow],
    borderClasses[border],
    hoverClasses[hover],
    transitionClasses[transition],
    layout === 'fill' ? 'cosy:w-full cosy:h-full' : '',
    className,
]
    .filter(Boolean)
    .join(' ');
---

<script is:inline>
    function handleImageLoad(img) {
        if (!(img instanceof HTMLImageElement)) return;
        // 向上查找最近的 data-image-container 祖先
        let container = img.parentElement;
        while (container && !container.hasAttribute('data-image-container')) {
            container = container.parentElement;
        }
        if (container) {
            // 移除所有 data-placeholder 元素
            const placeholders =
                container.querySelectorAll('[data-placeholder]');
            placeholders.forEach((el) => {
                el.classList.add('opacity-0');
                setTimeout(() => el.remove(), 300);
            });
        } else {
            console.warn('data-image-container not found', img);
        }
    }

    function handleImageError(img) {
        if (!(img instanceof HTMLImageElement)) return;
        const placeholder =
            img.parentElement?.querySelector('[data-placeholder]');
        if (placeholder) {
            placeholder.remove();
        }
        const errorElement = img.parentElement?.querySelector('[data-error]');
        if (errorElement) {
            errorElement.classList.remove('hidden');
        }
    }

    function simulateLoadingProgress(img) {
        if (!(img instanceof HTMLImageElement)) return;
        const progressBar = img.parentElement?.querySelector('progress');
        if (!progressBar) return;

        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100 || img.complete) {
                clearInterval(interval);
                progress = 100;
            }
            progressBar.value = Math.min(progress, 100);
        }, 200);

        img.addEventListener('load', () => {
            clearInterval(interval);
            progressBar.value = 100;
        });

        img.addEventListener('error', () => {
            clearInterval(interval);
        });
    }

    function initializeImageHandlers() {
        document.querySelectorAll('img[data-remote]').forEach((img) => {
            if (img instanceof HTMLImageElement) {
                if (img.complete) {
                    handleImageLoad(img);
                } else {
                    img.addEventListener('load', () => handleImageLoad(img));
                    img.addEventListener('error', () => handleImageError(img));
                    simulateLoadingProgress(img);
                }
            }
        });
    }

    document.addEventListener('astro:page-load', initializeImageHandlers);
    initializeImageHandlers();
</script>

{
    tooltip ? (
        <ImageTooltipWrapper
            tooltip={tooltip}
            tooltipPlacement={tooltipPlacement}
            tooltipColor={tooltipColor}
            tooltipOpen={tooltipOpen}>
            <img
                src={imageUrl}
                alt={alt}
                width={layout === 'fill' ? undefined : width}
                height={layout === 'fill' ? undefined : height}
                loading={loading}
                fetchpriority={loading === 'eager' ? 'high' : 'auto'}
                class={imgClasses}
                style={{ objectPosition }}
                data-remote="true"
                decoding="async"
                data-loading="true"
                data-src={imageUrl}
            />
        </ImageTooltipWrapper>
    ) : (
        <img
            remote-image
            src={imageUrl}
            alt={alt}
            width={layout === 'fill' ? undefined : width}
            height={layout === 'fill' ? undefined : height}
            loading={loading}
            fetchpriority={loading === 'eager' ? 'high' : 'auto'}
            class={imgClasses}
            style={{ objectPosition }}
            data-remote="true"
            decoding="async"
            data-loading="true"
            data-src={imageUrl}
        />
    )
}

{/* 加载占位图 */}
{
    showPlaceholder && (
        <ImagePlaceholder
            isRemote={true}
            loadingIndicator={loadingIndicator}
            rounded={rounded}
            mask={mask}
        />
    )
}

{/* 错误占位图 */}
{showError && <ImageError rounded={rounded} mask={mask} />}
