---
/**
 * @component Text
 *
 * @description
 * Text 组件用于创建各种文本元素，提供一致的排版样式和灵活的定制选项。
 *
 * @design
 * 设计理念：
 * 1. 一致性 - 确保整个应用中文本样式的一致性
 * 2. 可读性 - 优化文本的可读性和舒适度
 * 3. 可定制性 - 支持多种配置选项，适应不同场景需求
 * 4. 无障碍性 - 遵循语义化HTML标准，确保屏幕阅读器可以正确解析内容
 *
 * 视觉特点：
 * - 不同的字体大小和行高
 * - 可选的字体粗细和样式
 * - 可定制的颜色和对齐方式
 * - 支持截断和省略号
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Text>这是一段普通文本</Text>
 * ```
 *
 * 不同大小：
 * ```astro
 * <Text size="xs">超小文本</Text>
 * <Text size="sm">小文本</Text>
 * <Text size="md">中等文本</Text>
 * <Text size="lg">大文本</Text>
 * <Text size="xl">超大文本</Text>
 * ```
 *
 * 不同颜色：
 * ```astro
 * <Text color="primary">主要颜色文本</Text>
 * <Text color="secondary">次要颜色文本</Text>
 * <Text color="accent">强调色文本</Text>
 * <Text color="muted">柔和色文本</Text>
 * ```
 *
 * 字体粗细：
 * ```astro
 * <Text weight="light">细体文本</Text>
 * <Text weight="normal">常规文本</Text>
 * <Text weight="medium">中等粗文本</Text>
 * <Text weight="semibold">半粗体文本</Text>
 * <Text weight="bold">粗体文本</Text>
 * ```
 *
 * 文本对齐：
 * ```astro
 * <Text align="left">左对齐文本</Text>
 * <Text align="center">居中对齐文本</Text>
 * <Text align="right">右对齐文本</Text>
 * <Text align="justify">两端对齐文本</Text>
 * ```
 *
 * 文本截断：
 * ```astro
 * <Text truncate>这是一段很长的文本，将会被截断并显示省略号...</Text>
 * ```
 *
 * 组合使用：
 * ```astro
 * <Text
 *   size="lg"
 *   color="primary"
 *   weight="bold"
 *   align="center"
 *   class="my-4"
 * >
 *   这是一段重要的提示文本
 * </Text>
 * ```
 *
 * @props
 * @prop {string} [as='p'] - 要渲染的HTML元素，如 'p', 'span', 'div' 等
 * @prop {'xs'|'sm'|'md'|'lg'|'xl'} [size='md'] - 文本大小
 * @prop {'light'|'normal'|'medium'|'semibold'|'bold'} [weight='normal'] - 字体粗细
 * @prop {'default'|'primary'|'secondary'|'accent'|'muted'} [color='default'] - 文本颜色
 * @prop {'left'|'center'|'right'|'justify'} [align='left'] - 文本对齐方式
 * @prop {boolean} [italic=false] - 是否使用斜体
 * @prop {boolean} [underline=false] - 是否添加下划线
 * @prop {boolean} [truncate=false] - 是否截断文本并显示省略号
 * @prop {string} [class] - 自定义 CSS 类名
 * @prop {string} [style] - 自定义内联样式
 *
 * @slots
 * @slot default - 文本内容
 *
 * @accessibility
 * - 使用语义化的HTML元素
 * - 确保文本颜色与背景色的对比度符合WCAG标准
 */

import '../../style.ts';

export interface ITextProps {
  as?: string;
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  weight?: 'light' | 'normal' | 'medium' | 'semibold' | 'bold';
  color?: 'default' | 'primary' | 'secondary' | 'accent' | 'muted';
  align?: 'left' | 'center' | 'right' | 'justify';
  italic?: boolean;
  underline?: boolean;
  truncate?: boolean;
  class?: string;
  style?: string;
}

// 兼容旧用法导出（建议使用 ITextProps）
export type Props = ITextProps;

const {
  as: Element = 'p',
  size = 'md',
  weight = 'normal',
  color = 'default',
  align = 'left',
  italic = false,
  underline = false,
  truncate = false,
  class: className = '',
  style = '',
} = Astro.props;

// 根据大小设置样式
const sizeClasses = {
  xs: 'cosy:text-xs',
  sm: 'cosy:text-sm',
  md: 'cosy:text-base',
  lg: 'cosy:text-lg',
  xl: 'cosy:text-xl',
};
const sizeClass = sizeClasses[size as keyof typeof sizeClasses];

// 根据粗细设置样式
const weightClasses = {
  light: 'cosy:font-light',
  normal: 'cosy:font-normal',
  medium: 'cosy:font-medium',
  semibold: 'cosy:font-semibold',
  bold: 'cosy:font-bold',
};
const weightClass = weightClasses[weight as keyof typeof weightClasses];

// 根据颜色设置样式
const colorClasses = {
  default: '',
  primary: 'cosy:text-primary-600 cosy:dark:text-primary-400',
  secondary: 'cosy:text-secondary-600 cosy:dark:text-secondary-400',
  accent: 'cosy:text-accent-600 cosy:dark:text-accent-400',
  muted: 'cosy:text-gray-600 cosy:dark:text-gray-400',
};
const colorClass = colorClasses[color as keyof typeof colorClasses];

// 根据对齐方式设置样式
const alignClasses = {
  left: 'cosy:text-left',
  center: 'cosy:text-center',
  right: 'cosy:text-right',
  justify: 'cosy:text-justify',
};
const alignClass = alignClasses[align as keyof typeof alignClasses];

// 其他样式
const italicClass = italic ? 'cosy:italic' : '';
const underlineClass = underline ? 'cosy:underline' : '';
const truncateClass = truncate ? 'cosy:truncate' : '';

// 组合所有类名
const combinedClass = `text ${sizeClass} ${weightClass} ${colorClass} ${alignClass} ${italicClass} ${underlineClass} ${truncateClass} ${className}`;
---

<Element class={combinedClass} style={style}>
  <slot />
</Element>

<style>
  .text {
    margin-bottom: 1em;
    line-height: 1.5;
  }

  /* 确保截断文本正常工作 */
  .truncate {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 100%;
  }
</style>
