---
/**
 * @component ErrorPage
 *
 * @description
 * 通用错误页面组件，根据错误码自动选择合适的错误页面。
 * 简化错误处理，提供统一的错误页面入口。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <ErrorPage errorCode={404} />
 * ```
 *
 * 带完整配置：
 * ```astro
 * <ErrorPage
 *   errorCode={503}
 *   maintenanceMode={true}
 *   estimatedRecovery="2024-12-25 10:00"
 *   debugKVs={{ reason: '系统升级' }}
 * />
 * ```
 *
 * @props
 * @prop {number} errorCode - HTTP错误状态码 (404, 403, 500, 503 等)
 * @prop {Record<string, string>} [debugKVs={}] - 调试信息键值对
 * @prop {string} [loginUrl] - 登录页面URL (用于403错误)
 * @prop {string} [contactUrl] - 联系页面URL
 * @prop {string} [supportUrl] - 技术支持页面URL (用于500错误)
 * @prop {string} [statusPageUrl] - 系统状态页面URL (用于503错误)
 * @prop {string} [notificationUrl] - 通知订阅页面URL (用于503错误)
 * @prop {boolean} [maintenanceMode=false] - 是否为维护模式 (用于503错误)
 * @prop {string} [estimatedRecovery] - 预期恢复时间 (用于503错误)
 */

import Error403 from './403.astro';
import Error404 from './404.astro';
import Error500 from './500.astro';
import Error503 from './503.astro';

interface Props {
    errorCode: number;
    debugKVs?: Record<string, string>;
    loginUrl?: string;
    contactUrl?: string;
    supportUrl?: string;
    statusPageUrl?: string;
    notificationUrl?: string;
    maintenanceMode?: boolean;
    estimatedRecovery?: string;
}

const {
    errorCode,
    debugKVs = {},
    loginUrl,
    contactUrl,
    supportUrl,
    statusPageUrl,
    notificationUrl,
    maintenanceMode = false,
    estimatedRecovery,
} = Astro.props;

// 根据错误码选择对应的组件
function getErrorComponent(code: number) {
    switch (code) {
        case 403:
            return Error403;
        case 404:
            return Error404;
        case 500:
            return Error500;
        case 503:
            return Error503;
        default:
            return Error404; // 默认使用404页面
    }
}

const ErrorComponent = getErrorComponent(errorCode);

// 根据错误码准备对应的props
function getErrorProps(code: number) {
    const baseProps = { debugKVs };

    switch (code) {
        case 403:
            return { ...baseProps, loginUrl, contactUrl };
        case 404:
            return baseProps;
        case 500:
            return { ...baseProps, supportUrl, statusPageUrl };
        case 503:
            return {
                ...baseProps,
                maintenanceMode,
                estimatedRecovery,
                statusPageUrl,
                notificationUrl,
            };
        default:
            return baseProps;
    }
}

const errorProps = getErrorProps(errorCode);
---

<ErrorComponent {...errorProps} />
