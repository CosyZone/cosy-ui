---
/**
 * @component Banner
 *
 * @description
 * Banner 组件用于在页面中展示醒目的横幅信息，通常用于展示重要的标语、公告或营销信息。
 * 组件设计简洁大方，具有平滑的动画效果，能够吸引用户注意力。
 *
 * @design
 * 设计理念：
 * 1. 视觉冲击力 - 使用大号字体和醒目的背景，确保信息能够被用户注意到
 * 2. 简洁明了 - 简单的布局和充足的留白，让信息更容易被理解
 * 3. 动态效果 - 支持多种动画效果选择
 * 4. 响应式设计 - 在不同屏幕尺寸下保持良好的可读性
 *
 * 视觉特点：
 * - 圆角设计：柔和的视觉效果
 * - 悬停效果：轻微放大和阴影增强，提供交互反馈
 * - 动画效果：支持淡入、上滑或组合动画
 * - 模糊背景：半透明背景配合模糊效果，现代感强
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Banner>欢迎使用我们的服务</Banner>
 * ```
 *
 * 指定动画效果：
 * ```astro
 * <Banner animation="fade">淡入效果的横幅</Banner>
 * ```
 *
 * @props
 * @prop {string} [animation='both'] - 动画效果类型：none（无动画）、fade（仅淡入）、slide（仅上滑）、both（淡入和上滑）
 * @prop {string} [bgColor='primary'] - 背景颜色，支持基础颜色和渐变色彩：primary、secondary、accent、info、success、warning、error，以及各种渐变色彩如 gradient-sky、gradient-sunset、gradient-forest、gradient-ocean、gradient-mountain、gradient-flower、gradient-watermelon、gradient-lemon、gradient-grape、gradient-blueberry、gradient-mango、gradient-kiwi、gradient-pitaya、gradient-banana
 * @prop {string} [class] - 自定义CSS类，可用于覆盖默认样式
 * @prop {string} [style] - 自定义CSS样式，可用于覆盖默认样式
 * @prop {string} [textColor] - 文本颜色，默认根据背景色自动设置，可手动指定颜色值
 *
 * @slots
 * @slot default - Banner 中显示的文本内容
 *
 * @accessibility
 * - 使用适当的字体大小和行高，确保文本可读性
 * - 动画遵循 prefers-reduced-motion 媒体查询，尊重用户的动画偏好设置
 */

import '../../style.ts';

interface Props {
  /**
   * 动画效果类型，可选值：
   * - 'none': 无动画
   * - 'fade': 仅淡入效果
   * - 'slide': 仅上滑效果
   * - 'both': 淡入和上滑效果
   * 默认为'both'
   */
  animation?: 'none' | 'fade' | 'slide' | 'both';

  /**
   * 背景颜色，默认为primary
   */
  bgColor?:
    | 'primary'
    | 'secondary'
    | 'accent'
    | 'info'
    | 'success'
    | 'warning'
    | 'error'
    // 大自然灵感渐变
    | 'gradient-sky'
    | 'gradient-sunset'
    | 'gradient-forest'
    | 'gradient-ocean'
    | 'gradient-mountain'
    | 'gradient-flower'
    // 水果灵感渐变
    | 'gradient-watermelon'
    | 'gradient-lemon'
    | 'gradient-grape'
    | 'gradient-blueberry'
    | 'gradient-mango'
    | 'gradient-kiwi'
    | 'gradient-pitaya'
    | 'gradient-banana';

  /**
   * 自定义CSS类，可用于覆盖默认样式
   */
  class?: string;

  /**
   * 自定义CSS样式，可用于覆盖默认样式
   */
  style?: string;

  /**
   * 文本颜色，默认根据背景色自动设置
   */
  textColor?: string;
}

const {
  class: className = '',
  style = '',
  bgColor = 'primary',
  textColor = '',
  animation = 'both',
} = Astro.props;

// 根据背景色自动设置文本颜色
const getTextColorClass = () => {
  if (textColor) return `cosy:text-${textColor}`;

  // 对于深色背景，使用白色文本
  const darkBgColors = ['primary', 'secondary', 'accent', 'error'];
  return darkBgColors.includes(bgColor)
    ? 'cosy:text-white'
    : 'cosy:text-gray-800';
};

// 渐变色背景映射
const gradientBgClassMap = {
  'gradient-sky': 'cosy:bg-gradient-to-r cosy:from-sky-400 cosy:to-indigo-500',
  'gradient-watermelon':
    'cosy:bg-gradient-to-r cosy:from-green-300 cosy:via-pink-400 cosy:to-red-500',
  'gradient-lemon':
    'cosy:bg-gradient-to-r cosy:from-yellow-200 cosy:via-yellow-400 cosy:to-yellow-600',
  'gradient-grape':
    'cosy:bg-gradient-to-r cosy:from-purple-400 cosy:via-indigo-500 cosy:to-purple-700',
  'gradient-mango':
    'cosy:bg-gradient-to-r cosy:from-yellow-300 cosy:via-orange-400 cosy:to-orange-600',
  'gradient-forest':
    'cosy:bg-gradient-to-r cosy:from-green-700 cosy:to-lime-300',
  'gradient-ocean': 'cosy:bg-gradient-to-r cosy:from-cyan-400 cosy:to-blue-700',
  'gradient-sunset':
    'cosy:bg-gradient-to-r cosy:from-orange-400 cosy:via-pink-500 cosy:to-red-500',
  'gradient-flower':
    'cosy:bg-gradient-to-r cosy:from-pink-300 cosy:via-purple-400 cosy:to-fuchsia-500',
  'gradient-pitaya':
    'cosy:bg-gradient-to-r cosy:from-pink-200 cosy:via-fuchsia-400 cosy:to-lime-300',
  'gradient-banana':
    'cosy:bg-gradient-to-r cosy:from-yellow-100 cosy:via-yellow-300 cosy:to-yellow-500',
  'gradient-blueberry':
    'cosy:bg-gradient-to-r cosy:from-blue-400 cosy:via-blue-600 cosy:to-indigo-700',
  'gradient-kiwi':
    'cosy:bg-gradient-to-r cosy:from-lime-200 cosy:via-green-400 cosy:to-green-700',
};

const isGradient =
  typeof bgColor === 'string' && bgColor.startsWith('gradient-');
let bgClass = '';
if (isGradient) {
  bgClass =
    gradientBgClassMap[bgColor as keyof typeof gradientBgClassMap] ?? '';
} else {
  bgClass = `cosy:bg-${bgColor}`;
}
const bannerClasses = [
  'cosy:w-full',
  'cosy:py-8',
  'cosy:px-4',
  'cosy:rounded-lg',
  'cosy:text-center',
  'cosy:text-2xl',
  'cosy:md:text-3xl',
  'cosy:font-bold',
  'cosy:transition-all',
  'cosy:duration-300',
  'cosy:ease-in-out',
  'cosy:backdrop-blur-sm',
  'cosy:bg-opacity-90',
  'cosy:shadow-md',
  'cosy:hover:shadow-lg',
  'cosy:hover:scale-[1.01]',
  bgClass,
  getTextColorClass(),
  className,
].join(' ');

// 动画类
const animationClasses = {
  none: '',
  fade: 'cosy:animate-fadeIn',
  slide: 'cosy:animate-slideUp',
  both: 'cosy:animate-fadeIn cosy:animate-slideUp',
}[animation];
---

<div class={`${bannerClasses} ${animationClasses}`} style={style}>
  <slot />
</div>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(20px);
    }
    to {
      transform: translateY(0);
    }
  }

  /* 动画类 */
  .cosy\:animate-fadeIn {
    animation: fadeIn 0.8s ease-in-out;
  }

  .cosy\:animate-slideUp {
    animation: slideUp 0.5s ease-out;
  }

  @media (prefers-reduced-motion: reduce) {
    .cosy\:animate-fadeIn,
    .cosy\:animate-slideUp {
      animation: none;
    }
  }
</style>
