---
/**
 * @component Banner
 *
 * @description
 * Banner 组件用于在页面中展示醒目的横幅信息，通常用于展示重要的标语、公告或营销信息。
 * 组件设计简洁大方，具有平滑的动画效果，能够吸引用户注意力。
 *
 * @design
 * 设计理念：
 * 1. 视觉冲击力 - 使用大号字体和醒目的背景，确保信息能够被用户注意到
 * 2. 简洁明了 - 简单的布局和充足的留白，让信息更容易被理解
 * 3. 动态效果 - 支持多种动画效果选择
 * 4. 响应式设计 - 在不同屏幕尺寸下保持良好的可读性
 *
 * 视觉特点：
 * - 圆角设计：柔和的视觉效果
 * - 悬停效果：轻微放大和阴影增强，提供交互反馈
 * - 动画效果：支持淡入、上滑或组合动画
 * - 模糊背景：半透明背景配合模糊效果，现代感强
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Banner>欢迎使用我们的服务</Banner>
 * ```
 *
 * 指定动画效果：
 * ```astro
 * <Banner animation="fade">淡入效果的横幅</Banner>
 * ```
 *
 * @props
 * @prop {string} [animation='both'] - 动画效果类型：none（无动画）、fade（仅淡入）、slide（仅上滑）、both（淡入和上滑）
 * @prop {string} [bgColor='primary'] - 背景颜色，支持基础颜色和渐变色彩：primary、secondary、accent、info、success、warning、error，以及各种渐变色彩如 gradient-sky、gradient-sunset、gradient-forest、gradient-ocean、gradient-mountain、gradient-flower、gradient-watermelon、gradient-lemon、gradient-grape、gradient-blueberry、gradient-mango、gradient-kiwi、gradient-pitaya、gradient-banana
 * @prop {string} [class] - 自定义CSS类，可用于覆盖默认样式
 * @prop {string} [style] - 自定义CSS样式，可用于覆盖默认样式
 * @prop {string} [textColor] - 文本颜色，默认根据背景色自动设置，可手动指定颜色值
 *
 * @slots
 * @slot default - Banner 中显示的文本内容
 *
 * @accessibility
 * - 使用适当的字体大小和行高，确保文本可读性
 * - 动画遵循 prefers-reduced-motion 媒体查询，尊重用户的动画偏好设置
 */

import "../../style.ts";
import type { BackgroundColor } from "../../src/common";
import { getBackgroundClass } from "../../src/common";

interface IProps {
	/**
	 * 动画效果类型，可选值：
	 * - 'none': 无动画
	 * - 'fade': 仅淡入效果
	 * - 'slide': 仅上滑效果
	 * - 'both': 淡入和上滑效果
	 * 默认为'both'
	 */
	animation?: "none" | "fade" | "slide" | "both";

	/**
	 * 背景颜色，默认为primary
	 */
	bgColor?: BackgroundColor;

	/**
	 * 自定义CSS类，可用于覆盖默认样式
	 */
	class?: string;

	/**
	 * 自定义CSS样式，可用于覆盖默认样式
	 */
	style?: string;

	/**
	 * 文本颜色，默认根据背景色自动设置
	 */
	textColor?: string;
}

const {
	class: className = "",
	style = "",
	bgColor = "primary",
	textColor = "",
	animation = "both",
} = Astro.props as IProps;

// 根据背景色自动设置文本颜色
const getTextColorClass = () => {
	if (textColor) return `cosy:text-${textColor}`;

	// 对于深色背景，使用白色文本
	const darkBgColors = ["primary", "secondary", "accent", "error"];
	return darkBgColors.includes(bgColor)
		? "cosy:text-white"
		: "cosy:text-gray-800";
};

const bgClass = getBackgroundClass(bgColor as BackgroundColor);
const bannerClasses = [
	"cosy:w-full",
	"cosy:py-8",
	"cosy:px-4",
	"cosy:rounded-lg",
	"cosy:text-center",
	"cosy:text-2xl",
	"cosy:md:text-3xl",
	"cosy:font-bold",
	"cosy:transition-all",
	"cosy:duration-300",
	"cosy:ease-in-out",
	"cosy:backdrop-blur-sm",
	"cosy:bg-opacity-90",
	"cosy:shadow-md",
	"cosy:hover:shadow-lg",
	"cosy:hover:scale-[1.01]",
	bgClass,
	getTextColorClass(),
	className,
].join(" ");

// 动画类
const animationClasses = {
	none: "",
	fade: "cosy:animate-fadeIn",
	slide: "cosy:animate-slideUp",
	both: "cosy:animate-fadeIn cosy:animate-slideUp",
}[animation];
---

<div class={`${bannerClasses} ${animationClasses}`} style={style}>
  <slot />
</div>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(20px);
    }
    to {
      transform: translateY(0);
    }
  }

  /* 动画类 */
  .cosy\:animate-fadeIn {
    animation: fadeIn 0.8s ease-in-out;
  }

  .cosy\:animate-slideUp {
    animation: slideUp 0.5s ease-out;
  }

  @media (prefers-reduced-motion: reduce) {
    .cosy\:animate-fadeIn,
    .cosy\:animate-slideUp {
      animation: none;
    }
  }
</style>
