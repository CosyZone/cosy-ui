---
/**
 * @component Card
 *
 * @description
 * Card 组件用于在页面中展示相关内容的容器，通常包含标题、描述和可选的图片。
 * 组件设计简洁大方，具有平滑的动画效果和交互反馈，适合展示产品、文章或功能介绍等内容。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Card
 *   title="卡片标题"
 *   subtitle="卡片描述文本"
 * >
 *   卡片内容
 * </Card>
 * ```
 *
 * 带图片的卡片：
 * ```astro
 * <Card
 *   title="产品名称"
 *   subtitle="产品描述"
 *   imageUrl="/path/to/image.jpg"
 * >
 *   其他产品信息
 * </Card>
 * ```
 *
 * 可点击的卡片（链接）：
 * ```astro
 * <Card
 *   title="文章标题"
 *   subtitle="文章摘要"
 *   imageUrl="/path/to/image.jpg"
 *   href="/articles/article-slug"
 * />
 * ```
 *
 * 紧凑模式：
 * ```astro
 * <Card
 *   title="紧凑卡片"
 *   subtitle="更小的内边距"
 *   compact
 * >
 *   适合在空间有限的情况下使用
 * </Card>
 * ```
 *
 * 自定义背景色：
 * ```astro
 * <Card
 *   title="特色卡片"
 *   subtitle="使用自定义背景色"
 *   background="primary/10"
 * >
 *   卡片内容
 * </Card>
 * ```
 *
 * 自定义阴影：
 * ```astro
 * <Card
 *   title="带阴影的卡片"
 *   subtitle="使用自定义阴影效果"
 *   shadow="2xl"
 * >
 *   卡片内容
 * </Card>
 * ```
 *
 * @props
 * @prop {BackgroundColor} [background] - 背景色类型，支持所有预设背景色和透明度变体
 * @prop {string} [class] - 自定义CSS类，可用于覆盖默认样式
 * @prop {boolean} [compact] - 是否使用紧凑模式
 * @prop {string} [href] - 如果提供，卡片将变成可点击的链接
 * @prop {ImageSource} [imageUrl] - 卡片顶部图片的URL或ImageMetadata
 * @prop {boolean} [muted] - 是否使用柔和色样式（未激活状态）
 * @prop {ShadowSize} [shadow=xl] - 阴影大小
 * @prop {string} [subtitle] - 卡片副标题或描述
 * @prop {string} title - 卡片标题
 *
 * @slots
 * @slot default - 卡片的主要内容区域
 */

import { cn } from '../../src/class';
import Container from '../container/Container.astro';
import Image from '../image/Image.astro';
import { getCardCombinedClasses, getCardPaddingClassVue } from './class';
import type { ICardProps } from './props';

// 从props中分离Container相关的属性和Card自身的属性
const {
    // Container属性
    aspectRatio,
    centered,
    contentCentered,
    flex,
    fit,
    gap,
    height,
    items,
    justify,
    margin,
    muted,
    padding,
    py,
    pt,
    pb,
    px,
    pl,
    pr,
    width,
    rounded,
    background,
    border,
    borderColor,
    shadow,
    // Card属性
    class: className,
    compact,
    href,
    imageUrl,
    subtitle,
    title,
    ...restProps
} = Astro.props as ICardProps;

// 使用共用的工具函数计算组合类名（不包括Container的类名）
const cardClass = getCardCombinedClasses({
    class: className,
    compact,
    href,
    imageUrl,
    subtitle,
    title,
});

// 内容区域的padding类
const contentPadding = getCardPaddingClassVue(compact);

// 使用 class builder 构建类名
const figureClass = cn()
    .add('not-prose') // 保留：Prose 相关类名
    .m(0)
    .p(0)
    .build();

const imageClass = cn()
    .w('full')
    .h(48)
    .objectCover()
    .roundedTop('lg')
    .build();

const cardBodyClass = cn()
    .add('cosy:card-body') // 保留：DaisyUI 组件类名
    .add(contentPadding) // 保留：动态类名
    .build();

const cardTitleClass = cn()
    .add('cosy:card-title') // 保留：DaisyUI 组件类名
    .text('xl')
    .bold()
    .build();

const subtitleClass = cn()
    .add('cosy:text-base-content/70') // 保留：复杂颜色类名，需要扩展 TextBuilder
    .text('sm')
    .add('cosy:leading-relaxed') // 保留：行高类名，需要扩展 TextBuilder
    .build();

const contentClass = cn().mt(4).build();

// 如果是链接卡片，使用a标签，否则使用article标签
const Tag = href ? 'a' : 'article';
---

<Container
    aspectRatio={aspectRatio}
    centered={centered}
    contentCentered={contentCentered}
    flex={flex}
    fit={fit}
    gap={gap}
    height={height}
    items={items}
    justify={justify}
    margin={margin}
    muted={muted}
    padding={padding}
    py={py}
    pt={pt}
    pb={pb}
    px={px}
    pl={pl}
    pr={pr}
    width={width}
    rounded={rounded}
    background={background}
    border={border}
    borderColor={borderColor}
    shadow={shadow}
    class={className}
    {...restProps}>
    <Tag
        ignore-heading
        class={cardClass}
        href={href}
        {...href && { target: '_self' }}>
        {
            imageUrl && (
                <figure class={figureClass}>
                    <Image src={imageUrl} alt={title || ''} class={imageClass} />
                </figure>
            )
        }

        <div class={cardBodyClass}>
            {title && (
                <h2 class={cardTitleClass}>
                    {title}
                </h2>
            )}

            {subtitle && <p class={subtitleClass}>{subtitle}</p>}

            {
                Astro.slots.has('default') && (
                    <div class={contentClass}>
                        <slot />
                    </div>
                )
            }
        </div>
    </Tag>
</Container>
