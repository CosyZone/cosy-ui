---
/**
 * @component Avatar
 *
 * @description
 * Avatar 组件用于显示用户头像，支持真实头像和默认头像生成。
 * 当没有提供头像URL或头像加载失败时，自动生成带用户首字母的彩色圆形头像。
 *
 * @design
 * 设计理念：
 * 1. 优雅降级 - 真实头像优先，失败时自动切换到默认头像
 * 2. 个性化 - 根据用户名生成不同的背景颜色
 * 3. 一致性 - 统一的圆形样式和尺寸
 * 4. 可定制性 - 支持不同尺寸和样式
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Avatar userName="张先生" />
 * ```
 *
 * 带真实头像：
 * ```astro
 * <Avatar userName="李女士" avatar="https://example.com/avatar.jpg" />
 * ```
 *
 * 不同尺寸：
 * ```astro
 * <Avatar userName="王先生" size="lg" />
 * ```
 *
 * 自定义样式：
 * ```astro
 * <Avatar userName="赵先生" class="cosy:border-2 cosy:border-primary" />
 * ```
 *
 * @props
 * @prop {string} userName - 用户名称
 * @prop {string} [avatar] - 用户头像URL
 * @prop {'sm'|'md'|'lg'|'xl'} [size='md'] - 头像尺寸
 * @prop {string} [class] - 自定义类名
 * @prop {any} [class:list] - 类名列表
 */

// 导入样式
import '../../style.ts';

import type { AvatarProps } from './types';

type Props = AvatarProps;

const {
  userName,
  avatar,
  size = 'md',
  class: className = '',
  'class:list': classList,
  ...rest
} = Astro.props;

// 尺寸映射
const sizeClasses = {
  sm: 'cosy:w-8 cosy:h-8 cosy:text-sm',
  md: 'cosy:w-12 cosy:h-12 cosy:text-lg',
  lg: 'cosy:w-16 cosy:h-16 cosy:text-xl',
  xl: 'cosy:w-20 cosy:h-20 cosy:text-2xl',
};

// 生成头像背景色
const getAvatarColor = (userName: string) => {
  const colors = [
    'cosy:bg-primary',
    'cosy:bg-secondary',
    'cosy:bg-accent',
    'cosy:bg-info',
    'cosy:bg-success',
    'cosy:bg-warning',
    'cosy:bg-error',
  ];
  const index = userName.charCodeAt(0) % colors.length;
  return colors[index];
};

const sizeClass = sizeClasses[size as keyof typeof sizeClasses];
---

<div
  class:list={[
    'cosy:avatar',
    'cosy:rounded-full',
    'cosy:overflow-hidden',
    'cosy:flex-shrink-0',
    'cosy:bg-base-200',
    'cosy:flex',
    'cosy:items-center',
    'cosy:justify-center',
    sizeClass,
    className,
    classList,
  ]}
  {...rest}>
  {
    avatar ? (
      <img
        src={avatar}
        alt={userName}
        class="cosy:w-full cosy:h-full cosy:object-cover"
        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
      />
    ) : null
  }
  <!-- 默认头像 -->
  <div
    class={`cosy:w-full cosy:h-full ${getAvatarColor(userName)} cosy:text-white cosy:flex cosy:items-center cosy:justify-center cosy:font-semibold`}
    style={avatar ? 'display: none;' : 'display: flex;'}>
    {userName ? userName.charAt(0).toUpperCase() : '?'}
  </div>
</div>
