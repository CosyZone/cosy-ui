---



/**
 * @component ApiTestScript
 *
 * @description
 * ApiTestScript 组件提供API测试的核心JavaScript逻辑，包括请求发送、响应处理和结果展示。
 * 支持多种HTTP方法、参数验证、请求头配置和详细的响应信息展示。
 *
 * @design
 * 设计理念：
 * 1. 健壮性 - 完善的错误处理和边界情况处理
 * 2. 可观测性 - 详细的日志记录和状态反馈
 * 3. 灵活性 - 支持多种请求配置和自定义选项
 * 4. 用户体验 - 清晰的加载状态和结果展示
 *
 * @usage
 * 基本用法：
 * ```astro
 * <ApiTestScript />
 * ```
 *
 * 带配置的用法：
 * ```astro
 * <ApiTestScript
 *   showResponseTime={true}
 *   showRequestDetails={true}
 *   defaultHeaders={{ 'Authorization': 'Bearer token' }}
 * />
 * ```
 *
 * @props
 * @prop {boolean} [showResponseTime=true] - 是否显示响应时间
 * @prop {boolean} [showRequestDetails=false] - 是否显示请求详情
 * @prop {Record<string, string>} [defaultHeaders] - 默认请求头
 */

import { cn } from '../../src/class';

interface Props {
    showResponseTime?: boolean;
    showRequestDetails?: boolean;
    defaultHeaders?: Record<string, string>;
}

const {
    showResponseTime = true,
    showRequestDetails = false,
    defaultHeaders = {},
} = Astro.props;

// 使用 class builder 构建类名
const resultContainerClass = cn().add('space-y-3').build();

const statusRowClass = cn().flex().items('center').gap(2).build();

const statusLabelClass = cn()
    .add('cosy:font-semibold', 'cosy:text-base-content')
    .build();

const statusSubtextClass = cn()
    .add('cosy:text-sm', 'cosy:text-base-content/70')
    .build();

const responseTimeLabelClass = cn()
    .add('cosy:font-semibold', 'cosy:text-base-content')
    .build();

const responseTimeValueClass = cn().add('cosy:text-success').build();

const urlLabelClass = cn()
    .add('cosy:font-semibold', 'cosy:text-base-content')
    .build();

const urlCodeClass = cn()
    .add(
        'cosy:text-primary',
        'cosy:font-mono',
        'cosy:text-sm',
        'cosy:break-all',
    )
    .build();

const contentLabelClass = cn()
    .add('cosy:font-semibold', 'cosy:text-base-content')
    .build();

const codeBlockClass = cn()
    .add('cosy:mt-2')
    .add('cosy:p-3')
    .add('cosy:bg-base-300', 'cosy:rounded-lg')
    .add('cosy:overflow-x-auto', 'cosy:text-sm')
    .build();

const errorContainerClass = cn().add('cosy:text-error').build();

const errorLabelClass = cn().add('cosy:font-semibold').build();

const errorListClass = cn()
    .add('cosy:mt-2', 'cosy:list-disc', 'cosy:list-inside')
    .build();

const loadingClass = cn()
    .add('loading', 'loading-spinner', 'loading-sm')
    .build();

const loadingTextClass = cn().add('cosy:text-primary', 'cosy:italic').build();
---

<script
    is:inline
    define:vars={{
        showResponseTime,
        showRequestDetails,
        defaultHeaders,
        resultContainerClass,
        statusRowClass,
        statusLabelClass,
        statusSubtextClass,
        responseTimeLabelClass,
        responseTimeValueClass,
        urlLabelClass,
        urlCodeClass,
        contentLabelClass,
        codeBlockClass,
        errorContainerClass,
        errorLabelClass,
        errorListClass,
        loadingClass,
        loadingTextClass,
    }}
>
    // @ts-nocheck - 变量通过 Astro 的 define:vars 在运行时注入
    // 格式化响应显示
    function formatResponse(response, data, responseTime) {
        const statusColor = response.ok ? 'success' : 'error';
        const statusText = response.ok ? '成功' : '失败';
        const badgeClass = `badge badge-${statusColor}`;

        let result = `
      <div class="${resultContainerClass}">
        <div class="${statusRowClass}">
          <span class="${statusLabelClass}">HTTP状态:</span> 
          <span class="${badgeClass}">${response.status} ${response.statusText}</span>
          <span class="${statusSubtextClass}">(${statusText})</span>
        </div>
    `;

        if (showResponseTime && responseTime) {
            result += `
        <div>
          <span class="${responseTimeLabelClass}">响应时间:</span> 
          <span class="${responseTimeValueClass}">${responseTime}ms</span>
        </div>
      `;
        }

        if (showRequestDetails) {
            result += `
        <div>
          <span class="${urlLabelClass}">请求URL:</span> 
          <code class="${urlCodeClass}">${response.url}</code>
        </div>
      `;
        }

        result += `
        <div>
          <span class="${contentLabelClass}">响应内容:</span>
          <pre class="${codeBlockClass}">${JSON.stringify(data, null, 2)}</pre>
        </div>
      </div>
    `;

        return result;
    }

    // 收集请求头
    function collectHeaders() {
        const headers = { ...defaultHeaders };

        // 收集自定义请求头
        document
            .querySelectorAll('[data-header-key][data-header-value]')
            .forEach((input) => {
                const key = input.dataset.headerKey;
                const value = input.dataset.headerValue;
                if (key && value) {
                    headers[key] = value;
                }
            });

        // 设置默认Content-Type
        if (!headers['Content-Type']) {
            headers['Content-Type'] = 'application/json';
        }

        return headers;
    }

    // 验证参数
    function validateParams(params) {
        const errors = [];

        Object.entries(params).forEach(([key, value]) => {
            const input = document.querySelector(
                `[data-param="${key}"][data-endpoint]`,
            );
            if (input) {
                const validation = JSON.parse(input.dataset.validation || '{}');
                const required = input.dataset.required === 'true';

                if (required && (!value || value.toString().trim() === '')) {
                    errors.push(`${key} 是必填参数`);
                }

                if (validation.min && Number(value) < validation.min) {
                    errors.push(`${key} 不能小于 ${validation.min}`);
                }

                if (validation.max && Number(value) > validation.max) {
                    errors.push(`${key} 不能大于 ${validation.max}`);
                }

                if (
                    validation.pattern &&
                    !new RegExp(validation.pattern).test(value)
                ) {
                    errors.push(`${key} 格式不正确`);
                }
            }
        });

        return { isValid: errors.length === 0, errors };
    }

    // 测试API端点
    async function testEndpoint(endpoint, method) {
        console.log('🚀 开始测试端点:', endpoint, method);

        // 找到所有匹配的结果区域和按钮
        const resultDivs = document.querySelectorAll(
            `[data-result="${endpoint}"]`,
        );
        const testBtns = document.querySelectorAll(
            `[data-endpoint="${endpoint}"][data-method="${method}"]`,
        );

        console.log('找到结果区域数量:', resultDivs.length);
        console.log('找到按钮数量:', testBtns.length);

        // 使用第一个匹配的元素
        const resultDiv = resultDivs[0];
        const testBtn = testBtns[0];

        if (!resultDiv || !testBtn) {
            console.error('❌ 找不到结果区域或按钮:', { endpoint, method });
            return;
        }

        // 显示结果区域
        resultDiv.classList.remove('hidden');
        resultDiv.innerHTML = `<span class="${loadingTextClass}">正在测试接口...</span>`;

        // 禁用按钮并显示加载状态
        testBtn.disabled = true;
        testBtn.innerHTML = `<span class="${loadingClass}"></span> 测试中...`;

        const startTime = Date.now();

        try {
            // 构建URL和参数
            let url = endpoint;
            const params = {};

            // 收集参数值
            document
                .querySelectorAll(`[data-endpoint="${endpoint}"][data-param]`)
                .forEach((input) => {
                    const paramName = input.dataset.param;
                    if (paramName) {
                        if (input.type === 'checkbox') {
                            params[paramName] = input.checked;
                        } else if (input.type === 'radio') {
                            if (input.checked) {
                                params[paramName] = input.value;
                            }
                        } else if (input.value.trim()) {
                            params[paramName] = input.value.trim();
                        }
                    }
                });

            // 验证参数
            const validation = validateParams(params);
            if (!validation.isValid) {
                resultDiv.innerHTML = `
          <div class="${errorContainerClass}">
            <span class="${errorLabelClass}">参数验证失败:</span>
            <ul class="${errorListClass}">
              ${validation.errors.map((error) => `<li>${error}</li>`).join('')}
            </ul>
          </div>
        `;
                return;
            }

            // 为GET请求添加查询参数
            if (method === 'GET' && Object.keys(params).length > 0) {
                const searchParams = new URLSearchParams();
                Object.entries(params).forEach(([key, value]) => {
                    if (value !== undefined && value !== null && value !== '') {
                        searchParams.append(key, value.toString());
                    }
                });
                url += `?${searchParams.toString()}`;
            }

            // 收集请求头
            const headers = collectHeaders();

            console.log('📤 发送请求:', { url, method, params, headers });

            // 发送请求
            const response = await fetch(url, {
                method: method,
                headers,
                body: method !== 'GET' ? JSON.stringify(params) : undefined,
            });

            const responseTime = Date.now() - startTime;

            // 处理响应
            let responseText = '';
            try {
                responseText = await response.text();
                let data;
                try {
                    data = JSON.parse(responseText);
                } catch {
                    data = responseText;
                }

                resultDiv.innerHTML = formatResponse(
                    response,
                    data,
                    responseTime,
                );
                console.log('✅ 请求成功:', { response, data, responseTime });
            } catch (error) {
                resultDiv.innerHTML = formatResponse(
                    response,
                    '[无法读取响应内容]',
                    responseTime,
                );
                console.error('❌ 响应解析失败:', error);
            }
        } catch (error) {
            const errorMessage =
                error instanceof Error ? error.message : 'Unknown error';
            resultDiv.innerHTML = `
        <div class="${errorContainerClass}">
          <span class="${errorLabelClass}">请求失败:</span> ${errorMessage}
        </div>
      `;
            console.error('❌ 请求失败:', error);
        } finally {
            // 恢复按钮状态
            testBtn.disabled = false;
            testBtn.innerHTML = '测试接口';
        }
    }

    // 快速填充参数
    function quickFill(endpoint, values) {
        console.log('⚡ 快速填充参数:', { endpoint, values });

        Object.entries(values).forEach(([key, value]) => {
            const inputs = document.querySelectorAll(
                `[data-endpoint="${endpoint}"][data-param="${key}"]`,
            );
            console.log(`找到参数 ${key} 的输入框数量:`, inputs.length);

            // 使用第一个匹配的输入框
            const input = inputs[0];
            if (input) {
                if (input.type === 'checkbox') {
                    input.checked = Boolean(value);
                } else if (input.type === 'radio') {
                    const radioInput = document.querySelector(
                        `[data-endpoint="${endpoint}"][data-param="${key}"][value="${value}"]`,
                    );
                    if (radioInput) {
                        radioInput.checked = true;
                    }
                } else {
                    input.value = value.toString();
                }
                console.log(`✅ 已填充参数 ${key}:`, value);
            } else {
                console.warn(`⚠️ 未找到参数 ${key} 的输入框`);
            }
        });
    }

    // 页面加载完成后绑定事件
    document.addEventListener('DOMContentLoaded', () => {
        console.log('🚀 API测试组件已加载，可以开始测试了！');

        // 绑定测试按钮事件
        document
            .querySelectorAll('[data-endpoint][data-method]')
            .forEach((btn) => {
                btn.addEventListener('click', (event) => {
                    const clickedBtn = event.currentTarget;
                    const endpoint = clickedBtn.dataset.endpoint;
                    const method = clickedBtn.dataset.method;
                    console.log('🖱️ 点击了按钮:', { endpoint, method });
                    if (endpoint && method) {
                        testEndpoint(endpoint, method);
                    }
                });
            });

        // 绑定快速测试按钮事件
        document.querySelectorAll('[data-quick-test]').forEach((btn) => {
            btn.addEventListener('click', (event) => {
                const clickedBtn = event.currentTarget;
                const endpoint = clickedBtn.dataset.endpoint;
                const values = JSON.parse(clickedBtn.dataset.quickTest || '{}');
                console.log('⚡ 快速填充:', { endpoint, values });
                if (endpoint && values) {
                    quickFill(endpoint, values);
                }
            });
        });

        // 绑定请求头输入框事件
        document.querySelectorAll('[data-header-key]').forEach((input) => {
            input.addEventListener('input', (event) => {
                const target = event.target;
                const key = target.dataset.headerKey;
                const value = target.value;
                if (key) {
                    target.dataset.headerValue = value;
                }
            });
        });
    });
</script>
