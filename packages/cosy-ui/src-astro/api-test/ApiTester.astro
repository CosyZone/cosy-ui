---



/**
 * @component ApiTester
 *
 * @description
 * ApiTester 组件是一个完整的API测试工具，提供多个API端点的测试界面。
 * 支持参数配置、快速测试、请求发送和结果展示等功能。
 *
 * @design
 * 设计理念：
 * 1. 统一管理 - 在一个界面中管理多个API端点的测试
 * 2. 灵活配置 - 支持多种参数类型和验证规则
 * 3. 快速测试 - 提供预设参数组合，提高测试效率
 * 4. 清晰展示 - 直观展示测试结果和请求详情
 *
 * @usage
 * 基本用法：
 * ```astro
 * <ApiTester endpoints={endpoints} title="用户API测试" />
 * ```
 *
 * 带描述的用法：
 * ```astro
 * <ApiTester
 *   endpoints={endpoints}
 *   title="用户API测试"
 *   description="测试用户相关的所有API接口"
 * />
 * ```
 *
 * @props
 * @prop {IApiEndpoint[]} endpoints - API端点配置列表
 * @prop {string} [title="API 测试"] - 组件标题
 * @prop {string} [description] - 组件描述
 * @prop {boolean} [showHeaders=false] - 是否显示请求头配置
 * @prop {Record<string, string>} [defaultHeaders] - 默认请求头
 * @prop {boolean} [showResponseTime=true] - 是否显示响应时间
 * @prop {boolean} [showRequestDetails=false] - 是否显示请求详情
 * @prop {string} [class] - 自定义CSS类名
 */

import { cn } from '../../src/class';
import Grid from '../grid/Grid.astro';
import Heading from '../heading/Heading.astro';
import type { IApiEndpoint } from '../types/api-test';
import ApiEndpointCard from './ApiEndpointCard.astro';
import ApiTestScript from './ApiTestScript.astro';

const {
    endpoints,
    title = 'API 测试',
    description,
    showHeaders = false,
    defaultHeaders,
    showResponseTime = true,
    showRequestDetails = false,
    class: className,
} = Astro.props;

// 使用 class builder 构建类名
const containerClass = cn()
    .add('space-y-8')
    .add(className || '')
    .build();

const headerSectionClass = cn().add('text-center').build();

const descriptionClass = cn()
    .add(
        'cosy:mt-2',
        'cosy:text-base-content/70',
        'cosy:max-w-2xl',
        'cosy:mx-auto',
    )
    .build();

const headersContainerClass = cn()
    .add('cosy:bg-base-200')
    .add('cosy:p-4')
    .add('cosy:rounded-lg')
    .build();

const headersTitleClass = cn()
    .add('cosy:text-lg', 'cosy:font-medium', 'cosy:mb-3')
    .build();

const headersGridClass = cn()
    .add('cosy:grid', 'cosy:grid-cols-1', 'cosy:md:grid-cols-2', 'cosy:gap-3')
    .build();

const formControlClass = cn().add('form-control').build();

const labelClass = cn().add('label').build();

const labelTextClass = cn().add('label-text').build();

const inputClass = cn().add('input', 'input-bordered', 'cosy:w-full').build();
---

<div class={containerClass}>
    <div class={headerSectionClass}>
        <Heading level={1}>
            {title}
        </Heading>
        {description && <p class={descriptionClass}>{description}</p>}
    </div>

    {/* 请求头配置 */}
    {
        showHeaders && (
            <div class={headersContainerClass}>
                <h3 class={headersTitleClass}>请求头配置</h3>
                <div class={headersGridClass}>
                    {defaultHeaders &&
                        Object.entries(defaultHeaders).map(([key, value]) => (
                            <div class={formControlClass}>
                                <label class={labelClass}>
                                    <span class={labelTextClass}>{key}</span>
                                </label>
                                <input
                                    type="text"
                                    class={inputClass}
                                    value={value as string}
                                    data-header-key={key}
                                    data-header-value={value as string}
                                />
                            </div>
                        ))}
                </div>
            </div>
        )
    }

    <Grid cols={{ base: 1, lg: Math.min(endpoints.length, 2) }}>
        {
            endpoints.map((endpoint: IApiEndpoint) => (
                <ApiEndpointCard endpoint={endpoint} />
            ))
        }
    </Grid>
</div>

<ApiTestScript
    showResponseTime={showResponseTime}
    showRequestDetails={showRequestDetails}
    defaultHeaders={defaultHeaders}
/>
