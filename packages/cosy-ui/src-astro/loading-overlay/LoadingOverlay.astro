---
/**
 * @component LoadingOverlay
 *
 * @description
 * LoadingOverlay 组件是一个全屏加载遮罩层，用于在页面加载或路由切换时显示加载状态。
 * 它提供了多种加载动画类型，支持延迟显示和背景模糊效果，确保良好的用户体验。
 *
 * @usage
 * 基本用法：
 * ```astro
 * ---
 * import { LoadingOverlay } from '@coffic/cosy-ui';
 * ---
 *
 * <LoadingOverlay text="正在加载..." />
 * ```
 *
 * 自定义动画类型：
 * ```astro
 * <LoadingOverlay
 *   text="处理中..."
 *   spinnerType="spinner"
 *   loadingDelay={500}
 * />
 * ```
 *
 * 无背景遮罩：
 * ```astro
 * <LoadingOverlay
 *   text="加载中..."
 *   showBackdrop={false}
 *   class="cosy:bg-transparent"
 * />
 * ```
 *
 * 自定义样式：
 * ```astro
 * <LoadingOverlay
 *   text="请稍候..."
 *   spinnerType="pulse"
 *   class="cosy:bg-blue-500/20"
 * />
 * ```
 *
 * @props
 * - text?: string - 加载文本，默认为 "Loading..."
 * - class?: string - 自定义 CSS 类名
 * - showSpinner?: boolean - 是否显示加载动画，默认为 true
 * - spinnerType?: 'dots' | 'spinner' | 'pulse' - 加载动画类型，默认为 'dots'
 * - loadingDelay?: number - 延迟显示时间（毫秒），默认为 1000ms
 * - showBackdrop?: boolean - 是否显示背景模糊遮罩，默认为 true
 *
 * @slots
 * 此组件没有插槽，所有内容通过 props 配置
 *
 * @events
 * 组件会自动监听以下 Astro 事件：
 * - astro:page-load - 页面加载完成时隐藏
 * - astro:before-preparation - 页面准备前显示
 * - astro:before-swap - 路由切换前显示
 * - astro:after-swap - 路由切换后隐藏
 */

import { cn } from '../../src/class';

export interface Props {
    /** 加载文本 */
    text?: string;
    /** 自定义 CSS 类名 */
    class?: string;
    /** 是否显示加载动画 */
    showSpinner?: boolean;
    /** 加载动画类型 */
    spinnerType?: 'dots' | 'spinner' | 'pulse';
    /** 延迟显示时间（毫秒），默认1000ms */
    loadingDelay?: number;
    /** 是否显示背景模糊遮罩，默认true */
    showBackdrop?: boolean;
}

const {
    text = 'Loading...',
    class: className,
    showSpinner = true,
    spinnerType = 'dots',
    loadingDelay = 1000,
    showBackdrop = true,
} = Astro.props;

// 生成唯一的 ID
const overlayId = `loading-overlay`;

// 使用 classBuilder 构建 overlay 类名
const overlayClass = cn()
    .fixed()
    .inset(0)
    .z(50)
    .add(showBackdrop ? 'cosy:bg-black/50 cosy:backdrop-blur-sm' : '')
    .flex()
    .items('center')
    .justify('center')
    .add(
        'cosy:opacity-0',
        'cosy:pointer-events-none',
        'cosy:transition-opacity',
        'cosy:duration-300'
    )
    .add(className || '')
    .build();
---

<div
    id={overlayId}
    transition:persist
    class={overlayClass}
    data-loading-overlay>
    <div
        class="cosy:bg-accent cosy:rounded-lg cosy:shadow-xl cosy:p-6 cosy:max-w-sm cosy:w-full cosy:mx-4">
        <div class="cosy:flex cosy:flex-col cosy:items-center cosy:space-y-4">
            {
                showSpinner && (
                    <div class="cosy:flex cosy:justify-center">
                        {spinnerType === 'dots' && (
                            <div class="cosy:flex cosy:space-x-1">
                                <div class="cosy:w-2 cosy:h-2 cosy:bg-blue-500 cosy:rounded-full cosy:animate-bounce" />
                                <div
                                    class="cosy:w-2 cosy:h-2 cosy:bg-blue-500 cosy:rounded-full cosy:animate-bounce"
                                    style="animation-delay: 0.1s;"
                                />
                                <div
                                    class="cosy:w-2 cosy:h-2 cosy:bg-blue-500 cosy:rounded-full cosy:animate-bounce"
                                    style="animation-delay: 0.2s;"
                                />
                            </div>
                        )}
                        {spinnerType === 'spinner' && (
                            <div class="cosy:w-8 cosy:h-8 cosy:border-4 cosy:border-blue-200 cosy:border-t-blue-500 cosy:rounded-full cosy:animate-spin" />
                        )}
                        {spinnerType === 'pulse' && (
                            <div class="cosy:w-8 cosy:h-8 cosy:bg-blue-500 cosy:rounded-full cosy:animate-pulse" />
                        )}
                    </div>
                )
            }
            <p
                class="cosy:text-gray-700 cosy:dark:text-gray-300 cosy:text-center cosy:font-medium">
                {text}
            </p>
        </div>
    </div>
</div>

<script is:inline define:vars={{ overlayId, loadingDelay }}>
    let showTimeout = null;
    let hideTimeout = null;
    let displayStartTime = null;
    let loaded = false;
    const minDisplayTime = 1000;

    const reset = () => {
        displayStartTime = null;
    };

    const isDomDisplayed = () => {
        const overlay = document.getElementById(overlayId);
        if (!overlay) {
            return false;
        }
        return (
            overlay.style.opacity === '1' &&
            overlay.style.pointerEvents === 'auto'
        );
    };

    // 显示加载弹出层的函数
    const showOverlay = () => {
        if (isDomDisplayed() || loaded) return;

        // 设置延迟显示
        showTimeout = setTimeout(() => {
            const overlay = document.getElementById(overlayId);
            if (!overlay) {
                return;
            }

            if (loaded) {
                return;
            }

            overlay.style.opacity = '1';
            overlay.style.pointerEvents = 'auto';
            displayStartTime = Date.now();
        }, loadingDelay);
    };

    // 隐藏加载弹出层的函数
    const hideOverlay = (reason) => {
        console.log('LoadingOverlay: hideOverlay', reason);

        // 清除显示延迟
        if (showTimeout) {
            clearTimeout(showTimeout);
            showTimeout = null;
        }

        // 如果没有显示
        if (!isDomDisplayed()) {
            reset();
            return;
        }

        hideTimeout = setTimeout(() => {
            const overlay = document.getElementById(overlayId);
            if (!overlay) {
                return;
            }

            overlay.style.opacity = '0';
            overlay.style.pointerEvents = 'none';
            reset();
        }, minDisplayTime);
    };

    // 监听 Astro 页面过渡事件
    document.addEventListener('astro:page-load', () => {
        loaded = true;
        hideOverlay('astro:page-load');
    });

    document.addEventListener('astro:before-preparation', () => {
        loaded = false;
        showOverlay('astro:before-preparation');
    });

    // 监听路由变化
    document.addEventListener('astro:before-swap', () => {
        loaded = false;
        showOverlay('astro:before-swap');
    });

    document.addEventListener('astro:after-swap', () => {
        loaded = true;
        hideOverlay('astro:after-swap');
    });

    // 页面卸载时清理定时器
    window.addEventListener('beforeunload', () => {
        if (showTimeout) {
            clearTimeout(showTimeout);
        }
        if (hideTimeout) {
            clearTimeout(hideTimeout);
        }
    });
</script>
