---



/**
 * @component Grid
 *
 * @description
 * Grid 组件是一个灵活的网格布局组件，用于创建响应式的多列布局。
 * 它封装了 CSS Grid 的常用功能，提供简单易用的接口来控制网格的列数和间距。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Grid cols={3} gap="md">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * 响应式网格：
 * ```astro
 * <Grid cols={{base: 1, md: 2, lg: 3}} gap="lg">
 *   <div>响应式网格</div>
 *   <div>在不同屏幕尺寸下</div>
 *   <div>显示不同的列数</div>
 * </Grid>
 * ```
 *
 * 自定义行列间距：
 * ```astro
 * <Grid cols={2} rowGap="lg" colGap="sm">
 *   <div>行间距大</div>
 *   <div>列间距小</div>
 *   <div>第三项</div>
 *   <div>第四项</div>
 * </Grid>
 * ```
 *
 * 设置垂直外边距：
 * ```astro
 * <Grid cols={3} gap="md" marginY="lg">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * 显示边框：
 * ```astro
 * <Grid cols={2} gap="md" border>
 *   <div>第一列</div>
 *   <div>第二列</div>
 * </Grid>
 * ```
 *
 * 自定义背景色：
 * ```astro
 * <Grid cols={3} gap="md" background="primary/10">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * @props
 * @prop {BackgroundColor} [background] - 背景色类型，支持所有预设背景色和透明度变体
 * @prop {number | Object} [cols=1] - 网格列数，可以是固定值或响应式对象
 * @prop {string} [gap="md"] - 网格间距，可选值：none, xs, sm, md, lg, xl
 * @prop {string} [rowGap] - 行间距，默认与 gap 相同
 * @prop {string} [colGap] - 列间距，默认与 gap 相同
 * @prop {string} [marginY] - 垂直外边距，可选值：none, xs, sm, md, lg, xl
 * @prop {boolean} [border] - 是否显示边框
 * @prop {string} [class] - 自定义类名
 * @prop {any} [class:list] - 类名列表
 */

import { cn } from '../../src/class';
import {
    type BackgroundColor,
    getBackgroundClass,
} from '../../src/common/backgrounds';

import type { GridProps } from './types';

type GapSize = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
type ResponsiveValue<T> =
    | T
    | {
          base?: T;
          sm?: T;
          md?: T;
          lg?: T;
          xl?: T;
          '2xl'?: T;
      };

type Props = GridProps;

const {
    background,
    cols = 1,
    gap = 'md',
    rowGap,
    colGap,
    marginY,
    border = false,
    class: className = '',
    'class:list': classList,
    ...rest
} = Astro.props;

// 处理响应式列数（所有 class 必须静态字符串，不能拼接）
const getColsClasses = (cols: ResponsiveValue<number>) => {
    // 单一数字
    if (typeof cols === 'number') {
        switch (cols) {
            case 1:
                return 'cosy:grid-cols-1';
            case 2:
                return 'cosy:grid-cols-2';
            case 3:
                return 'cosy:grid-cols-3';
            case 4:
                return 'cosy:grid-cols-4';
            case 5:
                return 'cosy:grid-cols-5';
            case 6:
                return 'cosy:grid-cols-6';
            case 7:
                return 'cosy:grid-cols-7';
            case 8:
                return 'cosy:grid-cols-8';
            case 9:
                return 'cosy:grid-cols-9';
            case 10:
                return 'cosy:grid-cols-10';
            case 11:
                return 'cosy:grid-cols-11';
            case 12:
                return 'cosy:grid-cols-12';
            default:
                return '';
        }
    }
    // 响应式对象
    const result: string[] = [];
    const responsive = cols as any;
    if (responsive.base) {
        switch (responsive.base) {
            case 1:
                result.push('cosy:grid-cols-1');
                break;
            case 2:
                result.push('cosy:grid-cols-2');
                break;
            case 3:
                result.push('cosy:grid-cols-3');
                break;
            case 4:
                result.push('cosy:grid-cols-4');
                break;
            case 5:
                result.push('cosy:grid-cols-5');
                break;
            case 6:
                result.push('cosy:grid-cols-6');
                break;
            case 7:
                result.push('cosy:grid-cols-7');
                break;
            case 8:
                result.push('cosy:grid-cols-8');
                break;
            case 9:
                result.push('cosy:grid-cols-9');
                break;
            case 10:
                result.push('cosy:grid-cols-10');
                break;
            case 11:
                result.push('cosy:grid-cols-11');
                break;
            case 12:
                result.push('cosy:grid-cols-12');
                break;
        }
    }
    if (responsive.sm) {
        switch (responsive.sm) {
            case 1:
                result.push('cosy:sm:grid-cols-1');
                break;
            case 2:
                result.push('cosy:sm:grid-cols-2');
                break;
            case 3:
                result.push('cosy:sm:grid-cols-3');
                break;
            case 4:
                result.push('cosy:sm:grid-cols-4');
                break;
            case 5:
                result.push('cosy:sm:grid-cols-5');
                break;
            case 6:
                result.push('cosy:sm:grid-cols-6');
                break;
            case 7:
                result.push('cosy:sm:grid-cols-7');
                break;
            case 8:
                result.push('cosy:sm:grid-cols-8');
                break;
            case 9:
                result.push('cosy:sm:grid-cols-9');
                break;
            case 10:
                result.push('cosy:sm:grid-cols-10');
                break;
            case 11:
                result.push('cosy:sm:grid-cols-11');
                break;
            case 12:
                result.push('cosy:sm:grid-cols-12');
                break;
        }
    }
    if (responsive.md) {
        switch (responsive.md) {
            case 1:
                result.push('cosy:md:grid-cols-1');
                break;
            case 2:
                result.push('cosy:md:grid-cols-2');
                break;
            case 3:
                result.push('cosy:md:grid-cols-3');
                break;
            case 4:
                result.push('cosy:md:grid-cols-4');
                break;
            case 5:
                result.push('cosy:md:grid-cols-5');
                break;
            case 6:
                result.push('cosy:md:grid-cols-6');
                break;
            case 7:
                result.push('cosy:md:grid-cols-7');
                break;
            case 8:
                result.push('cosy:md:grid-cols-8');
                break;
            case 9:
                result.push('cosy:md:grid-cols-9');
                break;
            case 10:
                result.push('cosy:md:grid-cols-10');
                break;
            case 11:
                result.push('cosy:md:grid-cols-11');
                break;
            case 12:
                result.push('cosy:md:grid-cols-12');
                break;
        }
    }
    if (responsive.lg) {
        switch (responsive.lg) {
            case 1:
                result.push('cosy:lg:grid-cols-1');
                break;
            case 2:
                result.push('cosy:lg:grid-cols-2');
                break;
            case 3:
                result.push('cosy:lg:grid-cols-3');
                break;
            case 4:
                result.push('cosy:lg:grid-cols-4');
                break;
            case 5:
                result.push('cosy:lg:grid-cols-5');
                break;
            case 6:
                result.push('cosy:lg:grid-cols-6');
                break;
            case 7:
                result.push('cosy:lg:grid-cols-7');
                break;
            case 8:
                result.push('cosy:lg:grid-cols-8');
                break;
            case 9:
                result.push('cosy:lg:grid-cols-9');
                break;
            case 10:
                result.push('cosy:lg:grid-cols-10');
                break;
            case 11:
                result.push('cosy:lg:grid-cols-11');
                break;
            case 12:
                result.push('cosy:lg:grid-cols-12');
                break;
        }
    }
    if (responsive.xl) {
        switch (responsive.xl) {
            case 1:
                result.push('cosy:xl:grid-cols-1');
                break;
            case 2:
                result.push('cosy:xl:grid-cols-2');
                break;
            case 3:
                result.push('cosy:xl:grid-cols-3');
                break;
            case 4:
                result.push('cosy:xl:grid-cols-4');
                break;
            case 5:
                result.push('cosy:xl:grid-cols-5');
                break;
            case 6:
                result.push('cosy:xl:grid-cols-6');
                break;
            case 7:
                result.push('cosy:xl:grid-cols-7');
                break;
            case 8:
                result.push('cosy:xl:grid-cols-8');
                break;
            case 9:
                result.push('cosy:xl:grid-cols-9');
                break;
            case 10:
                result.push('cosy:xl:grid-cols-10');
                break;
            case 11:
                result.push('cosy:xl:grid-cols-11');
                break;
            case 12:
                result.push('cosy:xl:grid-cols-12');
                break;
        }
    }
    if (responsive['2xl']) {
        switch (responsive['2xl']) {
            case 1:
                result.push('cosy:2xl:grid-cols-1');
                break;
            case 2:
                result.push('cosy:2xl:grid-cols-2');
                break;
            case 3:
                result.push('cosy:2xl:grid-cols-3');
                break;
            case 4:
                result.push('cosy:2xl:grid-cols-4');
                break;
            case 5:
                result.push('cosy:2xl:grid-cols-5');
                break;
            case 6:
                result.push('cosy:2xl:grid-cols-6');
                break;
            case 7:
                result.push('cosy:2xl:grid-cols-7');
                break;
            case 8:
                result.push('cosy:2xl:grid-cols-8');
                break;
            case 9:
                result.push('cosy:2xl:grid-cols-9');
                break;
            case 10:
                result.push('cosy:2xl:grid-cols-10');
                break;
            case 11:
                result.push('cosy:2xl:grid-cols-11');
                break;
            case 12:
                result.push('cosy:2xl:grid-cols-12');
                break;
        }
    }
    return result.join(' ');
};

// 间距映射 - 使用 class builder
const getGapClass = (gap: GapSize) => {
    const gapMap = {
        none: cn().add('cosy:gap-0').build(),
        xs: cn().add('cosy:gap-2').build(),
        sm: cn().add('cosy:gap-4').build(),
        md: cn().add('cosy:gap-6').build(),
        lg: cn().add('cosy:gap-8').build(),
        xl: cn().add('cosy:gap-12').build(),
    };
    return gapMap[gap];
};

// 行间距映射 - 使用 class builder
const getRowGapClass = (gap: GapSize) => {
    const rowGapMap = {
        none: cn().add('cosy:row-gap-0').build(),
        xs: cn().add('cosy:row-gap-2').build(),
        sm: cn().add('cosy:row-gap-4').build(),
        md: cn().add('cosy:row-gap-6').build(),
        lg: cn().add('cosy:row-gap-8').build(),
        xl: cn().add('cosy:row-gap-12').build(),
    };
    return rowGapMap[gap];
};

// 列间距映射 - 使用 class builder
const getColGapClass = (gap: GapSize) => {
    const colGapMap = {
        none: cn().add('cosy:col-gap-0').build(),
        xs: cn().add('cosy:col-gap-2').build(),
        sm: cn().add('cosy:col-gap-4').build(),
        md: cn().add('cosy:col-gap-6').build(),
        lg: cn().add('cosy:col-gap-8').build(),
        xl: cn().add('cosy:col-gap-12').build(),
    };
    return colGapMap[gap];
};

// 垂直外边距映射 - 使用 class builder
const getMarginYClass = (gap: GapSize) => {
    const marginYMap = {
        none: cn().add('cosy:my-0').build(),
        xs: cn().add('cosy:my-2').build(),
        sm: cn().add('cosy:my-4').build(),
        md: cn().add('cosy:my-6').build(),
        lg: cn().add('cosy:my-8').build(),
        xl: cn().add('cosy:my-12').build(),
    };
    return marginYMap[gap];
};

// 获取背景色类名
const backgroundClass = getBackgroundClass(background as BackgroundColor);

// 使用 classBuilder 构建最终类名
const gridClass = cn()
    .add('cosy:grid')
    .add(getColsClasses(cols))
    .add(
        rowGap
            ? getRowGapClass(rowGap as GapSize)
            : colGap
              ? getGapClass(gap as GapSize)
              : getGapClass(gap as GapSize),
    )
    .add(colGap ? getColGapClass(colGap as GapSize) : '')
    .add(marginY ? getMarginYClass(marginY as GapSize) : '')
    .add(border ? 'cosy:border cosy:rounded-lg' : '')
    .add(backgroundClass)
    .add(className)
    .build();
---

<div class={gridClass} {...rest}>
    <slot />
</div>
