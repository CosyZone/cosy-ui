---
/**
 * @component Grid
 *
 * @description
 * Grid 组件是一个灵活的网格布局组件，用于创建响应式的多列布局。
 * 它封装了 CSS Grid 的常用功能，提供简单易用的接口来控制网格的列数和间距。
 *
 * @design
 * 设计理念：
 * 1. 简单易用 - 通过简洁的 API 控制复杂的 Grid 布局
 * 2. 响应式优先 - 内置响应式断点，轻松创建适应不同屏幕尺寸的布局
 * 3. 灵活可配置 - 支持自定义列数和间距
 * 4. 语义化属性 - 使用直观的属性名称，降低学习成本
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Grid cols={3} gap="md">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * 响应式网格：
 * ```astro
 * <Grid cols={{base: 1, md: 2, lg: 3}} gap="lg">
 *   <div>响应式网格</div>
 *   <div>在不同屏幕尺寸下</div>
 *   <div>显示不同的列数</div>
 * </Grid>
 * ```
 *
 * 自定义行列间距：
 * ```astro
 * <Grid cols={2} rowGap="lg" colGap="sm">
 *   <div>行间距大</div>
 *   <div>列间距小</div>
 *   <div>第三项</div>
 *   <div>第四项</div>
 * </Grid>
 * ```
 *
 * 设置垂直外边距：
 * ```astro
 * <Grid cols={3} gap="md" marginY="lg">
 *   <div>第一列</div>
 *   <div>第二列</div>
 *   <div>第三列</div>
 * </Grid>
 * ```
 *
 * 显示边框：
 * ```astro
 * <Grid cols={2} gap="md" border>
 *   <div>第一列</div>
 *   <div>第二列</div>
 * </Grid>
 * ```
 *
 * @props
 * @prop {number | Object} [cols=1] - 网格列数，可以是固定值或响应式对象
 * @prop {string} [gap="md"] - 网格间距，可选值：none, xs, sm, md, lg, xl
 * @prop {string} [rowGap] - 行间距，默认与 gap 相同
 * @prop {string} [colGap] - 列间距，默认与 gap 相同
 * @prop {string} [marginY] - 垂直外边距，可选值：none, xs, sm, md, lg, xl
 * @prop {boolean} [border] - 是否显示边框
 * @prop {string} [class] - 自定义类名
 * @prop {any} [class:list] - 类名列表
 */

// 导入样式
import '../../style.ts';

import type { GridProps } from './types';

type GapSize = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
type ResponsiveValue<T> =
  | T
  | {
      base?: T;
      sm?: T;
      md?: T;
      lg?: T;
      xl?: T;
      '2xl'?: T;
    };

type Props = GridProps;

const {
  cols = 1,
  gap = 'md',
  rowGap,
  colGap,
  marginY,
  border = false,
  class: className = '',
  'class:list': classList,
  ...rest
} = Astro.props;

// 处理响应式列数（所有 class 必须静态字符串，不能拼接）
const getColsClasses = (cols: ResponsiveValue<number>) => {
  // 单一数字
  if (typeof cols === 'number') {
    switch (cols) {
      case 1:
        return 'cosy:grid-cols-1';
      case 2:
        return 'cosy:grid-cols-2';
      case 3:
        return 'cosy:grid-cols-3';
      case 4:
        return 'cosy:grid-cols-4';
      case 5:
        return 'cosy:grid-cols-5';
      case 6:
        return 'cosy:grid-cols-6';
      case 7:
        return 'cosy:grid-cols-7';
      case 8:
        return 'cosy:grid-cols-8';
      case 9:
        return 'cosy:grid-cols-9';
      case 10:
        return 'cosy:grid-cols-10';
      case 11:
        return 'cosy:grid-cols-11';
      case 12:
        return 'cosy:grid-cols-12';
      default:
        return '';
    }
  }
  // 响应式对象
  let result: string[] = [];
  const responsive = cols as any;
  if (responsive.base) {
    switch (responsive.base) {
      case 1:
        result.push('cosy:grid-cols-1');
        break;
      case 2:
        result.push('cosy:grid-cols-2');
        break;
      case 3:
        result.push('cosy:grid-cols-3');
        break;
      case 4:
        result.push('cosy:grid-cols-4');
        break;
      case 5:
        result.push('cosy:grid-cols-5');
        break;
      case 6:
        result.push('cosy:grid-cols-6');
        break;
      case 7:
        result.push('cosy:grid-cols-7');
        break;
      case 8:
        result.push('cosy:grid-cols-8');
        break;
      case 9:
        result.push('cosy:grid-cols-9');
        break;
      case 10:
        result.push('cosy:grid-cols-10');
        break;
      case 11:
        result.push('cosy:grid-cols-11');
        break;
      case 12:
        result.push('cosy:grid-cols-12');
        break;
    }
  }
  if (responsive.sm) {
    switch (responsive.sm) {
      case 1:
        result.push('cosy:sm:grid-cols-1');
        break;
      case 2:
        result.push('cosy:sm:grid-cols-2');
        break;
      case 3:
        result.push('cosy:sm:grid-cols-3');
        break;
      case 4:
        result.push('cosy:sm:grid-cols-4');
        break;
      case 5:
        result.push('cosy:sm:grid-cols-5');
        break;
      case 6:
        result.push('cosy:sm:grid-cols-6');
        break;
      case 7:
        result.push('cosy:sm:grid-cols-7');
        break;
      case 8:
        result.push('cosy:sm:grid-cols-8');
        break;
      case 9:
        result.push('cosy:sm:grid-cols-9');
        break;
      case 10:
        result.push('cosy:sm:grid-cols-10');
        break;
      case 11:
        result.push('cosy:sm:grid-cols-11');
        break;
      case 12:
        result.push('cosy:sm:grid-cols-12');
        break;
    }
  }
  if (responsive.md) {
    switch (responsive.md) {
      case 1:
        result.push('cosy:md:grid-cols-1');
        break;
      case 2:
        result.push('cosy:md:grid-cols-2');
        break;
      case 3:
        result.push('cosy:md:grid-cols-3');
        break;
      case 4:
        result.push('cosy:md:grid-cols-4');
        break;
      case 5:
        result.push('cosy:md:grid-cols-5');
        break;
      case 6:
        result.push('cosy:md:grid-cols-6');
        break;
      case 7:
        result.push('cosy:md:grid-cols-7');
        break;
      case 8:
        result.push('cosy:md:grid-cols-8');
        break;
      case 9:
        result.push('cosy:md:grid-cols-9');
        break;
      case 10:
        result.push('cosy:md:grid-cols-10');
        break;
      case 11:
        result.push('cosy:md:grid-cols-11');
        break;
      case 12:
        result.push('cosy:md:grid-cols-12');
        break;
    }
  }
  if (responsive.lg) {
    switch (responsive.lg) {
      case 1:
        result.push('cosy:lg:grid-cols-1');
        break;
      case 2:
        result.push('cosy:lg:grid-cols-2');
        break;
      case 3:
        result.push('cosy:lg:grid-cols-3');
        break;
      case 4:
        result.push('cosy:lg:grid-cols-4');
        break;
      case 5:
        result.push('cosy:lg:grid-cols-5');
        break;
      case 6:
        result.push('cosy:lg:grid-cols-6');
        break;
      case 7:
        result.push('cosy:lg:grid-cols-7');
        break;
      case 8:
        result.push('cosy:lg:grid-cols-8');
        break;
      case 9:
        result.push('cosy:lg:grid-cols-9');
        break;
      case 10:
        result.push('cosy:lg:grid-cols-10');
        break;
      case 11:
        result.push('cosy:lg:grid-cols-11');
        break;
      case 12:
        result.push('cosy:lg:grid-cols-12');
        break;
    }
  }
  if (responsive.xl) {
    switch (responsive.xl) {
      case 1:
        result.push('cosy:xl:grid-cols-1');
        break;
      case 2:
        result.push('cosy:xl:grid-cols-2');
        break;
      case 3:
        result.push('cosy:xl:grid-cols-3');
        break;
      case 4:
        result.push('cosy:xl:grid-cols-4');
        break;
      case 5:
        result.push('cosy:xl:grid-cols-5');
        break;
      case 6:
        result.push('cosy:xl:grid-cols-6');
        break;
      case 7:
        result.push('cosy:xl:grid-cols-7');
        break;
      case 8:
        result.push('cosy:xl:grid-cols-8');
        break;
      case 9:
        result.push('cosy:xl:grid-cols-9');
        break;
      case 10:
        result.push('cosy:xl:grid-cols-10');
        break;
      case 11:
        result.push('cosy:xl:grid-cols-11');
        break;
      case 12:
        result.push('cosy:xl:grid-cols-12');
        break;
    }
  }
  if (responsive['2xl']) {
    switch (responsive['2xl']) {
      case 1:
        result.push('cosy:2xl:grid-cols-1');
        break;
      case 2:
        result.push('cosy:2xl:grid-cols-2');
        break;
      case 3:
        result.push('cosy:2xl:grid-cols-3');
        break;
      case 4:
        result.push('cosy:2xl:grid-cols-4');
        break;
      case 5:
        result.push('cosy:2xl:grid-cols-5');
        break;
      case 6:
        result.push('cosy:2xl:grid-cols-6');
        break;
      case 7:
        result.push('cosy:2xl:grid-cols-7');
        break;
      case 8:
        result.push('cosy:2xl:grid-cols-8');
        break;
      case 9:
        result.push('cosy:2xl:grid-cols-9');
        break;
      case 10:
        result.push('cosy:2xl:grid-cols-10');
        break;
      case 11:
        result.push('cosy:2xl:grid-cols-11');
        break;
      case 12:
        result.push('cosy:2xl:grid-cols-12');
        break;
    }
  }
  return result.join(' ');
};

// 间距映射
const gapClasses: Record<GapSize, string> = {
  none: 'cosy:gap-0',
  xs: 'cosy:gap-2',
  sm: 'cosy:gap-4',
  md: 'cosy:gap-6',
  lg: 'cosy:gap-8',
  xl: 'cosy:gap-12',
};

// 行间距映射
const rowGapClasses: Record<GapSize, string> = {
  none: 'cosy:row-gap-0',
  xs: 'cosy:row-gap-2',
  sm: 'cosy:row-gap-4',
  md: 'cosy:row-gap-6',
  lg: 'cosy:row-gap-8',
  xl: 'cosy:row-gap-12',
};

// 列间距映射
const colGapClasses: Record<GapSize, string> = {
  none: 'cosy:col-gap-0',
  xs: 'cosy:col-gap-2',
  sm: 'cosy:col-gap-4',
  md: 'cosy:col-gap-6',
  lg: 'cosy:col-gap-8',
  xl: 'cosy:col-gap-12',
};

// 垂直外边距映射
const marginYClasses: Record<GapSize, string> = {
  none: 'cosy:my-0',
  xs: 'cosy:my-2',
  sm: 'cosy:my-4',
  md: 'cosy:my-6',
  lg: 'cosy:my-8',
  xl: 'cosy:my-12',
};

// 构建最终类名
const gridClasses = [
  'cosy:grid',
  getColsClasses(cols),
  rowGap
    ? rowGapClasses[rowGap as GapSize]
    : colGap
      ? gapClasses[gap as GapSize]
      : gapClasses[gap as GapSize],
  colGap ? colGapClasses[colGap as GapSize] : null,
  marginY ? marginYClasses[marginY as GapSize] : null,
  border ? 'cosy:border cosy:rounded-lg' : null,
  className,
]
  .filter(Boolean)
  .join(' ');
---

<div class:list={[gridClasses, classList]} {...rest}>
  <slot />
</div>
