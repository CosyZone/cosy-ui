---

import {
    Article,
    type IMainContentProps,
    TableOfContents,
} from '../../index-astro';
import { cn } from '../../src/class';
/**
 * @component Main
 *
 * @description
 * Main 组件是页面的主要内容区域，使用 Container 组件提供响应式布局。
 * 它适合作为页面的主体部分，自动处理不同屏幕尺寸下的布局和内边距。
 */
import {
    type BackgroundColor,
    getBackgroundClass,
} from '../../src/common/backgrounds';
import { borderClasses } from '../../src/common/border';
import {
    paddingBottomClasses,
    paddingLeftClasses,
    paddingRightClasses,
    paddingTopClasses,
    paddingXClasses,
    paddingYClasses,
} from '../../src/common/padding-axis';
import MainError from './MainError.astro';
import { createPaddingConflictError } from './validate';

export interface Props extends IMainContentProps {}

const {
    size = 'md',
    padding = 'md',
    py = 'none',
    pt,
    pb,
    pl,
    pr,
    px,
    centered = true,
    backgroundColor,
    border,
    layout = 'row',
    isArticle = false,
    id,
    showTableOfContents = false,
    class: className,
    'class:list': classList,
    currentLocale,
    ...rest
} = Astro.props;

// 使用 class builder 构建布局类
const layoutClass = cn()
    .flex(layout === 'row' ? 'row' : layout === 'column' ? 'col' : 'col')
    .build();

// 使用通用背景色函数

const pyClass = py
    ? paddingYClasses[py as keyof typeof paddingYClasses] || ''
    : '';

const paddingTopClass = pt
    ? paddingTopClasses[pt as keyof typeof paddingTopClasses] || ''
    : '';

const paddingBottomClass = pb
    ? paddingBottomClasses[pb as keyof typeof paddingBottomClasses] || ''
    : '';

const paddingLeftClass = pl
    ? paddingLeftClasses[pl as keyof typeof paddingLeftClasses] || ''
    : '';

const paddingRightClass = pr
    ? paddingRightClasses[pr as keyof typeof paddingRightClasses] || ''
    : '';

const paddingXClass = px
    ? paddingXClasses[px as keyof typeof paddingXClasses] || ''
    : '';

const bgColorClass = getBackgroundClass(backgroundColor as BackgroundColor);
const borderClass = border
    ? borderClasses[border as keyof typeof borderClasses] || ''
    : '';

// 检查 padding 属性冲突
const paddingError = createPaddingConflictError(px, pl, pr, py, pt, pb);

// 构建自定义样式
const customStyle = [];

// 只有当没有对应的Tailwind类时，才使用内联样式
if (!pyClass && py && py !== 'none') {
    customStyle.push(`padding-top: ${py}; padding-bottom: ${py};`);
}

if (!paddingTopClass && pt && pt !== 'none') {
    customStyle.push(`padding-top: ${pt};`);
}

if (!paddingBottomClass && pb && pb !== 'none') {
    customStyle.push(`padding-bottom: ${pb};`);
}

if (!paddingLeftClass && pl && pl !== 'none') {
    customStyle.push(`padding-left: ${pl};`);
}

if (!paddingRightClass && pr && pr !== 'none') {
    customStyle.push(`padding-right: ${pr};`);
}

if (!paddingXClass && px && px !== 'none') {
    customStyle.push(`padding-left: ${px}; padding-right: ${px};`);
}

if (!bgColorClass && backgroundColor) {
    customStyle.push(`background-color: ${backgroundColor};`);
}

const inlineStyle = customStyle.length > 0 ? customStyle.join(' ') : undefined;

// 检查是否有冲突，如果有则显示错误提示
const hasError = Boolean(paddingError);

// 使用 classBuilder 构建完整的 main 类名
const mainClass = cn()
    .w('full')
    .add(layoutClass) // 保留：动态样式
    .add(
        pyClass,
        paddingTopClass,
        paddingBottomClass,
        paddingLeftClass,
        paddingRightClass,
        paddingXClass
    ) // 保留：动态样式
    .add(bgColorClass, borderClass) // 保留：动态样式
    .add(className || '') // 保留：用户自定义类名
    .build();
---

{
    hasError ? (
        <MainError show={hasError} error={paddingError || undefined} />
    ) : (
        <main id={id} class={mainClass} style={inlineStyle} {...rest}>
            {isArticle ? (
                <Article>
                    <slot />
                </Article>
            ) : (
                <slot />
            )}

            {showTableOfContents && <TableOfContents lang={currentLocale} />}
        </main>
    )
}
