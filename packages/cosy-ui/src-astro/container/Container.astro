---
/**
 * @component Container
 *
 * @description
 * Container 组件是一个基础的布局容器，用于限制内容宽度并居中显示。
 * 它提供了多种尺寸和内边距选项，适用于各种布局需求。
 * 当提供 aspectRatio 属性时，容器会保持指定的宽高比。
 *
 * @design
 * 设计理念：
 * 1. 内容约束 - 限制内容宽度，提高可读性和视觉美感
 * 2. 响应式设计 - 在不同屏幕尺寸下自动调整内边距
 * 3. 灵活配置 - 支持多种尺寸和内边距选项
 * 4. 简单易用 - 提供直观的API，易于集成到各种页面布局中
 * 5. 比例保持 - 支持设置固定的宽高比，确保内容始终保持指定比例
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Container>
 *   <p>内容将被限制在一个合理的宽度内并居中显示</p>
 * </Container>
 * ```
 *
 * 自定义尺寸和内边距：
 * ```astro
 * <Container width="sm" padding="lg">
 *   <p>小宽度容器，大内边距</p>
 * </Container>
 * ```
 *
 * 全宽容器：
 * ```astro
 * <Container width="full" padding="none">
 *   <p>全宽容器，无内边距</p>
 * </Container>
 * ```
 *
 * 不居中的容器：
 * ```astro
 * <Container centered={false}>
 *   <p>不居中的容器，靠左对齐</p>
 * </Container>
 * ```
 *
 * 带背景色的容器：
 * ```astro
 * <Container background="primary/10">
 *   <p>带有主要背景色的容器</p>
 * </Container>
 * ```
 *
 * 带边框的容器：
 * ```astro
 * <Container border>
 *   <p>带有边框的容器</p>
 * </Container>
 * ```
 *
 * 设置外边距：
 * ```astro
 * <Container margin="lg">
 *   <p>带有大外边距的容器</p>
 * </Container>
 * ```
 *
 * 设置圆角：
 * ```astro
 * <Container rounded="lg">
 *   <p>带有大圆角的容器</p>
 * </Container>
 * ```
 *
 * 设置固定高度：
 * ```astro
 * <Container height="lg">
 *   <p>固定高度的容器</p>
 * </Container>
 * ```
 *
 * 设置屏幕高度：
 * ```astro
 * <Container height="screen">
 *   <p>占满屏幕高度的容器</p>
 * </Container>
 * ```
 *
 * Flex布局容器（按行排列）：
 * ```astro
 * <Container flex="row" gap="md">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * Flex布局容器（按列排列）：
 * ```astro
 * <Container flex="col" gap="md" items="center" justify="between">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * 保持宽高比的容器：
 * ```astro
 * <Container aspectRatio={16/9}>
 *   <img src="image.jpg" alt="16:9 比例的图片" class="w-full h-full object-cover" />
 * </Container>
 * ```
 *
 * 正方形容器：
 * ```astro
 * <Container aspectRatio={1} width="sm">
 *   <div class="w-full h-full bg-primary/10 flex items-center justify-center">
 *     正方形内容
 *   </div>
 * </Container>
 * ```
 *
 * 4:3 比例容器：
 * ```astro
 * <Container aspectRatio={4/3} background="primary/5" border>
 *   <div class="w-full h-full flex items-center justify-center">
 *     4:3 比例的内容区域
 *   </div>
 * </Container>
 * ```
 *
 * @props
 * @prop {number} [aspectRatio] - 宽高比（宽/高），设置后容器会保持这个比例，如 16/9、4/3、1 等
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体，如：base-100、primary、secondary、accent、neutral、info、success、warning、error，以及透明度变体如 primary/10、secondary/20 等
 * @prop {boolean} [border=false] - 是否显示边框，启用后会在容器周围添加边框和圆角
 * @prop {boolean} [centered=true] - 是否居中显示，设置为false时容器将靠左对齐
 * @prop {string} [class] - 自定义CSS类名，用于添加额外的样式
 * @prop {string} [flex] - flex布局方向，可选值：row、col、row-reverse、col-reverse，不设置则不启用flex布局
 * @prop {string} [gap='none'] - flex项目间距，可选值：none、xs、sm、md、lg、xl，仅在启用flex布局时生效
 * @prop {string} [height] - 容器高度，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl、screen、auto，none表示不设置高度
 * @prop {string} [items] - flex项目水平对齐方式，可选值：start、end、center、baseline、stretch，仅在启用flex布局时生效
 * @prop {string} [justify] - flex项目垂直对齐方式，可选值：start、end、center、between、around、evenly，仅在启用flex布局时生效
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full，控制容器的最大宽度
 * @prop {string} [rounded='none'] - 圆角大小，可选值：none、sm、md、lg、xl、full
 * @prop {...HTMLAttributes<'div'>} [rest] - 其他HTML div标签属性
 */

import type { HTMLAttributes } from 'astro/types';
import '../../style.ts';
import type { BackgroundColor } from './backgrounds';
import { getBackgroundClass } from './backgrounds';

interface Props extends HTMLAttributes<'div'> {
  /**
   * 宽高比（宽/高），设置后容器会保持这个比例
   */
  aspectRatio?: number;

  /**
   * 背景色类型
   */
  background?: BackgroundColor;

  /**
   * 是否显示边框
   * @default false
   */
  border?: boolean;

  /**
   * 是否居中显示
   * @default true
   */
  centered?: boolean;

  /**
   * 自定义类名
   */
  class?: string;

  /**
   * flex布局方向，不设置则不启用flex布局
   */
  flex?: 'row' | 'col' | 'row-reverse' | 'col-reverse';

  /**
   * flex项目间距
   * @default "none"
   */
  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';

  /**
   * 容器高度，不设置则不设置高度
   */
  height?:
    | 'none'
    | 'xs'
    | 'sm'
    | 'md'
    | 'lg'
    | 'xl'
    | '2xl'
    | '3xl'
    | '4xl'
    | '5xl'
    | '6xl'
    | 'screen'
    | 'auto';

  /**
   * flex项目水平对齐方式
   */
  items?: 'start' | 'end' | 'center' | 'baseline' | 'stretch';

  /**
   * flex项目垂直对齐方式
   */
  justify?: 'start' | 'end' | 'center' | 'between' | 'around' | 'evenly';

  /**
   * 外边距大小
   * @default "none"
   */
  margin?:
    | 'none'
    | 'xs'
    | 'sm'
    | 'md'
    | 'lg'
    | 'xl'
    | '2xl'
    | '3xl'
    | '4xl'
    | '5xl'
    | '6xl';

  /**
   * 内边距大小
   * @default "md"
   */
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';

  /**
   * 容器宽度，不设置则不设置宽度
   */
  width?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | 'full';

  /**
   * 圆角大小
   * @default "none"
   */
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | 'full';
}

const {
  aspectRatio,
  background,
  width = 'md',
  padding = 'md',
  margin = 'none',
  centered = true,
  border = false,
  flex,
  gap = 'none',
  items,
  justify,
  rounded = 'none',
  class: className = '',
  height,
  ...rest
} = Astro.props;

// 静态类名映射
const widthClasses = {
  none: '',
  xs: 'cosy:max-w-xs',
  sm: 'cosy:max-w-sm',
  md: 'cosy:max-w-2xl',
  lg: 'cosy:max-w-4xl',
  xl: 'cosy:max-w-6xl',
  full: 'cosy:w-full',
} as const;

const paddingClasses = {
  none: 'cosy:p-0',
  sm: 'cosy:p-2',
  md: 'cosy:p-4',
  lg: 'cosy:p-6',
  xl: 'cosy:p-8',
} as const;

const roundedClasses = {
  none: '',
  sm: 'cosy:rounded-sm',
  md: 'cosy:rounded-md',
  lg: 'cosy:rounded-lg',
  xl: 'cosy:rounded-xl',
  full: 'cosy:rounded-full',
} as const;

const marginClasses = {
  none: '',
  xs: 'cosy:my-1',
  sm: 'cosy:my-2',
  md: 'cosy:my-4',
  lg: 'cosy:my-6',
  xl: 'cosy:my-8',
  '2xl': 'cosy:my-12',
  '3xl': 'cosy:my-16',
  '4xl': 'cosy:my-20',
  '5xl': 'cosy:my-24',
  '6xl': 'cosy:my-32',
} as const;

const flexClasses = {
  row: 'cosy:flex cosy:flex-row',
  col: 'cosy:flex cosy:flex-col',
  'row-reverse': 'cosy:flex cosy:flex-row-reverse',
  'col-reverse': 'cosy:flex cosy:flex-col-reverse',
} as const;

const gapClasses = {
  none: 'cosy:gap-0',
  xs: 'cosy:gap-1',
  sm: 'cosy:gap-2',
  md: 'cosy:gap-4',
  lg: 'cosy:gap-6',
  xl: 'cosy:gap-8',
} as const;

const itemsClasses = {
  start: 'cosy:items-start',
  end: 'cosy:items-end',
  center: 'cosy:items-center',
  baseline: 'cosy:items-baseline',
  stretch: 'cosy:items-stretch',
} as const;

const justifyClasses = {
  start: 'cosy:justify-start',
  end: 'cosy:justify-end',
  center: 'cosy:justify-center',
  between: 'cosy:justify-between',
  around: 'cosy:justify-around',
  evenly: 'cosy:justify-evenly',
} as const;

const heightClasses = {
  none: '',
  xs: 'cosy:h-16',
  sm: 'cosy:h-24',
  md: 'cosy:h-32',
  lg: 'cosy:h-40',
  xl: 'cosy:h-48',
  '2xl': 'cosy:h-56',
  '3xl': 'cosy:h-64',
  '4xl': 'cosy:h-72',
  '5xl': 'cosy:h-80',
  '6xl': 'cosy:h-96',
  screen: 'cosy:h-screen',
  auto: 'cosy:h-auto',
} as const;

// 构建CSS类名
const containerClasses = [
  'cosy:w-full',
  centered ? 'cosy:mx-auto' : '',
  widthClasses[width],
  paddingClasses[padding],
  marginClasses[margin],
  roundedClasses[rounded],
  getBackgroundClass(background),
  border ? 'cosy:border' : '',
  flex ? flexClasses[flex] : '',
  flex ? gapClasses[gap] : '',
  items && flex ? itemsClasses[items] : '',
  justify && flex ? justifyClasses[justify] : '',
  height ? heightClasses[height] : '',
  className,
];

// 构建内联样式
const inlineStyles = aspectRatio ? `aspect-ratio: ${aspectRatio};` : '';
---

<section class:list={[containerClasses]} style={inlineStyles} {...rest}>
  <slot />
</section>
