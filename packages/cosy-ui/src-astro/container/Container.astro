---
/**
 * @component Container
 *
 * @description
 * Container 组件是一个基础的布局容器，用于限制内容宽度并居中显示。
 * 它提供了多种尺寸和内边距选项，适用于各种布局需求。
 * 当提供 aspectRatio 属性时，容器会保持指定的宽高比。
 *
 * @design
 * 设计理念：
 * 1. 内容约束 - 限制内容宽度，提高可读性和视觉美感
 * 2. 响应式设计 - 在不同屏幕尺寸下自动调整内边距
 * 3. 灵活配置 - 支持多种尺寸和内边距选项
 * 4. 简单易用 - 提供直观的API，易于集成到各种页面布局中
 * 5. 比例保持 - 支持设置固定的宽高比，确保内容始终保持指定比例
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Container>
 *   <p>内容将被限制在一个合理的宽度内并居中显示</p>
 * </Container>
 * ```
 *
 * 自定义尺寸和内边距：
 * ```astro
 * <Container width="sm" padding="lg">
 *   <p>小宽度容器，大内边距</p>
 * </Container>
 * ```
 *
 * 全宽容器：
 * ```astro
 * <Container width="full" padding="none">
 *   <p>全宽容器，无内边距</p>
 * </Container>
 * ```
 *
 * 不居中的容器：
 * ```astro
 * <Container centered={false}>
 *   <p>不居中的容器，靠左对齐</p>
 * </Container>
 * ```
 *
 * 内容居中的容器：
 * ```astro
 * <Container contentCentered>
 *   <Button>居中显示的按钮</Button>
 * </Container>
 * ```
 *
 * 带背景色的容器：
 * ```astro
 * <Container background="primary/10">
 *   <p>带有主要背景色的容器</p>
 * </Container>
 * ```
 *
 * 带边框的容器：
 * ```astro
 * <Container border>
 *   <p>带有边框的容器</p>
 * </Container>
 * ```
 *
 * 设置外边距：
 * ```astro
 * <Container margin="lg">
 *   <p>带有大外边距的容器</p>
 * </Container>
 * ```
 *
 * 设置圆角：
 * ```astro
 * <Container rounded="lg">
 *   <p>带有大圆角的容器</p>
 * </Container>
 * ```
 *
 * 设置固定高度：
 * ```astro
 * <Container height="lg">
 *   <p>固定高度的容器</p>
 * </Container>
 * ```
 *
 * 设置屏幕高度：
 * ```astro
 * <Container height="screen">
 *   <p>占满屏幕高度的容器</p>
 * </Container>
 * ```
 *
 * Flex布局容器（按行排列）：
 * ```astro
 * <Container flex="row" gap="md">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * Flex布局容器（按列排列）：
 * ```astro
 * <Container flex="col" gap="md" items="center" justify="between">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * 保持宽高比的容器：
 * ```astro
 * <Container aspectRatio={16/9}>
 *   <img src="image.jpg" alt="16:9 比例的图片" class="w-full h-full object-cover" />
 * </Container>
 * ```
 *
 * 按比例自适应（contain）：
 * ```astro
 * <Container fit="contain" aspectRatio={1/2} height="lg">
 *   <!-- 放入任何内容，容器内部会创建比例盒按 contain 规则自适应 → 永不溢出父容器 -->
 *   <YourContent />
 * </Container>
 * ```
 *
 * 按比例铺满（cover）：
 * ```astro
 * <Container fit="cover" aspectRatio={4/3} height="lg">
 *   <YourContent />
 * </Container>
 * ```
 *
 * 带内容边框的容器：
 * ```astro
 * <Container fit="contain" aspectRatio={16/9} contentBorder="primary/50">
 *   <div class="w-full h-full bg-primary/10 flex items-center justify-center">
 *     带主要色边框的内容区域
 *   </div>
 * </Container>
 * ```
 *
 * 正方形容器：
 * ```astro
 * <Container aspectRatio={1} width="sm">
 *   <div class="w-full h-full bg-primary/10 flex items-center justify-center">
 *     正方形内容
 *   </div>
 * </Container>
 * ```
 *
 * 4:3 比例容器：
 * ```astro
 * <Container aspectRatio={4/3} background="primary/5" border>
 *   <div class="w-full h-full flex items-center justify-center">
 *     4:3 比例的内容区域
 *   </div>
 * </Container>
 * ```
 *
 * @props
 * @prop {number} [aspectRatio] - 宽高比（宽/高），设置后容器会保持这个比例，如 16/9、4/3、1 等
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体，如：base-100、primary、secondary、accent、neutral、info、success、warning、error，以及透明度变体如 primary/10、secondary/20 等
 * @prop {ImageSource} [backgroundImage] - 背景图片源（本地 ImageMetadata 或 远程 URL）。提供时会用图片铺底作为背景
 * @prop {boolean} [border=false] - 是否显示边框，启用后会在容器周围添加边框
 * @prop {boolean|string} [contentBorder=false] - 是否给内容比例盒加边框（仅在 fit 模式下生效）。可设置为 true（使用默认黑色边框）或具体的颜色值（如 "primary/50"、"success"、"gray-300" 等）
 * @prop {boolean} [centered=true] - 是否居中显示，设置为false时容器将靠左对齐
 * @prop {boolean} [contentCentered=false] - 是否让内部内容居中显示，启用后会在容器内使用flex布局居中内容
 * @prop {string} [class] - 自定义CSS类名，用于添加额外的样式
 * @prop {string} [fit='none'] - 内容适配模式：none（默认）、contain（保持比例，尽量占满且不溢出）、cover（保持比例，铺满并可能裁剪）
 * @prop {string} [flex] - flex布局方向，可选值：row、col、row-reverse、col-reverse，不设置则不启用flex布局
 * @prop {string} [gap='none'] - flex项目间距，可选值：none、xs、sm、md、lg、xl，仅在启用flex布局时生效
 * @prop {string} [height] - 容器高度，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl、screen、auto，none表示不设置高度
 * @prop {string} [items] - flex项目水平对齐方式，可选值：start、end、center、baseline、stretch，仅在启用flex布局时生效
 * @prop {string} [justify] - flex项目垂直对齐方式，可选值：start、end、center、between、around、evenly，仅在启用flex布局时生效
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl、2xl、3xl、4xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full，控制容器的最大宽度
 * @prop {string} [rounded='none'] - 圆角大小，可选值：none、sm、md、lg、xl、full
 * @prop {...HTMLAttributes<'div'>} [rest] - 其他HTML div标签属性
 */

import type { HTMLAttributes } from 'astro/types';
import type { ImageSource } from '../image/image';
import Image from '../image/Image.astro';
import '../../style.ts';
import type { BackgroundColor } from '../../src/common/backgrounds';
import { getBackgroundClass } from '../../src/common/backgrounds';
import type { Size } from '../../src/common/size';
import type { HeightSize } from '../../src/common/height';
import type {
  FlexDirection,
  GapSize,
  FlexAlign,
  FlexJustify,
} from '../../src/common/layout';
import type { PaddingSize } from '../../src/common/padding';
import type { MarginSize } from '../../src/common/margin';
import type { RoundedSize } from '../../src/common/rounded';
import type { FitMode } from '../../src/common/fitmode';
import {
  widthClasses,
  flexClasses,
  gapClasses,
  itemsClasses,
  justifyClasses,
  roundedClasses,
} from '../../src/common';
import { paddingClasses } from '../../src/common/padding';
import { marginClasses } from '../../src/common/margin';
import { heightClasses } from '../../src/common/height';
import type { ContentBorderColor } from './contentBorderColors';
import { getContentBorderClass } from './contentBorderColors';
import { validateContainerProps } from './validateProps';
import ContainerError from './ContainerError.astro';

interface Props extends HTMLAttributes<'div'> {
  /**
   * 宽高比（宽/高），设置后容器会保持这个比例
   */
  aspectRatio?: number;

  /**
   * 背景色类型
   */
  background?: BackgroundColor;

  /**
   * 背景图片源（本地 ImageMetadata 或 远程 URL）。提供时会用图片铺底作为背景
   */
  backgroundImage?: ImageSource;

  /**
   * 是否显示边框
   * @default false
   */
  border?: boolean;

  /**
   * 内容适配模式：none（默认）、contain（保持比例，尽量占满且不溢出）、cover（保持比例，铺满并可能裁剪）
   */
  fit?: FitMode;

  /**
   * 是否给内容比例盒加边框（仅在 fit 模式下生效）
   */
  contentBorder?: boolean | ContentBorderColor;

  /**
   * 是否居中显示
   * @default true
   */
  centered?: boolean;

  /**
   * 是否让内部内容居中显示
   * @default false
   */
  contentCentered?: boolean;

  /**
   * 自定义类名
   */
  class?: string;

  /**
   * flex布局方向，不设置则不启用flex布局
   */
  flex?: FlexDirection;

  /**
   * flex项目间距
   * @default "none"
   */
  gap?: GapSize;

  /**
   * 容器高度，不设置则不设置高度
   */
  height?: HeightSize;

  /**
   * flex项目水平对齐方式
   */
  items?: FlexAlign;

  /**
   * flex项目垂直对齐方式
   */
  justify?: FlexJustify;

  /**
   * 外边距大小
   * @default "none"
   */
  margin?: MarginSize;

  /**
   * 内边距大小
   * @default "md"
   */
  padding?: PaddingSize;

  /**
   * 容器宽度，不设置则不设置宽度
   */
  width?: Size;

  /**
   * 圆角大小
   * @default "none"
   */
  rounded?: RoundedSize;
}

const {
  aspectRatio,
  background,
  backgroundImage,
  width = 'md',
  padding = 'md',
  margin = 'none',
  centered = true,
  contentCentered = false,
  border = false,
  fit = 'none',
  contentBorder = false,
  flex,
  gap = 'none',
  items,
  justify,
  rounded = 'none',
  class: className = '',
  height,
  ...rest
} = Astro.props;

// 处理 contentBorder 属性
const hasContentBorder = !!contentBorder;
const contentBorderClass =
  typeof contentBorder === 'string'
    ? getContentBorderClass(contentBorder)
    : getContentBorderClass();

// 用户是否显式传入了冲突的尺寸相关配置
const rawProps = Astro.props as Record<string, unknown>;
const {
  hasConflict: hasSizingConflict,
  messages: validationMessages,
  resolvedFit,
  suggestFallbackMinHeight,
} = validateContainerProps(rawProps);

const effectiveFit = resolvedFit ?? fit;
const fitEnabled = effectiveFit !== 'none' && typeof aspectRatio === 'number';
const isHeightDrivenAspect =
  !fitEnabled &&
  typeof aspectRatio === 'number' &&
  !!height &&
  height !== 'none';
const hasExplicitHeight = !!height && height !== 'none';
const hasDefaultSlot = (Astro as any)?.slots?.has?.('default') ?? false;
const filteredMessages = hasDefaultSlot
  ? validationMessages.filter((m) => !m.includes('可见性风险'))
  : validationMessages;

// 构建CSS类名
const containerClasses = [
  isHeightDrivenAspect ? 'cosy:w-auto' : 'cosy:w-full',
  isHeightDrivenAspect
    ? 'cosy:overflow-hidden cosy:min-w-0 cosy:max-w-full'
    : '',
  centered ? 'cosy:mx-auto' : '',
  contentCentered ? 'cosy:flex cosy:justify-center cosy:items-center' : '',
  widthClasses[width],
  paddingClasses[padding],
  marginClasses[margin],
  roundedClasses[rounded],
  getBackgroundClass(background),
  backgroundImage ? 'cosy:relative cosy:overflow-hidden' : '',
  border ? 'cosy:border' : '',
  fitEnabled ? 'cosy:relative cosy:overflow-hidden' : '',
  suggestFallbackMinHeight && !hasDefaultSlot ? 'cosy:min-h-32' : '',
  flex ? flexClasses[flex] : '',
  flex ? gapClasses[gap] : '',
  items && flex ? itemsClasses[items] : '',
  justify && flex ? justifyClasses[justify] : '',
  height ? heightClasses[height] : '',
  className,
];

// 构建内联样式
const inlineStyles = fitEnabled
  ? hasExplicitHeight
    ? 'container-type: size;'
    : 'container-type: inline-size;'
  : aspectRatio
    ? `aspect-ratio: ${aspectRatio};`
    : '';

const hasError = hasSizingConflict || filteredMessages.length > 0;
---

{hasError && <ContainerError messages={filteredMessages} />}

{
  !hasError && (
    <section class:list={[containerClasses]} style={inlineStyles} {...rest}>
      {backgroundImage && (
        <Image
          src={backgroundImage}
          alt=""
          layout="fill"
          objectFit="cover"
          asBackground
          class="cosy:-z-10 cosy:pointer-events-none"
        />
      )}
      {fitEnabled ? (
        hasExplicitHeight ? (
          <div class="cosy:absolute cosy:inset-0 cosy:grid cosy:place-items-center">
            <div
              class:list={[
                hasContentBorder
                  ? `cosy:border ${contentBorderClass} ${roundedClasses[rounded]}`
                  : '',
              ]}
              style={`aspect-ratio: ${aspectRatio}; width: ${effectiveFit === 'contain' ? `min(100cqw, calc(100cqh * ${aspectRatio}))` : `max(100cqw, calc(100cqh * ${aspectRatio}))`}; height: auto;`}>
              <div class="cosy:relative cosy:w-full cosy:h-full">
                <slot />
              </div>
            </div>
          </div>
        ) : (
          <div
            class:list={[
              'cosy:grid cosy:place-items-center',
              roundedClasses[rounded],
            ]}>
            <div
              class:list={[
                hasContentBorder
                  ? `cosy:border ${contentBorderClass} ${roundedClasses[rounded]}`
                  : '',
              ]}
              style={`aspect-ratio: ${aspectRatio}; width: 100%; height: auto;`}>
              <div
                class:list={[
                  'cosy:relative cosy:w-full cosy:h-full',
                  roundedClasses[rounded],
                ]}
                aria-label="container-content">
                <slot />
              </div>
            </div>
          </div>
        )
      ) : isHeightDrivenAspect ? (
        <div class="cosy:relative cosy:w-full cosy:h-full">
          <div class="cosy:absolute cosy:inset-0">
            <slot />
          </div>
        </div>
      ) : (
        <slot />
      )}
    </section>
  )
}
