---
/**
 * @component Container
 *
 * @description
 * Container 组件是一个基础的布局容器，用于限制内容宽度并居中显示。
 * 它提供了多种尺寸和内边距选项，适用于各种布局需求。
 * 当提供 aspectRatio 属性时，容器会保持指定的宽高比。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Container>
 *   <p>内容将被限制在一个合理的宽度内并居中显示</p>
 * </Container>
 * ```
 *
 * 自定义尺寸和内边距：
 * ```astro
 * <Container width="sm" padding="lg">
 *   <p>小宽度容器，大内边距</p>
 * </Container>
 * ```
 *
 * 全宽容器：
 * ```astro
 * <Container width="full" padding="none">
 *   <p>全宽容器，无内边距</p>
 * </Container>
 * ```
 *
 * 不居中的容器：
 * ```astro
 * <Container centered={false}>
 *   <p>不居中的容器，靠左对齐</p>
 * </Container>
 * ```
 *
 * 内容居中的容器：
 * ```astro
 * <Container contentCentered>
 *   <Button>居中显示的按钮</Button>
 * </Container>
 * ```
 *
 * 带背景色的容器：
 * ```astro
 * <Container background="primary/10">
 *   <p>带有主要背景色的容器</p>
 * </Container>
 * ```
 *
 * 带边框的容器：
 * ```astro
 * <Container border="md">
 *   <p>带有中等边框的容器</p>
 * </Container>
 * ```
 *
 * 带彩色边框的容器：
 * ```astro
 * <Container border="lg" borderColor="primary">
 *   <p>带有主要色边框的容器</p>
 * </Container>
 * ```
 *
 * 带透明度边框的容器：
 * ```astro
 * <Container border="md" borderColor="success/50">
 *   <p>带有半透明成功色边框的容器</p>
 * </Container>
 * ```
 *
 * 设置外边距：
 * ```astro
 * <Container margin="lg">
 *   <p>带有大外边距的容器</p>
 * </Container>
 * ```
 *
 * 设置垂直内边距：
 * ```astro
 * <Container py="lg">
 *   <p>带有大垂直内边距的容器</p>
 * </Container>
 * ```
 *
 * 设置水平内边距：
 * ```astro
 * <Container px="xl">
 *   <p>带有大水平内边距的容器</p>
 * </Container>
 * ```
 *
 * 分别设置各边内边距：
 * ```astro
 * <Container pt="lg" pb="md" pl="sm" pr="xl">
 *   <p>自定义各边内边距的容器</p>
 * </Container>
 * ```
 *
 * ⚠️ **注意**:
 * - 不能同时使用 `px` 和 `pl`/`pr` 属性，因为它们都会设置水平内边距，会产生冲突
 * - 不能同时使用 `py` 和 `pt`/`pb` 属性，因为它们都会设置垂直内边距，会产生冲突
 * 如果同时提供这些冲突的属性，组件会显示错误提示。
 *
 * 设置圆角：
 * ```astro
 * <Container rounded="lg">
 *   <p>带有大圆角的容器</p>
 * </Container>
 * ```
 *
 * 设置固定高度：
 * ```astro
 * <Container height="lg">
 *   <p>固定高度的容器</p>
 * </Container>
 * ```
 *
 * 设置屏幕高度：
 * ```astro
 * <Container height="screen">
 *   <p>占满屏幕高度的容器</p>
 * </Container>
 * ```
 *
 * Flex布局容器（按行排列）：
 * ```astro
 * <Container flex="row" gap="md">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * Flex布局容器（按列排列）：
 * ```astro
 * <Container flex="col" gap="md" items="center" justify="between">
 *   <div>第一项</div>
 *   <div>第二项</div>
 * </Container>
 * ```
 *
 * 保持宽高比的容器：
 * ```astro
 * <Container aspectRatio={16/9}>
 *   <img src="image.jpg" alt="16:9 比例的图片" class="w-full h-full object-cover" />
 * </Container>
 * ```
 *
 * 按比例自适应（contain）：
 * ```astro
 * <Container fit="contain" aspectRatio={1/2} height="lg">
 *   <!-- 放入任何内容，容器内部会创建比例盒按 contain 规则自适应 → 永不溢出父容器 -->
 *   <YourContent />
 * </Container>
 * ```
 *
 * 按比例铺满（cover）：
 * ```astro
 * <Container fit="cover" aspectRatio={4/3} height="lg">
 *   <YourContent />
 * </Container>
 * ```
 *
 * 带内容边框的容器：
 * ```astro
 * <Container fit="contain" aspectRatio={16/9} contentBorder="primary/50">
 *   <div class="w-full h-full bg-primary/10 flex items-center justify-center">
 *     带主要色边框的内容区域
 *   </div>
 * </Container>
 * ```
 *
 * 正方形容器：
 * ```astro
 * <Container aspectRatio={1} width="sm">
 *   <div class="w-full h-full bg-primary/10 flex items-center justify-center">
 *     正方形内容
 *   </div>
 * </Container>
 * ```
 *
 * 4:3 比例容器：
 * ```astro
 * <Container aspectRatio={4/3} background="primary/5" border="sm">
 *   <div class="w-full h-full flex items-center justify-center">
 *     4:3 比例的内容区域
 *   </div>
 * </Container>
 * ```
 *
 * @props
 * @prop {number} [aspectRatio] - 宽高比（宽/高），设置后容器会保持这个比例，如 16/9、4/3、1 等
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体，如：base-100、primary、secondary、accent、neutral、info、success、warning、error，以及透明度变体如 primary/10、secondary/20 等
 * @prop {ImageSource} [backgroundImage] - 背景图片源（本地 ImageMetadata 或 远程 URL）。提供时会用图片铺底作为背景
 * @prop {string} [border="none"] - 边框尺寸，可选值：none、sm、md、lg、xl
 * @prop {string} [borderColor] - 边框颜色，支持所有预定义的颜色和透明度变体，如：primary、success、primary/50 等
 * @prop {boolean|string} [contentBorder=false] - 是否给内容比例盒加边框（仅在 fit 模式下生效）。可设置为 true（使用默认黑色边框）或具体的颜色值（如 "primary/50"、"success"、"gray-300" 等）
 * @prop {boolean} [centered=true] - 是否居中显示，设置为false时容器将靠左对齐
 * @prop {boolean} [contentCentered=false] - 是否让内部内容居中显示，启用后会在容器内使用flex布局居中内容
 * @prop {string} [class] - 自定义CSS类名，用于添加额外的样式
 * @prop {string} [fit='none'] - 内容适配模式：none（默认）、contain（保持比例，尽量占满且不溢出）、cover（保持比例，铺满并可能裁剪）
 * @prop {string} [flex] - flex布局方向，可选值：row、col、row-reverse、col-reverse，不设置则不启用flex布局
 * @prop {string} [gap='none'] - flex项目间距，可选值：none、xs、sm、md、lg、xl，仅在启用flex布局时生效
 * @prop {string} [height] - 容器高度，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl、screen、auto，none表示不设置高度
 * @prop {string} [items] - flex项目水平对齐方式，可选值：start、end、center、baseline、stretch，仅在启用flex布局时生效
 * @prop {string} [justify] - flex项目垂直对齐方式，可选值：start、end、center、between、around、evenly，仅在启用flex布局时生效
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl、2xl、3xl、4xl
 * @prop {string} [py] - 垂直内边距（上下），可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pt] - 顶部内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pb] - 底部内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [px] - 水平内边距（左右），可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pl] - 左侧内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pr] - 右侧内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full，控制容器的最大宽度
 * @prop {string} [rounded='none'] - 圆角大小，可选值：none、sm、md、lg、xl、full
 * @prop {...HTMLAttributes<'div'>} [rest] - 其他HTML div标签属性
 */

import Image from '../image/Image.astro';
import '../../style.ts';
import type { IContainerProps } from './props.ts';
import { roundedClasses } from '../../src/common';
import { getContentBorderClass } from '../../src/components/container/contentBorderColors.ts';
import { validateContainerProps } from './validate-props.ts';
import { createPaddingConflictError } from './validate-padding.ts';
import { getContainerCombinedClasses } from './util-class.ts';
import ContainerError from './ContainerError.astro';
import ContainerContent from './ContainerContent.astro';

// 导出 Props 别名以提升 IDE 对组件使用方的属性提示
export type Props = IContainerProps;

const {
    aspectRatio,
    background,
    backgroundImage,
    width = 'md',
    padding = 'md',
    py,
    pt,
    pb,
    px,
    pl,
    pr,
    margin = 'none',
    centered = true,
    contentCentered = false,
    border = 'none',
    borderColor,
    fit = 'none',
    contentBorder = false,
    flex,
    gap = 'none',
    items,
    justify,
    rounded = 'none',
    class: className = '',
    height,
    ...rest
} = Astro.props as Props;

// 处理 contentBorder 属性
const hasContentBorder = !!contentBorder;
const contentBorderClass =
    typeof contentBorder === 'string'
        ? getContentBorderClass(contentBorder)
        : getContentBorderClass();

// 检查 padding 属性冲突
const paddingError = createPaddingConflictError(px, pl, pr, py, pt, pb);

if (paddingError) {
    console.error(`Container 组件错误: ${paddingError.message}`);
}

// 用户是否显式传入了冲突的尺寸相关配置
const rawProps = Astro.props as Record<string, unknown>;
const {
    hasConflict: hasSizingConflict,
    messages: validationMessages,
    resolvedFit,
} = validateContainerProps(rawProps);

const effectiveFit = resolvedFit ?? fit;
const fitEnabled = effectiveFit !== 'none' && typeof aspectRatio === 'number';
const isHeightDrivenAspect =
    !fitEnabled &&
    typeof aspectRatio === 'number' &&
    !!height &&
    height !== 'none';
const hasExplicitHeight = !!height && height !== 'none';
const hasDefaultSlot = (Astro as any)?.slots?.has?.('default') ?? false;
const filteredMessages = hasDefaultSlot
    ? validationMessages.filter((m) => !m.includes('可见性风险'))
    : validationMessages;

// 使用共用的工具函数计算组合类名
const containerClasses = getContainerCombinedClasses({
    aspectRatio,
    background,
    backgroundImage,
    width,
    padding,
    py,
    pt,
    pb,
    px,
    pl,
    pr,
    margin,
    centered,
    contentCentered,
    border,
    borderColor,
    fit,
    contentBorder,
    flex,
    gap,
    items,
    justify,
    rounded,
    class: className,
    height,
});

// 构建内联样式
const inlineStyles = fitEnabled
    ? hasExplicitHeight
        ? 'container-type: size;'
        : 'container-type: inline-size;'
    : aspectRatio
      ? `aspect-ratio: ${aspectRatio};`
      : '';

const hasError =
    hasSizingConflict || filteredMessages.length > 0 || Boolean(paddingError);
---

{
    hasError && (
        <ContainerError
            messages={filteredMessages}
            paddingError={paddingError}
        />
    )
}

{
    !hasError && (
        <ContainerContent
            {...rest}
            aspectRatio={aspectRatio}
            backgroundImage={backgroundImage}
            contentBorder={contentBorder}
            centered={centered}
            contentCentered={contentCentered}
            border={border}
            borderColor={borderColor}
            fit={fit}
            flex={flex}
            gap={gap}
            items={items}
            justify={justify}
            rounded={rounded}
            height={height}
            hasContentBorder={hasContentBorder}
            contentBorderClass={contentBorderClass}
            containerClasses={containerClasses}
            inlineStyles={inlineStyles}
            effectiveFit={effectiveFit}
            hasExplicitHeight={hasExplicitHeight}
            isHeightDrivenAspect={isHeightDrivenAspect}>
            <slot />
        </ContainerContent>
    )
}
