---
/**
 * @component Container
 *
 * @description
 * Container 组件是一个基础的布局容器，用于限制内容宽度并居中显示。
 * 它提供了多种尺寸和内边距选项，适用于各种布局需求。
 * 当提供 aspectRatio 属性时，容器会保持指定的宽高比。
 *
 * @props
 * @prop {number} [aspectRatio] - 宽高比（宽/高），设置后容器会保持这个比例，如 16/9、4/3、1 等
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体，如：base-100、primary、secondary、accent、neutral、info、success、warning、error，以及透明度变体如 primary/10、secondary/20 等
 * @prop {ImageSource} [backgroundImage] - 背景图片源（本地 ImageMetadata 或 远程 URL）。提供时会用图片铺底作为背景
 * @prop {boolean} [centered=true] - 是否居中显示，设置为false时容器将靠左对齐
 * @prop {boolean} [contentCentered=false] - 是否让内部内容居中显示，启用后会在容器内使用flex布局居中内容
 * @prop {string} [class] - 自定义CSS类名，用于添加额外的样式
 * @prop {string} [fit='none'] - 内容适配模式：none（默认）、contain（保持比例，尽量占满且不溢出）、cover（保持比例，铺满并可能裁剪）
 * @prop {string} [flex] - flex布局方向，可选值：row、col、row-reverse、col-reverse，不设置则不启用flex布局
 * @prop {string} [gap='none'] - flex项目间距，可选值：none、xs、sm、md、lg、xl，仅在启用flex布局时生效
 * @prop {string} [height] - 容器高度，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl、screen、auto，none表示不设置高度
 * @prop {string} [items] - flex项目水平对齐方式，可选值：start、end、center、baseline、stretch，仅在启用flex布局时生效
 * @prop {string} [justify] - flex项目垂直对齐方式，可选值：start、end、center、between、around、evenly，仅在启用flex布局时生效
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl、2xl、3xl、4xl
 * @prop {string} [py] - 垂直内边距（上下），可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pt] - 顶部内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pb] - 底部内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [px] - 水平内边距（左右），可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pl] - 左侧内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [pr] - 右侧内边距，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full，控制容器的最大宽度
 * @prop {string} [rounded='none'] - 圆角大小，可选值：none、sm、md、lg、xl、full
 * @prop {...HTMLAttributes<'div'>} [rest] - 其他HTML div标签属性
 */

import "../../style.ts";
import type { IContainerProps } from "./props.ts";
import { validateContainer } from "./validate.ts";
import ContainerError from "./ContainerError.astro";
import ContainerBox from "./ContainerBox.astro";

export type Props = IContainerProps;
const {
	aspectRatio,
	background,
	backgroundImage,
	width = "md",
	padding = "md",
	py,
	pt,
	pb,
	px,
	pl,
	pr,
	margin = "none",
	centered = true,
	contentCentered = false,
	fit = "none",
	flex,
	gap = "none",
	items,
	justify,
	rounded = "none",
	class: className = "",
	height,
	...rest
} = Astro.props as Props;

// 校验所有配置
const messages = validateContainer(Astro.props as Record<string, unknown>);
const hasError = messages.length > 0;
---

{hasError && <ContainerError messages={messages} />}

{
    !hasError && (
        <ContainerBox
            {...rest}
            aspectRatio={aspectRatio}
            background={background}
            backgroundImage={backgroundImage}
            width={width}
            padding={padding}
            py={py}
            pt={pt}
            pb={pb}
            px={px}
            pl={pl}
            pr={pr}
            margin={margin}
            centered={centered}
            contentCentered={contentCentered}
            fit={fit}
            flex={flex}
            gap={gap}
            items={items}
            justify={justify}
            rounded={rounded}
            class={className}
            height={height}>
            <slot />
        </ContainerBox>
    )
}
