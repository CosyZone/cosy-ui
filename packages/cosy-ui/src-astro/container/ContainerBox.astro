---
import ContainerBg from "./ContainerBg.astro";
import AspectRatioBox from "./AspectRatioBox.astro";
import HeightDrivenAspect from "./HeightDrivenAspect.astro";
import "../../style.ts";
import type { IContainerProps } from "./props.ts";

// 导出 Props 别名以提升 IDE 对组件使用方的属性提示
export type Props = IContainerProps & {
	containerClasses: string | string[] | undefined;
	hasExplicitHeight: boolean;
	isHeightDrivenAspect: boolean;
	aspectRatio?: number;
	rounded: string;
	centered?: boolean;
	contentCentered?: boolean;
	fit?: string;
	flex?: string;
	gap?: string;
	items?: string;
	justify?: string;
	height?: string;
	backgroundImage?: any;
};

const {
	aspectRatio,
	backgroundImage,
	fit = "none",
	rounded = "none",
	height,
	containerClasses,
	hasExplicitHeight,
	isHeightDrivenAspect,
	centered,
	contentCentered,
	flex,
	gap,
	items,
	justify,
	...rest
} = Astro.props as Props;

const fitEnabled = fit !== "none" && typeof aspectRatio === "number";

// 构建内联样式
const computedInlineStyles = fitEnabled
	? hasExplicitHeight
		? "container-type: size;"
		: "container-type: inline-size;"
	: aspectRatio
		? `aspect-ratio: ${aspectRatio};`
		: "";
---

<section class:list={[containerClasses]} style={computedInlineStyles} {...rest}>
    <!-- 最底层的背景图片 -->
    <ContainerBg backgroundImage={backgroundImage} />

    <!-- 情况1: 当启用宽高比适配时，使用专门的宽高比组件处理 -->
    {
        fitEnabled && (
            <AspectRatioBox
                aspectRatio={aspectRatio!}
                fit={fit}
                rounded={rounded}
                hasExplicitHeight={hasExplicitHeight}
            />
        )
    }

    <!-- 情况2: 当未启用宽高比适配但需要高度驱动布局时，使用高度驱动组件 -->
    {!fitEnabled && isHeightDrivenAspect && <HeightDrivenAspect />}

    <!-- 情况3: 默认情况，直接渲染子元素 -->
    {!fitEnabled && !isHeightDrivenAspect && <slot />}
</section>
