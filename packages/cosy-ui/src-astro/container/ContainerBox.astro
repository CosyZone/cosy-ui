---

import { cn } from '../../src/class';
import AspectRatioBox from './AspectRatioBox.astro';
import ContainerBg from './ContainerBg.astro';
import { getContainerCombinedClasses } from './class';
import HeightDrivenAspect from './HeightDrivenAspect.astro';
import type { IContainerProps } from './props';

// 导出 Props 别名以提升 IDE 对组件使用方的属性提示
export type Props = IContainerProps;

const {
    aspectRatio,
    backgroundImage,
    background,
    width = 'md',
    padding = 'md',
    py,
    pt,
    pb,
    px,
    pl,
    pr,
    margin = 'none',
    centered = true,
    contentCentered = false,
    fit = 'none',
    flex,
    gap = 'none',
    items,
    justify,
    rounded = 'none',
    border = 'none',
    borderColor,
    class: className = '',
    height,
    muted,
    shadow = 'none',
    ...rest
} = Astro.props as Props;

// 计算组合类名
const computedContainerClassesArray = getContainerCombinedClasses({
    aspectRatio,
    backgroundImage,
    background,
    width,
    padding,
    py,
    pt,
    pb,
    px,
    pl,
    pr,
    margin,
    centered,
    contentCentered,
    fit,
    flex,
    gap,
    items,
    justify,
    rounded,
    border,
    borderColor,
    class: className,
    height,
    muted,
    shadow,
});

// 使用 class builder 构建最终的类名
const computedContainerClasses = cn()
    .add(...computedContainerClassesArray)
    .build();

// 计算其他需要的属性
const fitEnabled = fit !== 'none' && typeof aspectRatio === 'number';
const isHeightDrivenAspect =
    !fitEnabled &&
    typeof aspectRatio === 'number' &&
    !!height &&
    height !== 'none';
const hasExplicitHeight = !!height && height !== 'none';

// 构建内联样式
const computedInlineStyles = fitEnabled
    ? hasExplicitHeight
        ? 'container-type: size;'
        : 'container-type: inline-size;'
    : aspectRatio
      ? `aspect-ratio: ${aspectRatio};`
      : '';
---

<section
    class={computedContainerClasses}
    style={computedInlineStyles}
    {...rest}>
    <!-- 最底层的背景图片 -->
    <ContainerBg backgroundImage={backgroundImage} />

    <!-- 情况1: 当启用宽高比适配时，使用专门的宽高比组件处理 -->
    {
        fitEnabled && (
            <AspectRatioBox
                aspectRatio={aspectRatio!}
                fit={fit}
                rounded={rounded}
                hasExplicitHeight={hasExplicitHeight}>
                <slot />
            </AspectRatioBox>
        )
    }

    <!-- 情况2: 当未启用宽高比适配但需要高度驱动布局时，使用高度驱动组件 -->
    {!fitEnabled && isHeightDrivenAspect && <HeightDrivenAspect />}

    <!-- 情况3: 默认情况，直接渲染子元素 -->
    {!fitEnabled && !isHeightDrivenAspect && <slot />}
</section>
