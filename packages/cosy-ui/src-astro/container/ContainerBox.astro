---
import ContainerBg from './ContainerBg.astro';
import '../../style.ts';
import type { IContainerProps } from './props.ts';
import { roundedClasses } from '../../src/common';

// 导出 Props 别名以提升 IDE 对组件使用方的属性提示
export type Props = IContainerProps & {
    hasContentBorder: boolean;
    contentBorderClass: string;
    containerClasses: string | string[] | undefined;
    inlineStyles: string;
    hasExplicitHeight: boolean;
    isHeightDrivenAspect: boolean;
    aspectRatio?: number;
    rounded: string;
};

const {
    aspectRatio,
    backgroundImage,
    contentBorder,
    centered = true,
    contentCentered = false,
    border = 'none',
    borderColor,
    fit = 'none',
    flex,
    gap = 'none',
    items,
    justify,
    rounded = 'none',
    height,
    hasContentBorder,
    contentBorderClass,
    containerClasses,
    inlineStyles,
    hasExplicitHeight,
    isHeightDrivenAspect,
    ...rest
} = Astro.props as Props;

const fitEnabled = fit !== 'none' && typeof aspectRatio === 'number';
---

<section class:list={[containerClasses]} style={inlineStyles} {...rest}>
    <!-- 最底层的背景图片 -->
    <ContainerBg backgroundImage={backgroundImage} />

    {
        fitEnabled ? (
            hasExplicitHeight ? (
                <div class="cosy:absolute cosy:inset-0 cosy:grid cosy:place-items-center">
                    <div
                        class:list={[
                            hasContentBorder
                                ? `cosy:border ${contentBorderClass} ${roundedClasses[rounded]}`
                                : '',
                        ]}
                        style={`aspect-ratio: ${aspectRatio}; width: ${fit === 'contain' ? `min(100cqw, calc(100cqh * ${aspectRatio}))` : `max(100cqw, calc(100cqh * ${aspectRatio}))`}; height: auto;`}>
                        <div class="cosy:relative cosy:w-full cosy:h-full">
                            <slot />
                        </div>
                    </div>
                </div>
            ) : (
                <div
                    class:list={[
                        'cosy:grid cosy:place-items-center',
                        roundedClasses[rounded],
                    ]}>
                    <div
                        class:list={[
                            hasContentBorder
                                ? `cosy:border ${contentBorderClass} ${roundedClasses[rounded]}`
                                : '',
                        ]}
                        style={`aspect-ratio: ${aspectRatio}; width: 100%; height: auto;`}>
                        <div
                            class:list={[
                                'cosy:relative cosy:w-full cosy:h-full',
                                roundedClasses[rounded],
                            ]}
                            aria-label="container-content">
                            <slot />
                        </div>
                    </div>
                </div>
            )
        ) : isHeightDrivenAspect ? (
            <div class="cosy:relative cosy:w-full cosy:h-full">
                <div class="cosy:absolute cosy:inset-0">
                    <slot />
                </div>
            </div>
        ) : (
            <slot />
        )
    }
</section>
