---
/**
 * @component Modal
 *
 * @description
 * Modal 组件是一个模态对话框，用于在不离开当前页面的情况下显示内容、通知或请求用户输入。
 * 它会覆盖在页面内容上方，并提供一个聚焦的交互环境。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Modal id="my-modal" title="提示">
 *   <p>这是一个模态对话框的内容。</p>
 *   <button slot="actions" data-modal-target="my-modal">关闭</button>
 * </Modal>
 *
 * <!-- 触发按钮 -->
 * <button data-modal-target="my-modal">打开模态框</button>
 * ```
 *
 * 自定义操作按钮：
 * ```astro
 * <Modal id="confirm-modal" title="确认操作">
 *   <p>您确定要执行此操作吗？</p>
 *   <div slot="actions">
 *     <button class="btn btn-primary">确认</button>
 *     <button class="btn" data-modal-target="confirm-modal">取消</button>
 *   </div>
 * </Modal>
 * ```
 *
 * 不带标题的模态框：
 * ```astro
 * <Modal id="image-modal">
 *   <img src="/images/large-image.jpg" alt="大图预览" />
 * </Modal>
 * ```
 *
 * 带链接标题的模态框：
 * ```astro
 * <Modal id="help-modal" title="帮助文档" titleHref="/help" titleExternal>
 *   <p>点击标题可以跳转到帮助文档。</p>
 * </Modal>
 * ```
 */

import { Heading } from '../../index-astro';
import { cn } from '../../src/class';
import CloseButton from './CloseButton.astro';

interface Props {
    /**
     * Modal 的唯一标识符
     */
    id: string;
    /**
     * 模态框的标题
     */
    title?: string;
    /**
     * 标题的链接地址，传入后标题会变成可点击的链接
     */
    titleHref?: string;
    /**
     * 标题链接是否为外部链接
     */
    titleExternal?: boolean;
    /**
     * 自定义类名
     */
    class?: string;
}

const {
    id,
    title = '',
    titleHref,
    titleExternal = false,
    class: className = '',
} = Astro.props;

// 使用 classBuilder 构建 modal-box 类名
const modalBoxClass = cn()
    .add('cosy:modal-box') // 保留：DaisyUI 组件类名
    .add(className) // 保留：用户自定义类名
    .build();
---

<dialog id={id} class="cosy:modal">
    <div class={modalBoxClass}>
        <div
            class="cosy:flex cosy:justify-between cosy:items-center cosy:p-2 cosy:border-b cosy:border-base-300 not-prose">
            <Heading
                level={4}
                class="cosy:modal-title cosy:m-0"
                href={titleHref}
                external={titleExternal}>
                {title}
            </Heading>
            <CloseButton class="cosy:absolute" />
        </div>

        <div class="cosy:modal-content">
            <slot />
        </div>

        <div class="cosy:modal-action">
            <slot name="actions" />
        </div>
    </div>
</dialog>

<script is:inline define:vars={{ id }}>
    let handleClick;

    function initializeModal() {
        const modal = document.getElementById(id);
        if (!modal) {
            return;
        }

        // 移除之前的事件监听器（如果存在）
        if (handleClick) {
            document.removeEventListener('click', handleClick);
        }

        // 使用事件委托来处理动态加载的内容
        handleClick = (event) => {
            const target = event.target;
            // 使用 closest() 查找最近的匹配元素，包括按钮内部的元素
            const trigger = target.closest(`[data-modal-target="${id}"]`);
            if (trigger) {
                console.log('Modal: 触发模态框', id);
                modal.showModal();

                // 在modal显示后自动focus到第一个input元素
                setTimeout(() => {
                    const firstInput = modal.querySelector(
                        'input, textarea, select, [contenteditable="true"]'
                    );
                    if (firstInput) {
                        firstInput.focus();
                    }
                }, 100); // 延迟100ms确保modal完全显示
            }
        };

        document.addEventListener('click', handleClick);
    }

    // Astro 页面切换时初始化
    document.addEventListener('astro:page-load', () => {
        initializeModal();
    });

    // 非客户端路由场景（或首屏加载）下，确保初始化
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => initializeModal());
    } else {
        // 文档已就绪，直接初始化一次
        initializeModal();
    }

    // 页面卸载时清理事件监听器
    document.addEventListener('astro:before-preparation', () => {
        if (handleClick) {
            document.removeEventListener('click', handleClick);
            handleClick = null;
        }
    });
</script>
