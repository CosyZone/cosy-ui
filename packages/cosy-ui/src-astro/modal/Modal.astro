---
/**
 * @component Modal
 *
 * @description
 * Modal 组件是一个模态对话框，用于在不离开当前页面的情况下显示内容、通知或请求用户输入。
 * 它会覆盖在页面内容上方，并提供一个聚焦的交互环境。
 *
 * @design
 * 设计理念：
 * 1. 聚焦交互 - 通过遮罩层和动画效果引导用户注意力
 * 2. 灵活布局 - 支持标题、内容和操作按钮的灵活组合
 * 3. 可访问性 - 支持键盘导航和屏幕阅读器
 * 4. 响应式设计 - 在不同屏幕尺寸下保持良好的用户体验
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Modal id="my-modal" title="提示">
 *   <p>这是一个模态对话框的内容。</p>
 *   <button slot="actions" data-modal-target="my-modal">关闭</button>
 * </Modal>
 *
 * <!-- 触发按钮 -->
 * <button data-modal-target="my-modal">打开模态框</button>
 * ```
 *
 * 自定义操作按钮：
 * ```astro
 * <Modal id="confirm-modal" title="确认操作">
 *   <p>您确定要执行此操作吗？</p>
 *   <div slot="actions">
 *     <button class="btn btn-primary">确认</button>
 *     <button class="btn" data-modal-target="confirm-modal">取消</button>
 *   </div>
 * </Modal>
 * ```
 *
 * 不带标题的模态框：
 * ```astro
 * <Modal id="image-modal">
 *   <img src="/images/large-image.jpg" alt="大图预览" />
 * </Modal>
 * ```
 *
 * 带链接标题的模态框：
 * ```astro
 * <Modal id="help-modal" title="帮助文档" titleHref="/help" titleExternal>
 *   <p>点击标题可以跳转到帮助文档。</p>
 * </Modal>
 * ```
 */

import '../../style.ts';
import { Heading } from '../../index-astro';
import CloseButton from './CloseButton.astro';

interface Props {
  /**
   * Modal 的唯一标识符
   */
  id: string;
  /**
   * 模态框的标题
   */
  title?: string;
  /**
   * 标题的链接地址，传入后标题会变成可点击的链接
   */
  titleHref?: string;
  /**
   * 标题链接是否为外部链接
   */
  titleExternal?: boolean;
  /**
   * 自定义类名
   */
  class?: string;
}

const {
  id,
  title = '',
  titleHref,
  titleExternal = false,
  class: className = '',
} = Astro.props;
---

<dialog id={id} class="cosy:modal">
  <div class:list={['cosy:modal-box', className]}>
    <div
      class="cosy:flex cosy:justify-between cosy:items-center cosy:p-2 cosy:border-b-1 cosy:border-base-300 not-prose">
      <Heading
        level={4}
        class="cosy:modal-title cosy:m-0"
        href={titleHref}
        external={titleExternal}>
        {title}
      </Heading>
      <CloseButton class="cosy:absolute" />
    </div>

    <div class="cosy:modal-content">
      <slot />
    </div>

    <div class="cosy:modal-action">
      <slot name="actions" />
    </div>
  </div>
</dialog>

<script is:inline define:vars={{ id }}>
  let handleClick;

  function initializeModal() {
    const modal = document.getElementById(id);
    if (!modal) {
      return;
    }

    // 移除之前的事件监听器（如果存在）
    if (handleClick) {
      document.removeEventListener('click', handleClick);
    }

    // 使用事件委托来处理动态加载的内容
    handleClick = (event) => {
      const target = event.target;
      // 使用 closest() 查找最近的匹配元素，包括按钮内部的元素
      const trigger = target.closest(`[data-modal-target="${id}"]`);
      if (trigger) {
        console.log('Modal: 触发模态框', id);
        modal.showModal();

        // 在modal显示后自动focus到第一个input元素
        setTimeout(() => {
          const firstInput = modal.querySelector(
            'input, textarea, select, [contenteditable="true"]'
          );
          if (firstInput) {
            firstInput.focus();
          }
        }, 100); // 延迟100ms确保modal完全显示
      }
    };

    document.addEventListener('click', handleClick);
  }

  // Astro 页面切换时初始化
  document.addEventListener('astro:page-load', () => {
    initializeModal();
  });

  // 页面卸载时清理事件监听器
  document.addEventListener('astro:before-preparation', () => {
    if (handleClick) {
      document.removeEventListener('click', handleClick);
      handleClick = null;
    }
  });
</script>
