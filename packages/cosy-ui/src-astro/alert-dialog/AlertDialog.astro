---



/**
 * @component AlertDialog
 *
 * @description
 * AlertDialog 组件用于显示简单的确认对话框，支持国际化，带有淡入淡出动画效果。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <AlertDialog message="操作已完成" />
 * ```
 *
 * 指定语言：
 * ```astro
 * <AlertDialog message="Operation completed" lang="en" />
 * ```
 *
 * 组合使用：
 * ```astro
 * <button onclick="showDialog()">显示对话框</button>
 * <AlertDialog message="确认要继续吗？" />
 * ```
 *
 * @props
 * @prop {string} [class] - 自定义 CSS 类名，用于覆盖默认样式
 * @prop {string} [id='alert-dialog'] - 对话框的唯一标识符，用于通过 JavaScript 控制对话框的显示和隐藏
 * @prop {('zh-cn'|'en')} [lang='zh-cn'] - 语言设置，影响按钮文本，支持中文和英文两种语言
 * @prop {string} message - 对话框显示的消息内容，支持任意文本内容
 *
 * @slots
 * @slot default - 无插槽内容，所有内容通过 message 属性传递
 */

import { cn } from '../../src/class';

export interface Props {
    message: string;
    lang?: 'zh-cn' | 'en';
    id?: string;
    class?: string;
}

const {
    message,
    lang = 'zh-cn',
    id = 'alert-dialog',
    class: className,
} = Astro.props;

// 多语言文本
const t = (key: 'confirm') => {
    const messages = {
        'zh-cn': {
            confirm: '确定',
        },
        en: {
            confirm: 'OK',
        },
    };
    return messages[lang][key];
};

// 使用 class builder 构建类名
const dialogClass = cn()
    .add('cosy:fixed', 'cosy:inset-0', 'cosy:z-50')
    .flex()
    .items('center')
    .justify('center')
    .add('cosy:opacity-0', 'cosy:pointer-events-none')
    .add('cosy:transition-opacity', 'cosy:duration-200', 'cosy:ease-in-out')
    .add(className || '')
    .build();

const backdropClass = cn()
    .add('cosy:absolute', 'cosy:inset-0')
    .add('cosy:bg-base-200/80', 'cosy:backdrop-blur-sm')
    .build();

const dialogContentClass = cn()
    .add('cosy:relative', 'cosy:bg-base-100')
    .add('cosy:rounded-xl', 'cosy:shadow-lg')
    .add('cosy:w-[400px]')
    .add('cosy:transform', 'cosy:transition-all')
    .build();

const contentClass = cn().add('cosy:p-6').build();

const textClass = cn().add('cosy:text-base-content').build();

const buttonAreaClass = cn()
    .flex()
    .add('cosy:border-t', 'cosy:border-base-300')
    .build();

const buttonClass = cn()
    .add('cosy:btn', 'cosy:btn-ghost')
    .add('cosy:flex-1')
    .add('cosy:rounded-none', 'cosy:rounded-b-xl')
    .build();
---

<div id={id} class={dialogClass} data-alert-dialog>
    <!-- 背景遮罩 -->
    <div class={backdropClass} data-alert-dialog-backdrop></div>

    <!-- 对话框 -->
    <div class={dialogContentClass}>
        <!-- 内容区域 -->
        <div class={contentClass}>
            <p class={textClass}>
                {message}
            </p>
        </div>

        <!-- 按钮区域 -->
        <div class={buttonAreaClass}>
            <button class={buttonClass} data-alert-dialog-close>
                {t('confirm')}
            </button>
        </div>
    </div>
</div>

<script>
    // 获取所有对话框元素
    const dialogs = document.querySelectorAll('[data-alert-dialog]');

    // 为每个对话框添加事件监听
    dialogs.forEach((dialog) => {
        const backdrop = dialog.querySelector('[data-alert-dialog-backdrop]');
        const closeButton = dialog.querySelector('[data-alert-dialog-close]');

        // 显示对话框
        const showDialog = () => {
            dialog.classList.remove(
                'cosy:opacity-0',
                'cosy:pointer-events-none',
            );
            dialog.classList.add(
                'cosy:opacity-100',
                'cosy:pointer-events-auto',
            );
        };

        // 隐藏对话框
        const hideDialog = () => {
            dialog.classList.remove(
                'cosy:opacity-100',
                'cosy:pointer-events-auto',
            );
            dialog.classList.add('cosy:opacity-0', 'cosy:pointer-events-none');
        };

        // 点击背景关闭
        backdrop?.addEventListener('click', hideDialog);

        // 点击按钮关闭
        closeButton?.addEventListener('click', hideDialog);

        // 将显示方法暴露到全局，方便外部调用
        (window as any).showAlertDialog = (dialogId: string) => {
            const targetDialog = document.getElementById(dialogId);
            if (targetDialog) {
                targetDialog.classList.remove(
                    'cosy:opacity-0',
                    'cosy:pointer-events-none',
                );
                targetDialog.classList.add(
                    'cosy:opacity-100',
                    'cosy:pointer-events-auto',
                );
            }
        };
    });
</script>
