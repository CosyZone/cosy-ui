---
/**
 * @component ImageRow
 * @description 图片行组件，用于展示一行图片，基于 Container 组件，支持丰富的背景配置
 * @usage
 * ```astro
 * <ImageRow
 *   images={[
 *     { src: '/image1.jpg', alt: '图片1' },
 *     { src: 'https://example.com/image2.jpg', alt: '图片2' }
 *   ]}
 *   gap="md"
 *   background="primary/10"
 *   containerRounded="lg"
 * />
 * ```
 * @props
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体
 * @prop {boolean} [border=false] - 是否显示边框
 * @prop {string} [class] - 自定义 CSS 类名
 * @prop {string} [containerRounded='none'] - 容器圆角，可选值：none、sm、md、lg、xl、2xl、3xl、full
 * @prop {boolean} [showNavigation=true] - 是否显示左右导航按钮
 * @prop {string} [gap='md'] - 图片间距，可选值：none、xs、sm、md、lg、xl
 * @prop {string} [hover='scale'] - 悬停效果，可选值：none、scale、brightness、blur
 * @prop {IImageItem[]} images - 图片数组
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl、2xl、3xl、4xl
 * @prop {string} [rounded='md'] - 图片圆角，可选值：none、sm、md、lg、xl、2xl、3xl、full
 * @prop {string} [shadow='md'] - 图片阴影，可选值：none、sm、md、lg、xl、2xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full
 * @slots
 * @slot default - 图片内容
 */
import '../../style.ts';
import type { IImageItem } from './types';
import type {
  BackgroundColor,
  Size,
  PaddingSize,
  MarginSize,
  RoundedSize,
  GapSize,
  ShadowSize,
  HoverEffect,
} from '../../src/common';
import {
  gapClasses,
  roundedClasses,
  shadowClasses,
  hoverClasses,
} from '../../src/common';
import Container from '../container/Container.astro';
import Image from '../image/Image.astro';
import ChevronLeftIcon from '../icons/ChevronLeftIcon.astro';
import ChevronRightIcon from '../icons/ChevronRightIcon.astro';

interface Props {
  images: IImageItem[];
  gap?: GapSize;
  rounded?: RoundedSize;
  shadow?: ShadowSize;
  hover?: HoverEffect;
  background?: BackgroundColor;
  padding?: PaddingSize;
  margin?: MarginSize;
  border?: boolean;
  width?: Size;
  containerRounded?: RoundedSize;
  showNavigation?: boolean;
  class?: string;
}

const {
  images,
  gap = 'md',
  rounded = 'md',
  shadow = 'md',
  hover = 'scale',
  background,
  padding = 'md',
  margin = 'none',
  border = false,
  width = 'md',
  containerRounded = 'none',
  showNavigation = true,
  class: className = '',
} = Astro.props;

const gapClass = gapClasses[gap] || '';
const roundedClass = roundedClasses[rounded] || '';
const shadowClass = shadowClasses[shadow] || '';
const hoverClass = hoverClasses[hover] || '';

// 生成容器类名
const getContainerClass = () => {
  const baseClass = 'image-row-container';
  const gapClassValue = gapClass;
  const customClass = className;

  return `${baseClass} ${gapClassValue} ${customClass}`.trim();
};

// 生成图片容器类名
const getImageClass = (index: number) => {
  const baseClass = 'image-row-item';
  return baseClass;
};
---

<Container
  background={background}
  padding={padding}
  margin={margin}
  border={border}
  width={width}
  rounded={containerRounded}
  class={className}>
  <div class="image-row-wrapper">
    {
      showNavigation && images.length > 1 && (
        <button
          class="image-row-nav-btn image-row-nav-prev"
          onclick="window.scrollImageRow(this, 'prev')"
          aria-label="上一张图片"
          disabled>
          <ChevronLeftIcon size="20px" />
        </button>
      )
    }

    <div class={getContainerClass()}>
      {
        images.map((image, index) => (
          <div class={getImageClass(index)}>
            <Image
              src={image.src}
              alt={image.alt}
              width={image.width}
              height={image.height}
              loading={image.loading || 'lazy'}
              rounded={rounded}
              shadow={shadow}
              hover={hover}
              objectFit="cover"
              class="cosy:w-full cosy:h-full"
            />
            {image.caption && (
              <div class="image-row-caption">
                <p class="cosy:text-sm cosy:text-gray-600 cosy:mt-2 cosy:text-center">
                  {image.caption}
                </p>
              </div>
            )}
          </div>
        ))
      }
    </div>

    {
      showNavigation && images.length > 1 && (
        <button
          class="image-row-nav-btn image-row-nav-next"
          onclick="window.scrollImageRow(this, 'next')"
          aria-label="下一张图片">
          <ChevronRightIcon size="20px" />
        </button>
      )
    }
  </div>
</Container>

<style>
  .image-row-wrapper {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .image-row-container {
    display: flex;
    align-items: center;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    flex: 1;
  }

  .image-row-container::-webkit-scrollbar {
    display: none;
  }

  .image-row-item {
    position: relative;
    overflow: hidden;
    flex: 0 0 auto;
    width: 200px;
    height: 150px;
  }

  .image-row-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    padding: 0.5rem;
    color: white;
  }

  .image-row-caption p {
    color: white !important;
    margin: 0 !important;
  }

  /* 导航按钮样式 */
  .image-row-nav-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.9);
    color: rgba(0, 0, 0, 0.7);
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    flex-shrink: 0;
  }

  .image-row-nav-btn:hover:not(:disabled) {
    background-color: rgba(255, 255, 255, 1);
    color: rgba(0, 0, 0, 0.9);
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .image-row-nav-btn:disabled {
    opacity: 0.3;
    cursor: not-allowed;
    transform: none;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .image-row-item {
      width: 150px;
      height: 120px;
    }

    .image-row-nav-btn {
      width: 36px;
      height: 36px;
    }

    .image-row-wrapper {
      gap: 8px;
    }
  }

  @media (max-width: 480px) {
    .image-row-item {
      width: 120px;
      height: 100px;
    }

    .image-row-nav-btn {
      width: 32px;
      height: 32px;
    }

    .image-row-wrapper {
      gap: 6px;
    }
  }
</style>

<script>
  // 声明全局函数类型
  declare global {
    interface Window {
      scrollImageRow: (button: HTMLElement, direction: 'prev' | 'next') => void;
    }
  }

  // 左右导航功能
  window.scrollImageRow = function (
    button: HTMLElement,
    direction: 'prev' | 'next'
  ) {
    // 从导航按钮向上查找，找到包含 .image-row-container 的容器
    const wrapper = button.parentElement;
    const container = wrapper?.querySelector(
      '.image-row-container'
    ) as HTMLElement;

    if (!container || !wrapper) return;

    const imageWidth = 200; // 图片宽度
    const currentScrollLeft = container.scrollLeft;
    const maxScrollLeft = container.scrollWidth - container.clientWidth;

    let newScrollLeft = currentScrollLeft;

    if (direction === 'prev') {
      newScrollLeft = Math.max(0, currentScrollLeft - imageWidth);
    } else {
      newScrollLeft = Math.min(maxScrollLeft, currentScrollLeft + imageWidth);
    }

    container.scrollTo({
      left: newScrollLeft,
      behavior: 'smooth',
    });

    // 更新按钮状态
    setTimeout(() => {
      updateNavigationButtons(wrapper as HTMLElement);
    }, 300);
  };

  // 更新导航按钮状态
  function updateNavigationButtons(wrapper: HTMLElement) {
    const container = wrapper.querySelector(
      '.image-row-container'
    ) as HTMLElement;
    const prevBtn = wrapper.querySelector(
      '.image-row-nav-prev'
    ) as HTMLButtonElement;
    const nextBtn = wrapper.querySelector(
      '.image-row-nav-next'
    ) as HTMLButtonElement;

    if (!container || !prevBtn || !nextBtn) return;

    const currentScrollLeft = container.scrollLeft;
    const maxScrollLeft = container.scrollWidth - container.clientWidth;

    // 更新前一个按钮状态
    prevBtn.disabled = currentScrollLeft <= 0;

    // 更新下一个按钮状态
    nextBtn.disabled = currentScrollLeft >= maxScrollLeft - 1; // -1 为了处理浮点数精度问题
  }

  // 初始化单个图片行的导航功能
  function initImageRowNavigation(wrapper: HTMLElement) {
    const container = wrapper.querySelector(
      '.image-row-container'
    ) as HTMLElement;

    if (!container) return;

    // 监听滚动事件，更新按钮状态
    container.addEventListener('scroll', () => {
      updateNavigationButtons(wrapper);
    });

    // 监听窗口大小变化
    window.addEventListener('resize', () => {
      setTimeout(() => {
        updateNavigationButtons(wrapper);
      }, 100);
    });

    // 初始检查
    setTimeout(() => {
      updateNavigationButtons(wrapper);
    }, 100);
  }

  // 初始化所有图片行导航
  function initAllImageRowNavigations() {
    const imageRows = document.querySelectorAll('.image-row-wrapper');
    imageRows.forEach((wrapper) =>
      initImageRowNavigation(wrapper as HTMLElement)
    );
  }

  // 页面加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllImageRowNavigations);
  } else {
    initAllImageRowNavigations();
  }

  // 监听 Astro 路由变化
  document.addEventListener('astro:page-load', initAllImageRowNavigations);

  // 监听 DOM 变化
  const observer = new MutationObserver((mutations) => {
    let shouldReinit = false;
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            if (
              element.querySelector?.('.image-row-wrapper') ||
              element.classList?.contains('image-row-wrapper')
            ) {
              shouldReinit = true;
            }
          }
        });
      }
    });

    if (shouldReinit) {
      setTimeout(initAllImageRowNavigations, 100);
    }
  });

  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>
