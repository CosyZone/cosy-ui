---
/**
 * @component ImageRow
 * @description 图片行组件，用于展示一行图片，基于 Container 组件，支持丰富的背景配置
 * @usage
 * ```astro
 * <ImageRow
 *   images={[
 *     { src: '/image1.jpg', alt: '图片1' },
 *     { src: '/image2.jpg', alt: '图片2' }
 *   ]}
 *   gap="md"
 *   background="primary/10"
 *   containerRounded="lg"
 * />
 * ```
 * @props
 * @prop {string} [background] - 背景色类型，支持所有 Tailwind 背景色和透明度变体
 * @prop {boolean} [border=false] - 是否显示边框
 * @prop {string} [class] - 自定义 CSS 类名
 * @prop {string} [containerRounded='none'] - 容器圆角，可选值：none、sm、md、lg、xl、2xl、3xl、full
 * @prop {string} [arrowVariant='ghost'] - 箭头按钮样式变体，可选值：ghost、outline、primary、secondary
 * @prop {boolean} [showArrows=false] - 是否显示左右导航箭头
 * @prop {boolean} [showDots=true] - 是否显示底部点指示器
 * @prop {string} [gap='md'] - 图片间距，可选值：none、xs、sm、md、lg、xl
 * @prop {string} [hover='scale'] - 悬停效果，可选值：none、scale、brightness、blur
 * @prop {ImageItem[]} images - 图片数组
 * @prop {string} [margin='none'] - 外边距大小，可选值：none、xs、sm、md、lg、xl、2xl、3xl、4xl、5xl、6xl
 * @prop {string} [padding='md'] - 内边距大小，可选值：none、sm、md、lg、xl、2xl、3xl、4xl
 * @prop {string} [rounded='md'] - 图片圆角，可选值：none、sm、md、lg、xl、2xl、3xl、full
 * @prop {string} [shadow='md'] - 图片阴影，可选值：none、sm、md、lg、xl、2xl
 * @prop {string} [width='md'] - 容器宽度，可选值：xs、sm、md、lg、xl、full
 * @slots
 * @slot default - 图片内容
 */
import '../../style.ts';
import type { ImageItem } from './types';
import type {
  BackgroundColor,
  Size,
  PaddingSize,
  MarginSize,
  RoundedSize,
  GapSize,
  ShadowSize,
  HoverEffect,
} from '../../src/common';
import {
  gapClasses,
  roundedClasses,
  shadowClasses,
  hoverClasses,
} from '../../src/common';
import Container from '../container/Container.astro';
import ImageRowArrowLeft from './ImageRowArrowLeft.astro';
import ImageRowArrowRight from './ImageRowArrowRight.astro';
import ImageRowDots from './ImageRowDots.astro';

interface Props {
  images: ImageItem[];
  gap?: GapSize;
  rounded?: RoundedSize;
  shadow?: ShadowSize;
  hover?: HoverEffect;
  background?: BackgroundColor;
  padding?: PaddingSize;
  margin?: MarginSize;
  border?: boolean;
  width?: Size;
  containerRounded?: RoundedSize;
  showArrows?: boolean;
  showDots?: boolean;
  arrowVariant?: 'ghost' | 'outline' | 'primary' | 'secondary';
  class?: string;
}

const {
  images,
  gap = 'md',
  rounded = 'md',
  shadow = 'md',
  hover = 'scale',
  background,
  padding = 'md',
  margin = 'none',
  border = false,
  width = 'md',
  containerRounded = 'none',
  showArrows = false,
  showDots = true,
  arrowVariant = 'ghost',
  class: className = '',
} = Astro.props;

const gapClass = gapClasses[gap] || '';
const roundedClass = roundedClasses[rounded] || '';
const shadowClass = shadowClasses[shadow] || '';
const hoverClass = hoverClasses[hover] || '';

// 生成容器类名
const getContainerClass = () => {
  const baseClass = 'image-row-container';
  const gapClassValue = gapClass;
  const customClass = className;

  return `${baseClass} ${gapClassValue} ${customClass}`.trim();
};

// 生成图片类名
const getImageClass = (index: number) => {
  const baseClass = 'image-row-item';
  const roundedClassValue = roundedClass;
  const shadowClassValue = shadowClass;
  const hoverClassValue = hoverClass;

  return `${baseClass} ${roundedClassValue} ${shadowClassValue} ${hoverClassValue}`.trim();
};
---

<Container
  background={background}
  padding={padding}
  margin={margin}
  border={border}
  width={width}
  rounded={containerRounded}
  class={className}>
  <div class="image-row-wrapper">
    {showArrows && <ImageRowArrowLeft variant={arrowVariant} />}

    <div class={getContainerClass()}>
      {
        images.map((image, index) => (
          <div class={getImageClass(index)}>
            <img
              src={image.src}
              alt={image.alt}
              width={image.width}
              height={image.height}
              loading={image.loading || 'lazy'}
              class="cosy:w-full cosy:h-full cosy:object-cover"
            />
            {image.caption && (
              <div class="image-row-caption">
                <p class="cosy:text-sm cosy:text-gray-600 cosy:mt-2 cosy:text-center">
                  {image.caption}
                </p>
              </div>
            )}
          </div>
        ))
      }
    </div>

    {showArrows && <ImageRowArrowRight variant={arrowVariant} />}
  </div>

  {showDots && <ImageRowDots totalImages={images.length} />}
</Container>

<style>
  .image-row-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }

  .image-row-container {
    display: flex;
    align-items: center;
    overflow-x: auto;
    scrollbar-width: none;
    -ms-overflow-style: none;
    flex: 1;
  }

  .image-row-container::-webkit-scrollbar {
    display: none;
  }

  .image-row-item {
    position: relative;
    overflow: hidden;
    flex: 0 0 auto;
    width: 200px;
    height: 150px;
  }

  .image-row-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    padding: 0.5rem;
    color: white;
  }

  .image-row-caption p {
    color: white !important;
    margin: 0 !important;
  }

  /* 箭头按钮样式 */
  .image-row-arrow {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    opacity: 0.8;
    transition: opacity 0.2s ease;
  }

  .image-row-arrow:hover {
    opacity: 1;
  }

  .image-row-arrow-left {
    left: 8px;
  }

  .image-row-arrow-right {
    right: 8px;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .image-row-item {
      width: 150px;
      height: 120px;
    }

    .image-row-arrow {
      display: none;
    }
  }

  @media (max-width: 480px) {
    .image-row-item {
      width: 120px;
      height: 100px;
    }
  }
</style>

<script>
  // 声明全局函数类型
  declare global {
    interface Window {
      scrollImageRow: (button: HTMLElement, direction: string) => void;
    }
  }

  // 滚动图片行的函数
  window.scrollImageRow = function (button: HTMLElement, direction: string) {
    const wrapper = button.closest('.image-row-wrapper') as HTMLElement;
    const container = wrapper?.querySelector(
      '.image-row-container'
    ) as HTMLElement;

    if (!container) return;

    const scrollAmount = 200; // 每次滚动的距离
    const currentScroll = container.scrollLeft;

    if (direction === 'left') {
      container.scrollTo({
        left: currentScroll - scrollAmount,
        behavior: 'smooth',
      });
    } else if (direction === 'right') {
      container.scrollTo({
        left: currentScroll + scrollAmount,
        behavior: 'smooth',
      });
    }
  };

  // 初始化单个图片行的箭头功能
  function initImageRowArrows(wrapper: HTMLElement) {
    const container = wrapper.querySelector(
      '.image-row-container'
    ) as HTMLElement;
    const leftArrow = wrapper.querySelector(
      '.image-row-arrow-left'
    ) as HTMLElement;
    const rightArrow = wrapper.querySelector(
      '.image-row-arrow-right'
    ) as HTMLElement;
    const dotsContainer = wrapper.parentElement?.querySelector(
      '.image-row-dots'
    ) as HTMLElement;

    if (!container) return;

    // 检查是否需要显示箭头
    function updateArrowVisibility() {
      if (!leftArrow || !rightArrow) return;

      const isScrollable = container.scrollWidth > container.clientWidth;
      const isAtStart = container.scrollLeft <= 0;
      const isAtEnd =
        container.scrollLeft >=
        container.scrollWidth - container.clientWidth - 1;

      // 只有在可滚动时才显示箭头
      if (isScrollable) {
        leftArrow.style.display = isAtStart ? 'none' : 'block';
        rightArrow.style.display = isAtEnd ? 'none' : 'block';
      } else {
        leftArrow.style.display = 'none';
        rightArrow.style.display = 'none';
      }
    }

    // 更新点指示器状态
    function updateDotsVisibility() {
      if (!dotsContainer) return;

      const dots = dotsContainer.querySelectorAll('.image-row-dot');
      const imageWidth = 200; // 图片宽度 + 间距
      const currentIndex = Math.round(container.scrollLeft / imageWidth);

      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('active');
        } else {
          dot.classList.remove('active');
        }
      });
    }

    // 监听滚动事件
    container.addEventListener('scroll', () => {
      updateArrowVisibility();
      updateDotsVisibility();
    });

    // 监听窗口大小变化
    window.addEventListener('resize', () => {
      updateArrowVisibility();
      updateDotsVisibility();
    });

    // 初始检查
    updateArrowVisibility();
    updateDotsVisibility();
  }

  // 初始化所有图片行
  function initAllImageRows() {
    const imageRows = document.querySelectorAll('.image-row-wrapper');
    imageRows.forEach((wrapper) => initImageRowArrows(wrapper as HTMLElement));
  }

  // 页面加载完成后初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAllImageRows);
  } else {
    initAllImageRows();
  }

  // 监听 Astro 路由变化（如果使用客户端路由）
  document.addEventListener('astro:page-load', initAllImageRows);

  // 监听 DOM 变化（MutationObserver 作为备用方案）
  const observer = new MutationObserver((mutations) => {
    let shouldReinit = false;
    mutations.forEach((mutation) => {
      if (mutation.type === 'childList') {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            if (
              element.querySelector?.('.image-row-wrapper') ||
              element.classList?.contains('image-row-wrapper')
            ) {
              shouldReinit = true;
            }
          }
        });
      }
    });

    if (shouldReinit) {
      // 延迟执行，确保 DOM 完全更新
      setTimeout(initAllImageRows, 100);
    }
  });

  // 开始观察整个文档的变化
  observer.observe(document.body, {
    childList: true,
    subtree: true,
  });
</script>
