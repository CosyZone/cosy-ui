---
/**
 * @component Images
 * @description 图片展示组件，用于展示一组图片，支持多种布局和样式
 * @usage
 * ```astro
 * <Images
 *   images={[
 *     { src: '/image1.jpg', alt: '图片1' },
 *     { src: '/image2.jpg', alt: '图片2' }
 *   ]}
 *   layout="grid"
 *   columns={2}
 * />
 * ```
 * @props
 * @prop {ImageItem[]} images - 图片数组
 * @prop {string} [layout='grid'] - 布局方式，可选值：grid、masonry、carousel、stack
 * @prop {number} [columns=3] - 网格布局的列数，当 layout 为 grid 时有效
 * @prop {string} [gap='md'] - 图片间距，可选值：none、xs、sm、md、lg、xl
 * @prop {string} [rounded='md'] - 图片圆角，可选值：none、sm、md、lg、xl、2xl、3xl、full
 * @prop {string} [shadow='md'] - 图片阴影，可选值：none、sm、md、lg、xl、2xl
 * @prop {string} [hover='scale'] - 悬停效果，可选值：none、scale、brightness、blur
 * @prop {string} [class] - 自定义 CSS 类名
 * @slots
 * @slot default - 图片内容
 */
import '../../style.ts';
import type { ImageItem, ImagesProps } from './types';
import {
  getBackgroundClass,
  type BackgroundColor,
} from '../../src/common/backgrounds';

interface Props extends ImagesProps {
  images: ImageItem[];
  layout?: 'grid' | 'masonry' | 'carousel' | 'stack';
  columns?: number;
  gap?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
  rounded?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | 'full';
  shadow?: 'none' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';
  hover?: 'none' | 'scale' | 'brightness' | 'blur';
  class?: string;
}

const {
  images,
  layout = 'grid',
  columns = 3,
  gap = 'md',
  rounded = 'md',
  shadow = 'md',
  hover = 'scale',
  class: className = '',
} = Astro.props;

// 间距样式映射
const gapClassMap = {
  none: '',
  xs: 'cosy:gap-1',
  sm: 'cosy:gap-2',
  md: 'cosy:gap-4',
  lg: 'cosy:gap-6',
  xl: 'cosy:gap-8',
} as const;

// 圆角样式映射
const roundedClassMap = {
  none: '',
  sm: 'cosy:rounded-sm',
  md: 'cosy:rounded-md',
  lg: 'cosy:rounded-lg',
  xl: 'cosy:rounded-xl',
  '2xl': 'cosy:rounded-2xl',
  '3xl': 'cosy:rounded-3xl',
  full: 'cosy:rounded-full',
} as const;

// 阴影样式映射
const shadowClassMap = {
  none: '',
  sm: 'cosy:shadow-sm',
  md: 'cosy:shadow-md',
  lg: 'cosy:shadow-lg',
  xl: 'cosy:shadow-xl',
  '2xl': 'cosy:shadow-2xl',
} as const;

// 悬停效果样式映射
const hoverClassMap = {
  none: '',
  scale: 'cosy:hover:scale-105 cosy:transition-transform cosy:duration-300',
  brightness: 'cosy:hover:brightness-110 cosy:transition-all cosy:duration-300',
  blur: 'cosy:hover:blur-sm cosy:transition-all cosy:duration-300',
} as const;

const gapClass = gapClassMap[gap as keyof typeof gapClassMap] || '';
const roundedClass =
  roundedClassMap[rounded as keyof typeof roundedClassMap] || '';
const shadowClass = shadowClassMap[shadow as keyof typeof shadowClassMap] || '';
const hoverClass = hoverClassMap[hover as keyof typeof hoverClassMap] || '';

// 根据布局生成容器类名
const getContainerClass = () => {
  const baseClass = 'images-container';
  const layoutClass = `images-${layout}`;
  const gapClassValue = gapClass;
  const customClass = className;

  return `${baseClass} ${layoutClass} ${gapClassValue} ${customClass}`.trim();
};

// 根据布局生成图片类名
const getImageClass = (index: number) => {
  const baseClass = 'images-item';
  const roundedClassValue = roundedClass;
  const shadowClassValue = shadowClass;
  const hoverClassValue = hoverClass;

  return `${baseClass} ${roundedClassValue} ${shadowClassValue} ${hoverClassValue}`.trim();
};
---

<div class={getContainerClass()}>
  {
    images.map((image, index) => (
      <div class={getImageClass(index)}>
        <img
          src={image.src}
          alt={image.alt}
          width={image.width}
          height={image.height}
          loading={image.loading || 'lazy'}
          class="cosy:w-full cosy:h-full cosy:object-cover"
        />
        {image.caption && (
          <div class="images-caption">
            <p class="cosy:text-sm cosy:text-gray-600 cosy:mt-2 cosy:text-center">
              {image.caption}
            </p>
          </div>
        )}
      </div>
    ))
  }
</div>

<style>
  .images-container {
    display: flex;
    flex-wrap: wrap;
  }

  .images-grid {
    display: grid;
    grid-template-columns: repeat(var(--columns, 3), 1fr);
  }

  .images-masonry {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    grid-auto-rows: masonry;
  }

  .images-carousel {
    display: flex;
    overflow-x: auto;
    scroll-snap-type: x mandatory;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .images-carousel::-webkit-scrollbar {
    display: none;
  }

  .images-stack {
    display: flex;
    flex-direction: column;
  }

  .images-item {
    position: relative;
    overflow: hidden;
  }

  .images-grid .images-item {
    aspect-ratio: 1;
  }

  .images-masonry .images-item {
    break-inside: avoid;
  }

  .images-carousel .images-item {
    flex: 0 0 auto;
    width: 300px;
    scroll-snap-align: start;
  }

  .images-stack .images-item {
    width: 100%;
    margin-bottom: 1rem;
  }

  .images-stack .images-item:last-child {
    margin-bottom: 0;
  }

  .images-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.7));
    padding: 1rem;
    color: white;
  }

  .images-caption p {
    color: white !important;
    margin: 0 !important;
  }

  /* 响应式设计 */
  @media (max-width: 768px) {
    .images-grid {
      grid-template-columns: repeat(2, 1fr);
    }

    .images-carousel .images-item {
      width: 250px;
    }
  }

  @media (max-width: 480px) {
    .images-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // 设置 CSS 变量用于列数
  const container = document.querySelector('.images-container');
  if (container && container.classList.contains('images-grid')) {
    container.style.setProperty('--columns', columns.toString());
  }
</script>
