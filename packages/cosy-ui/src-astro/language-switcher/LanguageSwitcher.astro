---


/**
 * @component LanguageSwitcher
 *
 * @description
 * LanguageSwitcher 组件提供一个语言切换下拉菜单，支持多语言网站的语言切换功能。
 * 组件会自动处理 URL 路径，确保在切换语言时保留当前页面路径。
 *
 * @props
 * - astroI18n - 完整的 astro:i18n 模块
 * - class - 自定义CSS类名
 */

import { cn } from '../../src/class';
import { ChevronDownIcon, GlobeIcon } from '../icons';
import { Link } from '../link';
import { ListItem } from '../list';
import {
    checkSwitcherRenderState,
    generateSwitcherLinks,
    type IAstroI18n,
    type SwitcherLink,
} from './util';

interface Props {
    /**
     * 完整的 astro:i18n 模块
     */
    astroI18n?: IAstroI18n;

    /**
     * 自定义类名
     */
    class?: string;
}

const { astroI18n, class: className = '' } = Astro.props;

// 检查渲染状态
const renderState = checkSwitcherRenderState(Astro.currentLocale, astroI18n);

// 输出警告信息
if (renderState.warnings) {
    renderState.warnings.forEach((warning) => {
        console.warn(warning);
    });
}

let links: SwitcherLink[] = [];

// 如果应该渲染，生成切换链接
if (renderState.shouldRender && Astro.currentLocale && astroI18n) {
    try {
        links = generateSwitcherLinks(
            astroI18n,
            Astro.currentLocale,
            Astro.url.pathname
        );
    } catch (error) {
        // 如果生成链接失败，设置为不渲染
        renderState.shouldRender = false;
    }
}

// 使用 classBuilder 构建类名
const dropdownClass = cn()
    .add('cosy:dropdown', 'cosy:dropdown-end')
    .add(className || '')
    .build();

const buttonClass = cn()
    .add('cosy:btn', 'cosy:btn-ghost') // 保留：DaisyUI 组件类名
    .build();

const iconClass = cn()
    .w(4)
    .h(4)
    .mr(1)
    .build();

const spanClass = cn()
    .mr(1)
    .hidden()
    .add('cosy:sm:inline') // 保留：响应式类名
    .build();

const chevronClass = cn()
    .w(4)
    .h(4)
    .build();

const ulClass = cn()
    .z(1)
    .bg('base-100')
    .shadow()
    .p(2)
    .add('cosy:rounded-box', 'cosy:w-32', 'cosy:dropdown-content', 'cosy:menu') // 保留：DaisyUI 组件类名
    .build();
---

{
    renderState.shouldRender && (
        <div class={dropdownClass}>
            <div tabindex="0" role="button" class={buttonClass}>
                <GlobeIcon size="16px" class={iconClass} />
                <span class={spanClass}>
                    {renderState.currentLanguageName}
                </span>
                <ChevronDownIcon size="16px" class={chevronClass} />
            </div>
            <ul
                tabindex="0"
                class={ulClass}>
                {links.map((link) => (
                    <ListItem>
                        <Link
                            href={link.url}
                            active={Astro.currentLocale === link.locale}>
                            {link.name}
                        </Link>
                    </ListItem>
                ))}
            </ul>
        </div>
    )
}
