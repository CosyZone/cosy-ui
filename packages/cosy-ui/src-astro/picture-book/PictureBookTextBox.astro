---
/**
 * @component PictureBookTextBox
 *
 * @description
 * 文字容器，按百分比在父容器中绝对定位。
 * 支持遮罩背景、背后虚化、圆角与文本阴影以提升可读性。
 *
 * @usage
 * ```astro
 * <PictureBookTextBox top={58} left={52} width={40}
 *   bgColor="rgba(255,255,255,0.75)" backdropBlur={4} paddingPx={12} roundedPx={12} textShadow>
 *   文字内容…
 * </PictureBookTextBox>
 * ```
 *
 * @props
 * - bottom?: number - 绝对定位 bottom（百分比）
 * - left?: number - 绝对定位 left（百分比）
 * - right?: number - 绝对定位 right（百分比）
 * - top?: number - 绝对定位 top（百分比）
 * - width?: number - 宽度（百分比）
 * - heightPx?: number - 高度（像素）。不设置则根据内容自适应高度
 * - zIndex?: number - 层叠顺序，默认 10
 * - bgColor?: string - 半透明背景色
 * - backdropBlur?: number - 背景虚化像素（backdrop-filter: blur(px)）
 * - paddingPx?: number - 内边距（px）
 * - roundedPx?: number - 圆角（px）
 * - textShadow?: boolean - 是否启用文字阴影
 *
 * @slots
 * - default: 文本内容插槽
 */

import '../../style.ts';

export interface IPictureBookTextBoxProps {
  top?: number;
  left?: number;
  right?: number;
  bottom?: number;
  width?: number;
  heightPx?: number;
  zIndex?: number;
  bgColor?: string;
  backdropBlur?: number;
  paddingPx?: number;
  roundedPx?: number;
  textShadow?: boolean;
}

const props = Astro.props as IPictureBookTextBoxProps;

const pct = (v?: number) => (typeof v === 'number' ? `${v}%` : undefined);

const styleList: string = [
  'position: absolute',
  `z-index: ${props.zIndex ?? 10}`,
  `padding: ${props.paddingPx ? `${props.paddingPx}px` : 0}`,
  `border-radius: ${props.roundedPx ? `${props.roundedPx}px` : 0}`,
  props.bgColor ? `background: ${props.bgColor}` : '',
  typeof props.backdropBlur === 'number' && props.backdropBlur > 0
    ? `backdrop-filter: blur(${props.backdropBlur}px)`
    : '',
  props.top !== undefined ? `top: ${pct(props.top)}` : '',
  props.left !== undefined ? `left: ${pct(props.left)}` : '',
  props.right !== undefined ? `right: ${pct(props.right)}` : '',
  props.bottom !== undefined ? `bottom: ${pct(props.bottom)}` : '',
  props.width !== undefined ? `width: ${pct(props.width)}` : '',
  typeof props.heightPx === 'number' ? `height: ${props.heightPx}px` : '',
]
  .filter(Boolean)
  .join('; ');
---

<div style={styleList} class="cosy:pointer-events-auto">
  <slot />

  <style>
    :global(.text-shadow) {
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);
    }
  </style>
</div>
