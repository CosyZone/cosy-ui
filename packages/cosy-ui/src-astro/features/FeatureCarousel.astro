---

import Button from "../button/Button.astro";
import { ChevronLeftIcon, ChevronRightIcon } from "../icons";
import type { ImageSource } from "../image";
import FeatureCard from "./FeatureCard.astro";

/**
 * @component FeatureCarousel
 * @description 特性轮播组件，横向滑动显示多个特性卡片
 * @example
 * <FeatureCarousel
 *   features={[
 *     {
 *       title: "性能和电池续航",
 *       description: "跑得快,跑得久。",
 *       background: "linear-gradient(135deg, #1e3a8a 0%, #1e40af 100%)",
 *       image: "https://example.com/image.jpg",
 *       textColor: "white"
 *     }
 *   ]}
 * />
 */

export interface Props {
	features: Array<{
		title: string;
		description: string;
		background: string;
		image?: ImageSource;
		textColor?: string;
	}>;
	class?: string;
}

const { features, class: className } = Astro.props;
---

<div class={`cosy:relative ${className || ''}`}>
  <!-- 特性卡片容器 - 使用原生滚动 -->
  <div
    class="cosy:flex cosy:gap-4 cosy:py-16 cosy:px-4 cosy:overflow-x-auto cosy:scroll-smooth"
    id="feature-cards"
    style="scroll-behavior: smooth; scrollbar-width: none; -ms-overflow-style: none;">
    {
      features.map((feature, index) => (
        <FeatureCard
          title={feature.title}
          description={feature.description}
          background={feature.background}
          image={feature.image}
          textColor={feature.textColor}
        />
      ))
    }
  </div>

  <!-- 导航按钮 - 在下一行 -->
  <div class="cosy:flex cosy:justify-end cosy:gap-2 cosy:my-4">
    <Button
      id="prev-btn"
      variant="neutral"
      shape="circle"
      size="lg"
      aria-label="向左滚动">
      <ChevronLeftIcon size="20px" />
    </Button>
    <Button
      id="next-btn"
      variant="neutral"
      shape="circle"
      size="lg"
      aria-label="向右滚动">
      <ChevronRightIcon size="20px" />
    </Button>
  </div>
</div>

<script>
  // 特性轮播滚动逻辑 - 支持 ClientRouter
  const SCROLL_DISTANCE = 400; // 384px + 16px gap

  function initFeatureCarousel() {
    const cardsContainer = document.getElementById(
      'feature-cards'
    ) as HTMLElement;
    const prevBtn = document.getElementById('prev-btn') as HTMLButtonElement;
    const nextBtn = document.getElementById('next-btn') as HTMLButtonElement;

    if (!cardsContainer || !prevBtn || !nextBtn) {
      return; // 如果元素不存在，退出
    }

    function updateButtonStates() {
      const { scrollLeft, scrollWidth, clientWidth } = cardsContainer;

      // 更新上一个按钮状态
      const isAtStart = scrollLeft <= 0;
      prevBtn.disabled = isAtStart;
      if (isAtStart) {
        prevBtn.classList.add('cosy:opacity-50', 'cosy:cursor-not-allowed');
        prevBtn.classList.remove('cosy:hover:bg-gray-300');
      } else {
        prevBtn.classList.remove('cosy:opacity-50', 'cosy:cursor-not-allowed');
        prevBtn.classList.add('cosy:hover:bg-gray-300');
      }

      // 更新下一个按钮状态
      const isAtEnd = scrollLeft >= scrollWidth - clientWidth - 1; // 1px 容差
      nextBtn.disabled = isAtEnd;
      if (isAtEnd) {
        nextBtn.classList.add('cosy:opacity-50', 'cosy:cursor-not-allowed');
        nextBtn.classList.remove('cosy:hover:bg-gray-300');
      } else {
        nextBtn.classList.remove('cosy:opacity-50', 'cosy:cursor-not-allowed');
        nextBtn.classList.add('cosy:hover:bg-gray-300');
      }
    }

    function scrollLeft() {
      if (cardsContainer) {
        cardsContainer.scrollBy({
          left: -SCROLL_DISTANCE,
          behavior: 'smooth',
        });
      }
    }

    function scrollRight() {
      if (cardsContainer) {
        cardsContainer.scrollBy({
          left: SCROLL_DISTANCE,
          behavior: 'smooth',
        });
      }
    }

    // 移除旧的事件监听器（如果存在）
    prevBtn.removeEventListener('click', scrollLeft);
    nextBtn.removeEventListener('click', scrollRight);
    cardsContainer.removeEventListener('scroll', updateButtonStates);

    // 添加新的事件监听器
    prevBtn.addEventListener('click', scrollLeft);
    nextBtn.addEventListener('click', scrollRight);
    cardsContainer.addEventListener('scroll', updateButtonStates);

    // 初始化按钮状态
    updateButtonStates();
  }

  // 使用事件委托处理按钮点击
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    const prevBtn = target.closest('#prev-btn') as HTMLButtonElement | null;
    const nextBtn = target.closest('#next-btn') as HTMLButtonElement | null;
    const cardsContainer = document.getElementById(
      'feature-cards'
    ) as HTMLElement | null;

    if (prevBtn && cardsContainer) {
      e.preventDefault();
      cardsContainer.scrollBy({
        left: -SCROLL_DISTANCE,
        behavior: 'smooth',
      });
    } else if (nextBtn && cardsContainer) {
      e.preventDefault();
      cardsContainer.scrollBy({
        left: SCROLL_DISTANCE,
        behavior: 'smooth',
      });
    }
  });

  // 键盘导航
  document.addEventListener('keydown', (e) => {
    const cardsContainer = document.getElementById(
      'feature-cards'
    ) as HTMLElement | null;
    if (!cardsContainer) return;

    if (e.key === 'ArrowLeft') {
      e.preventDefault();
      cardsContainer.scrollBy({
        left: -SCROLL_DISTANCE,
        behavior: 'smooth',
      });
    } else if (e.key === 'ArrowRight') {
      e.preventDefault();
      cardsContainer.scrollBy({
        left: SCROLL_DISTANCE,
        behavior: 'smooth',
      });
    }
  });

  // 监听滚动事件更新按钮状态
  document.addEventListener('scroll', (e) => {
    const target = e.target as HTMLElement;
    if (target.id === 'feature-cards') {
      const prevBtn = document.getElementById(
        'prev-btn'
      ) as HTMLButtonElement | null;
      const nextBtn = document.getElementById(
        'next-btn'
      ) as HTMLButtonElement | null;

      if (prevBtn && nextBtn) {
        const { scrollLeft, scrollWidth, clientWidth } = target;

        // 更新上一个按钮状态
        const isAtStart = scrollLeft <= 0;
        prevBtn.disabled = isAtStart;
        if (isAtStart) {
          prevBtn.classList.add('cosy:opacity-50', 'cosy:cursor-not-allowed');
          prevBtn.classList.remove('cosy:hover:bg-gray-300');
        } else {
          prevBtn.classList.remove(
            'cosy:opacity-50',
            'cosy:cursor-not-allowed'
          );
          prevBtn.classList.add('cosy:hover:bg-gray-300');
        }

        // 更新下一个按钮状态
        const isAtEnd = scrollLeft >= scrollWidth - clientWidth - 1;
        nextBtn.disabled = isAtEnd;
        if (isAtEnd) {
          nextBtn.classList.add('cosy:opacity-50', 'cosy:cursor-not-allowed');
          nextBtn.classList.remove('cosy:hover:bg-gray-300');
        } else {
          nextBtn.classList.remove(
            'cosy:opacity-50',
            'cosy:cursor-not-allowed'
          );
          nextBtn.classList.add('cosy:hover:bg-gray-300');
        }
      }
    }
  });

  // 页面加载时初始化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFeatureCarousel);
  } else {
    initFeatureCarousel();
  }

  // 监听页面变化（支持 ClientRouter）
  if (typeof window !== 'undefined') {
    // 监听 astro:page-load 事件
    document.addEventListener('astro:page-load', initFeatureCarousel);

    // 监听 astro:after-swap 事件（如果使用）
    document.addEventListener('astro:after-swap', initFeatureCarousel);
  }
</script>

<style>
  /* 隐藏滚动条 */
  #feature-cards::-webkit-scrollbar {
    display: none;
  }
</style>
