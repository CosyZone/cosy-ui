---
/**
 * @component Alert
 *
 * @description
 * Alert 组件用于向用户显示重要的提示信息，支持多种类型的提示样式和交互效果。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Alert type="info">这是一条信息提示</Alert>
 * ```
 *
 * 带标题：
 * ```astro
 * <Alert type="success" title="操作成功">您的操作已成功完成</Alert>
 * ```
 *
 * 不显示图标：
 * ```astro
 * <Alert type="warning" showIcon={false}>不显示图标的警告</Alert>
 * ```
 *
 * 设置垂直外边距：
 * ```astro
 * <Alert type="info" marginY="md">带垂直外边距的提示</Alert>
 * ```
 *
 * 组合使用：
 * ```astro
 * <Alert
 *   type="error"
 *   title="提交失败"
 *   class="my-custom-class"
 *   marginY="lg"
 * >
 *   请检查表单并重新提交
 * </Alert>
 * ```
 *
 * 自定义操作按钮：
 * ```astro
 * <Alert type="info">
 *   这是带自定义操作的提示
 *   <slot name="action">
 *     <button>操作</button>
 *   </slot>
 * </Alert>
 * ```
 *
 * @props
 * @prop {('info'|'success'|'warning'|'error')} [type='info'] - 提示类型，影响颜色和图标
 * @prop {string} [title] - 提示标题，可选
 * @prop {string} [class] - 自定义 CSS 类名
 * @prop {boolean} [closable=true] - 是否可关闭
 * @prop {boolean} [showIcon=true] - 是否显示图标
 * @prop {('xs'|'sm'|'md'|'lg'|'xl')} [marginY] - 垂直方向外边距大小
 *
 * @slots
 * @slot default - 提示内容
 * @slot action - 自定义操作按钮，显示在 alert 右侧
 */

import '../../style.ts';
import {
  InfoIcon,
  SuccessIcon,
  WarningIcon,
  ErrorIcon,
  CloseIcon,
} from '../../index-astro';

export interface AlertProps {
  type?: 'info' | 'success' | 'warning' | 'error';
  title?: string;
  description?: string;
  class?: string;
  closable?: boolean;
  showIcon?: boolean;
  variant?: 'solid' | 'outline' | 'dash' | 'soft';
  marginY?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
}

const {
  type = 'info',
  title,
  description,
  class: className = '',
  closable = true,
  showIcon = true,
  variant = 'solid',
  marginY,
} = Astro.props as AlertProps;

// 根据 marginY 值设置对应的 CSS 类
const getMarginYClass = (marginY?: string) => {
  switch (marginY) {
    case 'xs':
      return 'cosy:my-1';
    case 'sm':
      return 'cosy:my-2';
    case 'md':
      return 'cosy:my-4';
    case 'lg':
      return 'cosy:my-8';
    case 'xl':
      return 'cosy:my-12';
    default:
      return '';
  }
};

// 组合样式
const alertClass = [
  `cosy:alert-${type}`,
  variant !== 'solid' ? `cosy:alert-${variant}` : '',
  'cosy:alert-horizontal',
  getMarginYClass(marginY),
]
  .filter(Boolean)
  .join(' ');

// 根据类型设置图标组件
const IconComponent = {
  info: InfoIcon,
  success: SuccessIcon,
  warning: WarningIcon,
  error: ErrorIcon,
}[type as 'info' | 'success' | 'warning' | 'error'];
---

<div
  class={`cosy:alert cosy:w-full cosy:flex not-prose ${alertClass} ${className}`}
  role="alert">
  <div
    class="cosy:flex cosy:flex-row cosy:items-center cosy:gap-4 cosy:justify-between cosy:w-full">
    {
      showIcon && (
        <IconComponent class="cosy:btn cosy:btn-sm cosy:btn-ghost cosy:btn-circle" />
      )
    }
    <div
      class="cosy:flex cosy:flex-col cosy:items-start cosy:h-full cosy:flex-1">
      {
        title && (
          <h3 class="cosy:font-bold" style="margin-top: 0 !important">
            {title}
          </h3>
        )
      }
      {
        description && (
          <div class="cosy:text-xs cosy:opacity-80">{description}</div>
        )
      }
      {
        title && (
          <div class="cosy:text-xs">
            <slot />
          </div>
        )
      }
      {!title && <slot />}
    </div>
    <div
      class="cosy:flex cosy:flex-row cosy:items-center cosy:gap-2"
      data-role="actions">
      <slot name="action" />
      {
        closable && (
          <button
            class="cosy:ml-auto cosy:btn cosy:btn-ghost cosy:btn-sm cosy:btn-circle"
            onclick="this.parentElement.parentElement.style.display = 'none';">
            <CloseIcon class="cosy:h-5 cosy:w-5" />
          </button>
        )
      }
    </div>
  </div>
</div>
