---
/**
 * @component Alert
 *
 * @description
 * Alert 组件用于向用户显示重要的提示信息，支持多种类型的提示样式和交互效果。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Alert type="info">这是一条信息提示</Alert>
 * ```
 *
 * 带标题：
 * ```astro
 * <Alert type="success" title="操作成功">您的操作已成功完成</Alert>
 * ```
 *
 * 不显示图标：
 * ```astro
 * <Alert type="warning" showIcon={false}>不显示图标的警告</Alert>
 * ```
 *
 * 设置垂直外边距：
 * ```astro
 * <Alert type="info" marginY="md">带垂直外边距的提示</Alert>
 * ```
 *
 * 组合使用：
 * ```astro
 * <Alert
 *   type="error"
 *   title="提交失败"
 *   class="my-custom-class"
 *   marginY="lg"
 * >
 *   请检查表单并重新提交
 * </Alert>
 * ```
 *
 * 自定义操作按钮：
 * ```astro
 * <Alert type="info">
 *   这是带自定义操作的提示
 *   <slot name="action">
 *     <button>操作</button>
 *   </slot>
 * </Alert>
 * ```
 *
 * @props
 * @prop {string} [class] - 自定义 CSS 类名，用于覆盖默认样式
 * @prop {boolean} [closable=true] - 是否可关闭，设置为 false 时隐藏关闭按钮
 * @prop {string} [description] - 描述文本，显示在标题下方，字体较小且透明度降低
 * @prop {('xs'|'sm'|'md'|'lg'|'xl')} [marginY] - 垂直方向外边距大小，支持预设的尺寸值
 * @prop {boolean} [showIcon=true] - 是否显示图标，设置为 false 时隐藏类型对应的图标
 * @prop {string} [title] - 提示标题，可选，显示为粗体文本
 * @prop {('info'|'success'|'warning'|'error')} [type='info'] - 提示类型，影响颜色和图标，支持 info、success、warning、error 四种类型
 * @prop {('solid'|'outline'|'dash'|'soft')} [variant='solid'] - 样式变体，支持 solid（实心）、outline（描边）、dash（虚线）、soft（柔和）四种风格
 *
 * @slots
 * @slot default - 提示内容，主要文本内容
 * @slot action - 自定义操作按钮，显示在 alert 右侧，适合放置自定义按钮或其他操作
 */

import '../../style.ts';
import type { IAlertProps } from './props';
import { getAlertCombinedClasses } from './class';
import { cn } from '../../src/class';
import {
    InfoIcon,
    SuccessIcon,
    WarningIcon,
    ErrorIcon,
    CloseIcon,
} from '../../index-astro';

// 根据类型设置图标组件
const getIconComponent = (type: string) => {
    const iconComponents = {
        info: InfoIcon,
        success: SuccessIcon,
        warning: WarningIcon,
        error: ErrorIcon,
    };
    return iconComponents[type as keyof typeof iconComponents] || InfoIcon;
};

const props = Astro.props as IAlertProps;

const {
    type = 'info',
    title,
    description,
    class: className = '',
    closable = true,
    showIcon = true,
} = props;

// 获取图标组件
const IconComponent = getIconComponent(type);

// 获取组合类名
const alertClassArray = getAlertCombinedClasses(props);
const alertClass = [...alertClassArray, className].filter(Boolean).join(' ');

// 使用 classBuilder 构建各个部分的类名
const containerClass = cn()
    .flex('row')
    .items('center')
    .gap(4)
    .justify('between')
    .w('full')
    .build();
const contentClass = cn()
    .flex('col')
    .items('start')
    .h('full')
    .add('cosy:flex-1')
    .build();
const actionsClass = cn().flex('row').items('center').gap(2).build();
const titleClass = cn().bold().build();
const descriptionClass = cn().text('xs').opacity(80).build();
const iconBtnClass = cn()
    .add('cosy:btn', 'cosy:btn-ghost', 'cosy:btn-circle', 'cosy:btn-sm')
    .build();
const closeBtnClass = cn()
    .auto()
    .add('cosy:btn', 'cosy:btn-ghost', 'cosy:btn-circle', 'cosy:btn-sm')
    .build();
const iconClass = cn().h(5).w(5).build();

// 导出接口供外部使用
export type { IAlertProps };
---

<div class={alertClass} role="alert">
    <div class={containerClass}>
        {showIcon && <IconComponent class={iconBtnClass} />}
        <div class={contentClass}>
            {
                title && (
                    <h3 class={titleClass} style="margin-top: 0 !important">
                        {title}
                    </h3>
                )
            }
            {description && <div class={descriptionClass}>{description}</div>}
            {
                title && (
                    <div class={cn().text('xs').build()}>
                        <slot />
                    </div>
                )
            }
            {!title && <slot />}
        </div>
        <div class={actionsClass} data-role="actions">
            <slot name="action" />
            {
                closable && (
                    <button
                        class={closeBtnClass}
                        onclick="this.parentElement.parentElement.style.display = 'none';">
                        <CloseIcon class={iconClass} />
                    </button>
                )
            }
        </div>
    </div>
</div>
