---
/**
 * @component MacWindow
 *
 * @description
 * MacWindow 组件模拟 macOS 风格的应用窗口，包含标题栏、工具栏按钮、标签页和状态栏。
 * 适用于创建模拟桌面应用界面或代码编辑器等场景。
 *
 * @usage
 * 基本用法：
 * ```astro
 * <MacWindow title="代码编辑器">
 *   <div>窗口内容</div>
 * </MacWindow>
 * ```
 *
 * 带背景色和宽度：
 * ```astro
 * <MacWindow title="代码编辑器" bgType="primary/10" width="lg">
 *   <div>窗口内容</div>
 * </MacWindow>
 * ```
 *
 * 带标签页和宽度：
 * ```astro
 * <MacWindow
 *   title="设置"
 *   tabs={['通用', '外观', '高级']}
 *   defaultTab="外观"
 *   id="settings-window"
 *   bgType="accent/10"
 *   width="xl"
 * >
 *   <div id="tab-通用">通用设置内容</div>
 *   <div id="tab-外观">外观设置内容</div>
 *   <div id="tab-高级">高级设置内容</div>
 * </MacWindow>
 * ```
 *
 * 带工具栏和状态栏：
 * ```astro
 * <MacWindow title="文件浏览器" bgType="success/10" width="full">
 *   <div slot="toolbar">
 *     <button class="cosy:btn cosy:btn-ghost cosy:btn-sm">
 *       <SearchIcon class="cosy:w-4 cosy:h-4" />
 *     </button>
 *     <button class="cosy:btn cosy:btn-ghost cosy:btn-sm">
 *       <SettingsIcon class="cosy:w-4 cosy:h-4" />
 *     </button>
 *   </div>
 *
 *   <div>窗口内容</div>
 *
 *   <div slot="status">
 *     <div class="cosy:text-xs">就绪</div>
 *     <button class="cosy:btn cosy:btn-ghost cosy:btn-xs">
 *       <InfoIcon class="cosy:w-4 cosy:h-4" />
 *     </button>
 *   </div>
 * </MacWindow>
 * ```
 *
 * @props
 * @prop {String} [height='h-96'] - 窗口高度
 * @prop {String} [width='md'] - 窗口宽度，支持 Container 组件的 width 属性值：none、xs、sm、md、lg、xl、full
 * @prop {String} [title=''] - 窗口标题
 * @prop {Boolean} [withShadow=true] - 是否显示阴影效果
 * @prop {Array} [tabs=[]] - 标签页字符串数组，如 ['标签1', '标签2', '标签3']
 * @prop {String} [defaultTab=''] - 默认选中的标签页
 * @prop {String} [id=''] - 窗口唯一标识符，用于标签页切换
 * @prop {BackgroundColor} [bgType='base-100'] - 背景色类型，支持所有预设背景色和透明度变体，如：base-100、primary、secondary、accent、neutral、info、success、warning、error，以及透明度变体如 primary/10、secondary/20 等。使用通用的背景色系统。
 *
 * @slots
 * @slot default - 窗口主要内容
 * @slot sidebar - 侧边栏内容
 * @slot toolbar - 工具栏内容，位于标题栏右侧
 * @slot status - 状态栏内容，位于窗口底部
 */

import "../../style";
import { AlertDialog } from "../alert-dialog";
import { Container } from "../container";
import type { IMacWindowProps } from "./props";

const {
	height = "h-96",
	width = "md",
	title = "",
	withShadow = true,
	tabs = [],
	defaultTab = "",
	id = "",
	bgType = "base-100",
} = Astro.props as IMacWindowProps;

// 获取背景色类名
const headerBgClass = "cosy:bg-base-200";
const statusBgClass = "cosy:bg-base-200/95";

// 如果没有设置默认标签或默认标签不在tabs中，则选择第一个标签
const activeTab =
	defaultTab && tabs.includes(defaultTab)
		? defaultTab
		: tabs.length > 0
			? tabs[0]
			: "";

// 生成唯一的窗口ID
const windowId = id || `mac-window-${Math.random().toString(36).substr(2, 9)}`;
---

<Container
    background={bgType}
    padding="none"
    centered={true}
    width={width}
    aria-label="MacWindow-Container"
    class={`cosy:flex cosy:relative cosy:rounded-2xl cosy:overflow-hidden ${height} ${withShadow ? 'cosy:shadow-lg' : ''}`}
    data-window-id={windowId}>
    <!-- 窗口控制按钮 -->
    <div
        class={`cosy:absolute cosy:top-0 cosy:left-0 cosy:right-0 cosy:flex cosy:items-center cosy:h-12 cosy:px-4 cosy:border-b cosy:border-base-300 ${headerBgClass}`}>
        <div class="cosy:flex cosy:items-center cosy:space-x-2">
            <div
                class="cosy:w-3 cosy:h-3 cosy:rounded-full cosy:bg-error cosy:cursor-pointer hover:cosy:opacity-80 cosy:transition-opacity"
                onclick="handleCloseWindow('${windowId}')">
            </div>
            <div
                class="cosy:w-3 cosy:h-3 cosy:rounded-full cosy:bg-warning cosy:cursor-pointer hover:cosy:opacity-80 cosy:transition-opacity"
                onclick="handleMinimizeWindow('${windowId}')">
            </div>
            <div
                class="cosy:w-3 cosy:h-3 cosy:rounded-full cosy:bg-success cosy:cursor-pointer hover:cosy:opacity-80 cosy:transition-opacity"
                onclick="handleMaximizeWindow('${windowId}')">
            </div>
        </div>
        <div
            class="cosy:ml-6 cosy:text-sm cosy:font-medium cosy:text-base-content">
            {title}
        </div>

        <!-- 标签选择器 -->
        {
            tabs.length > 0 && (
                <div class="cosy:flex-1 cosy:flex cosy:justify-center">
                    <div class="cosy:inline-flex cosy:rounded-lg cosy:bg-base-300 cosy:p-1">
                        {tabs.map((tab, index) => (
                            <button
                                class={`cosy:px-3 cosy:py-1 cosy:text-sm cosy:rounded-md cosy:transition-colors ${
                                    activeTab === tab
                                        ? 'cosy:bg-base-100 cosy:text-base-content cosy:shadow'
                                        : 'cosy:text-base-content/70 hover:cosy:text-base-content'
                                }`}
                                onclick={`handleTabClick('${windowId}', '${tab}')`}
                                data-tab={tab}>
                                {tab}
                            </button>
                        ))}
                    </div>
                </div>
            )
        }

        <!-- 工具栏插槽 -->
        <div class="cosy:ml-auto cosy:flex cosy:items-center cosy:space-x-2">
            <slot name="toolbar" />
        </div>
    </div>

    <!-- 主要内容区域 -->
    <div class="cosy:flex-1 cosy:flex cosy:flex-col cosy:pt-12 cosy:h-full">
        <div class="cosy:flex cosy:flex-1 cosy:h-full cosy:overflow-hidden">
            <!-- 左侧栏插槽 -->
            <slot name="sidebar" />

            <!-- 主内容插槽 -->
            <slot />
        </div>

        <!-- 底部状态栏 -->
        {
            Astro.slots.status && (
                <div
                    class={`cosy:h-6 cosy:border-t cosy:border-base-300 cosy:flex cosy:items-center cosy:justify-end cosy:px-4 cosy:text-sm ${statusBgClass}`}>
                    <div class="cosy:flex cosy:items-center cosy:space-x-2">
                        <slot name="status" />
                    </div>
                </div>
            )
        }
    </div>
</Container>

<!-- AlertDialog 组件 -->
<AlertDialog id={`${windowId}-alert`} message="" />

<script>
    // 全局函数，用于处理窗口控制按钮点击
    function handleCloseWindow(windowId: string) {
        const alertDialog = document.getElementById(`${windowId}-alert`);
        if (alertDialog) {
            const messageElement = alertDialog.querySelector('[data-message]');
            if (messageElement) {
                messageElement.textContent =
                    '关闭APP窗口（这是演示，不会真实操作）';
            }
            // 触发显示对话框
            const event = new CustomEvent('showAlertDialog', {
                detail: { id: `${windowId}-alert` },
            });
            document.dispatchEvent(event);
        }
    }

    function handleMinimizeWindow(windowId: string) {
        const alertDialog = document.getElementById(`${windowId}-alert`);
        if (alertDialog) {
            const messageElement = alertDialog.querySelector('[data-message]');
            if (messageElement) {
                messageElement.textContent =
                    '最小化窗口（这是演示，不会真实操作）';
            }
            const event = new CustomEvent('showAlertDialog', {
                detail: { id: `${windowId}-alert` },
            });
            document.dispatchEvent(event);
        }
    }

    function handleMaximizeWindow(windowId: string) {
        const alertDialog = document.getElementById(`${windowId}-alert`);
        if (alertDialog) {
            const messageElement = alertDialog.querySelector('[data-message]');
            if (messageElement) {
                messageElement.textContent =
                    '最大化窗口（这是演示，不会真实操作）';
            }
            const event = new CustomEvent('showAlertDialog', {
                detail: { id: `${windowId}-alert` },
            });
            document.dispatchEvent(event);
        }
    }

    // 处理标签点击的函数
    function handleTabClick(windowId: string, tab: string) {
        // 隐藏所有标签内容
        const windowElement = document.querySelector(
            `[data-window-id="${windowId}"]`
        );
        if (windowElement) {
            const tabContents = windowElement.querySelectorAll('[id^="tab-"]');
            tabContents.forEach((content) => {
                (content as HTMLElement).style.display = 'none';
            });

            // 显示选中的标签内容
            const selectedContent = windowElement.querySelector(`#tab-${tab}`);
            if (selectedContent) {
                (selectedContent as HTMLElement).style.display = 'block';
            }

            // 更新标签按钮状态
            const tabButtons = windowElement.querySelectorAll('[data-tab]');
            tabButtons.forEach((button) => {
                const buttonElement = button as HTMLElement;
                if (buttonElement.dataset.tab === tab) {
                    buttonElement.classList.add(
                        'cosy:bg-base-100',
                        'cosy:text-base-content',
                        'cosy:shadow'
                    );
                    buttonElement.classList.remove('cosy:text-base-content/70');
                } else {
                    buttonElement.classList.remove(
                        'cosy:bg-base-100',
                        'cosy:text-base-content',
                        'cosy:shadow'
                    );
                    buttonElement.classList.add('cosy:text-base-content/70');
                }
            });
        }
    }

    // 将函数暴露到全局作用域
    (window as any).handleCloseWindow = handleCloseWindow;
    (window as any).handleMinimizeWindow = handleMinimizeWindow;
    (window as any).handleMaximizeWindow = handleMaximizeWindow;
    (window as any).handleTabClick = handleTabClick;

    // 初始化标签页显示状态
    document.addEventListener('DOMContentLoaded', () => {
        const windows = document.querySelectorAll('[data-window-id]');
        windows.forEach((windowElement) => {
            const windowId = windowElement.getAttribute('data-window-id');
            if (windowId) {
                // 查找第一个标签按钮作为默认激活的标签
                const firstTabButton =
                    windowElement.querySelector('[data-tab]');
                if (firstTabButton) {
                    const activeTab = firstTabButton.getAttribute('data-tab');
                    if (activeTab) {
                        // 隐藏所有标签内容
                        const tabContents =
                            windowElement.querySelectorAll('[id^="tab-"]');
                        tabContents.forEach((content) => {
                            (content as HTMLElement).style.display = 'none';
                        });

                        // 显示默认标签内容
                        const defaultContent = windowElement.querySelector(
                            `#tab-${activeTab}`
                        );
                        if (defaultContent) {
                            (defaultContent as HTMLElement).style.display =
                                'block';
                        }
                    }
                }
            }
        });
    });
</script>
