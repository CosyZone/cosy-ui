---
/**
 * @component CodeContainer
 *
 * @description
 * 用于展示代码示例的容器组件，提供样式隔离功能防止内外样式相互影响。
 * 支持样式重置模式。
 * 使用时只需在默认slot中传入内容，并为每个示例设置对应的id (tab-1, tab-2等)
 *
 * @design
 * 设计理念：
 * 1. 样式隔离 - 防止外部样式影响内部组件展示
 * 2. 代码预览 - 支持预览和代码视图切换
 * 3. 多标签页 - 支持多个示例的标签页展示
 * 4. 样式重置 - 重置内部样式，避免样式冲突
 *
 * 视觉特点：
 * - 卡片式设计：清晰的视觉层次
 * - 渐变背景：美观的预览区域
 * - 标签页切换：直观的示例切换
 * - 代码高亮：清晰的代码展示
 *
 * @usage
 * 基础用法：
 * ```astro
 * <CodeContainer codes={[code1, code2]}>
 *   <div id="tab-1">
 *     <Alert type="info">这是第一个示例</Alert>
 *   </div>
 *   <div id="tab-2">
 *     <Alert type="success">这是第二个示例</Alert>
 *   </div>
 * </CodeContainer>
 * ```
 *
 * 自定义标题：
 * ```astro
 * <CodeContainer
 *   titles={['基础用法', '高级用法']}
 *   codes={[code1, code2]}>
 *   <div id="tab-1">...</div>
 *   <div id="tab-2">...</div>
 * </CodeContainer>
 * ```
 *
 * @props
 * @prop {string[]} [codes] - 每个示例对应的源代码数组，必需属性
 * @prop {string[]} [descriptions] - tab的描述文本数组，用于为每个标签页添加说明文字
 * @prop {boolean} [resetStyles=true] - 是否重置内部样式，设置为 false 时保留原始样式
 * @prop {string[]} [titles] - tab的标题数组，如果不提供则使用"示例 1"这样的默认标题
 *
 * @slots
 * @slot default - 代码示例内容，需要为每个示例设置对应的 id (tab-1, tab-2等)
 *
 * @accessibility
 * - 支持键盘导航，可以使用 Tab 键在标签页间切换
 * - 提供适当的 ARIA 标签，确保屏幕阅读器能够正确识别
 * - 标签页切换时保持焦点状态，提升用户体验
 */

import CodeToolbar from './CodeToolbar.astro';
import Description from './Description.astro';
import Preview from './Preview.astro';
import { CodePanel, Container } from '../../../index.ts';
import '../../style.ts';

interface Props {
    /**
     * 每个示例对应的源代码
     */
    codes: string[];

    /**
     * tab的描述文本
     */
    descriptions?: string[];

    /**
     * 是否重置内部样式
     * @default true
     */
    resetStyles?: boolean;

    /**
     * tab的标题，如果不提供则使用"示例 1"这样的默认标题
     */
    titles?: string[];
}

const {
    titles = [],
    descriptions = [],
    codes,
    resetStyles = true,
} = Astro.props;
---

<div
    data-role="code-container"
    class="cosy:mb-8 cosy:card not-prose"
    ignore-heading>
    <CodeToolbar
        titles={titles.length ? titles : codes.map((_, i) => `示例 ${i + 1}`)}
        activeTab={0}
        isCodeView={false}
        code={codes[0]}
    />

    {
        codes.map((code, index) => (
            <div
                class={`cosy:example-container ${index === 0 ? 'cosy:block' : 'cosy:hidden'}`}
                data-example={`tab-${index + 1}`}>
                <Description text={descriptions[index]} />

                <Container background="dot-grid" width="full">
                    <div class="cosy:relative cosy:p-4 cosy:bg-gradient-to-br cosy:from-primary/10 cosy:to-secondary/10 cosy:dark:from-primary/20 cosy:dark:to-secondary/20 cosy:rounded-b">
                        <Preview>
                            <div
                                class={`cosy:code-preview-area ${resetStyles ? 'cosy:reset-styles' : ''}`}
                                data-preview-area={`tab-${index + 1}`}>
                                <slot />
                            </div>
                        </Preview>

                        <div
                            class="cosy:hidden cosy:code-example-panel"
                            data-panel="code">
                            <CodePanel code={code} />
                        </div>
                    </div>
                </Container>
            </div>
        ))
    }
</div>

<script>
    function initializeCodeContainer() {
        // 初始化时隐藏除第一个以外的所有内容
        document
            .querySelectorAll('[data-role="code-container"]')
            .forEach((container) => {
                const contents = container.querySelectorAll('[id^="tab-"]');
                contents.forEach((content, index) => {
                    if (index !== 0) {
                        content.classList.add('cosy:hidden');
                    }
                });
            });
    }

    document.addEventListener('astro:page-load', () => {
        initializeCodeContainer();
    });
</script>
