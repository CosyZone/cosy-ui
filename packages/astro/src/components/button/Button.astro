---
/**
 * @component Button
 *
 * @description
 * Button 组件用于触发一个即时操作，如表单提交、打开对话框等。
 * 支持多种样式变体、尺寸和状态，可以满足不同场景的需求。
 *
 * @design
 * 设计理念：
 * 1. 直观易用 - 通过视觉差异清晰传达按钮的重要性和功能
 * 2. 响应式交互 - 提供丰富的状态反馈，增强用户体验
 * 3. 可定制性 - 支持多种配置选项，适应不同场景需求
 * 4. 无障碍性 - 确保所有用户都能获得良好体验
 *
 * 视觉特点：
 * - 悬停效果：轻微上浮和阴影增强
 * - 点击效果：轻微下沉
 * - 加载状态：显示加载动画
 * - 多种颜色变体：适应不同场景和语义
 * - 多种尺寸：适应不同布局需求
 *
 * @usage
 * 基本用法：
 * ```astro
 * <Button>默认按钮</Button>
 * <Button variant="primary">主要按钮</Button>
 * ```
 *
 * 不同尺寸：
 * ```astro
 * <Button size="sm">小型按钮</Button>
 * <Button size="lg">大型按钮</Button>
 * ```
 *
 * 状态变化：
 * ```astro
 * <Button disabled>禁用按钮</Button>
 * <Button loading>加载中</Button>
 * ```
 *
 * 带图标：
 * ```astro
 * <Button>
 *   <span slot="icon-left">👈</span>
 *   左侧图标
 * </Button>
 * ```
 *
 * 链接按钮：
 * ```astro
 * <Button href="https://example.com">跳转链接</Button>
 * <Button href="https://example.com" target="_blank">新窗口打开</Button>
 * ```
 *
 * @props
 * @prop {boolean} [block=false] - 是否为块级显示，设置为 true 时按钮占满容器宽度
 * @prop {string} [class] - 自定义 CSS 类名，用于覆盖默认样式
 * @prop {boolean} [disabled=false] - 是否禁用按钮，设置为 true 时按钮不可点击
 * @prop {string} [formmethod] - 表单提交方法，支持 dialog 等特殊值
 * @prop {string} [href] - 链接地址，设置后按钮变为链接形式
 * @prop {boolean} [loading=false] - 是否显示加载状态，设置为 true 时显示加载动画
 * @prop {Function} [onClick] - 点击事件处理函数
 * @prop {('circle'|'square')} [shape] - 按钮形状，支持 circle（圆形）和 square（方形）
 * @prop {('lg'|'md'|'sm'|'xs')} [size='md'] - 按钮尺寸，支持 lg、md、sm、xs 四种尺寸
 * @prop {string} [target] - 链接目标，支持 _self、_blank、_parent、_top
 * @prop {('button'|'submit'|'reset')} [type='button'] - 按钮类型，支持 button、submit、reset
 * @prop {('primary'|'secondary'|'accent'|'info'|'success'|'warning'|'error'|'ghost'|'link'|'outline'|'neutral'|'gradient-sky'|'gradient-watermelon'|'gradient-lemon'|'gradient-grape'|'gradient-mango'|'gradient-forest'|'gradient-ocean'|'gradient-sunset'|'gradient-flower'|'gradient-pitaya'|'gradient-banana'|'gradient-blueberry'|'gradient-kiwi')} [variant='primary'] - 按钮样式变体，支持多种预设样式和渐变效果
 * @prop {boolean} [wide=false] - 是否为宽按钮，设置为 true 时按钮宽度增加
 *
 * @slots
 * @slot default - 按钮内容，支持任意文本内容
 * @slot icon-left - 左侧图标，显示在按钮内容左侧
 * @slot icon-right - 右侧图标，显示在按钮内容右侧
 */

// 导入样式
import "@coffic/cosy-ui-base/style";
import type { IButtonProps } from "./props.ts";
import { getBaseButtonClasses } from "@coffic/cosy-ui-base";

// 从 Astro.props 获取属性
const props = Astro.props as IButtonProps;

const {
	block = false,
	class: className,
	disabled = false,
	formmethod,
	href,
	loading = false,
	onClick,
	shape,
	size = "md",
	target,
	type = "button",
	variant = "primary",
	wide = false,
	...rest
} = props;

// 使用共用的工具函数计算基础类名
const baseButtonClasses = getBaseButtonClasses({
	variant,
	size,
	shape,
	wide,
	block,
	loading,
	class: className,
});

// 合并所有类名
const buttonClasses = baseButtonClasses.filter(Boolean).join(" ");
---

{
    href ? (
        <a
            href={href}
            class={buttonClasses}
            target={target}
            onclick={
                onClick ? `${onClick.toString()}; return false;` : undefined
            }
            data-variant={variant}
            {...rest}>
            <span class="cosy:flex cosy:items-center cosy:gap-2">
                <slot name="icon-left" />
                <slot />
                <slot name="icon-right" />
            </span>
        </a>
    ) : (
        <button
            type={formmethod === 'dialog' ? 'submit' : type}
            class={buttonClasses}
            disabled={disabled}
            onclick={
                onClick ? `${onClick.toString()}; return false;` : undefined
            }
            formmethod={formmethod}
            data-variant={variant}
            {...rest}>
            <span class="cosy:flex cosy:items-center cosy:gap-2">
                <slot name="icon-left" />
                <slot />
                <slot name="icon-right" />
            </span>
        </button>
    )
}
