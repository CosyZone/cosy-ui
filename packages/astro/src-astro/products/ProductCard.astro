---
/**
 * @component ProductCard
 *
 * @description
 * ProductCard 组件用于展示产品信息，包括产品名称、图片、描述、App Store链接和产品官网链接。
 * 组件采用卡片式设计，支持悬停效果，并提供链接到产品相关页面的功能。
 * 支持多种尺寸选项：xs, sm, md, lg, xl
 *
 * @design
 * 设计理念：
 * 1. 产品展示 - 突出展示产品的关键信息和图片
 * 2. 链接跳转 - 提供App Store和产品官网链接
 * 3. 视觉一致性 - 使用卡片组件确保与整体设计风格一致
 * 4. 交互反馈 - 悬停时提供视觉反馈，增强用户体验
 * 5. 尺寸灵活 - 提供多种预设尺寸，适应不同场景需求
 *
 * @usage
 * 基本用法：
 * ```astro
 * <ProductCard
 *   name="产品名称"
 *   image="/images/products/product1.jpg"
 *   description="产品简短描述文本"
 *   productUrl="https://product-website.com"
 * />
 * ```
 *
 * 包含App Store链接：
 * ```astro
 * <ProductCard
 *   name="产品名称"
 *   image="/images/products/product1.jpg"
 *   description="产品简短描述文本"
 *   appStoreUrl="https://apps.apple.com/app/product"
 *   productUrl="https://product-website.com"
 * />
 * ```
 *
 * 使用不同尺寸：
 * ```astro
 * <ProductCard
 *   size="sm"
 *   name="小尺寸产品卡片"
 *   image="/images/products/product1.jpg"
 *   description="产品简短描述文本"
 * />
 * ```
 *
 * 统一高度（在Grid或Flex布局中使用）：
 * ```astro
 * <div class="cosy:gap-4 cosy:grid cosy:grid-cols-3">
 *   <ProductCard
 *     equalHeight
 *     name="产品1"
 *     image="/images/products/product1.jpg"
 *     description="产品描述文本"
 *   />
 *   <ProductCard
 *     equalHeight
 *     name="产品2"
 *     image="/images/products/product2.jpg"
 *     description="另一个产品的描述"
 *   />
 * </div>
 * ```
 *
 * 自定义阴影样式：
 * ```astro
 * <ProductCard
 *   shadow="lg"
 *   name="突出显示的产品"
 *   image="/images/products/product1.jpg"
 *   description="使用大阴影突出显示的产品"
 * />
 *
 * <ProductCard
 *   shadow="none"
 *   name="简洁风格产品"
 *   image="/images/products/product2.jpg"
 *   description="无阴影的简洁风格"
 * />
 * ```
 *
 * 自定义背景色：
 * ```astro
 * <ProductCard
 *   background="primary"
 *   name="主色背景产品"
 *   image="/images/products/product1.jpg"
 *   description="使用主色背景的产品卡片"
 * />
 *
 * <ProductCard
 *   background="gradient-sunset"
 *   name="渐变背景产品"
 *   image="/images/products/product2.jpg"
 *   description="使用日落渐变背景的产品卡片"
 * />
 * ```
 *

 */

import {
	SocialIcon,
	Image,
	Button,
	LinkIcon,
	AppStoreIcon,
} from "../../index.ts";
import "../../style.ts";
import "./product-card.css";
import type { ImageSource } from "../image/types.ts";
import {
	getBackgroundClass,
	type BackgroundColor,
} from "../../src/common/backgrounds";

type Size = "xs" | "sm" | "md" | "lg" | "xl";

export interface Props {
	/**
	 * 产品名称
	 */
	name: string;
	/**
	 * 产品图片
	 */
	image: ImageSource;
	/**
	 * 产品描述
	 */
	description: string;
	/**
	 * App Store链接
	 */
	appStoreUrl?: string;
	/**
	 * 产品官网链接
	 */
	productUrl?: string;
	/**
	 * GitHub仓库链接
	 */
	githubUrl?: string;
	/**
	 * 卡片尺寸
	 * - xs: 超小尺寸，适合密集布局
	 * - sm: 小尺寸，适合列表
	 * - md: 中等尺寸，默认
	 * - lg: 大尺寸，适合突出显示
	 * - xl: 超大尺寸，适合特色产品
	 */
	size?: Size;
	/**
	 * 主按钮文本（产品官网按钮）
	 */
	primaryButtonText?: string;
	/**
	 * 次按钮文本（App Store按钮）
	 */
	secondaryButtonText?: string;
	/**
	 * GitHub按钮文本
	 */
	githubButtonText?: string;
	/**
	 * 按钮布局方向
	 * - row: 水平布局（默认）
	 * - column: 垂直布局
	 */
	buttonLayout?: "row" | "column";
	/**
	 * 是否启用等高卡片
	 * 当在grid或flex布局中使用时，设置为true可确保所有卡片高度一致
	 */
	equalHeight?: boolean;
	/**
	 * 描述文本的最大行数
	 * 用于控制描述文本的显示行数，超出部分会被截断
	 */
	descriptionLines?: number;
	/**
	 * 自定义类名
	 */
	class?: string;
	/**
	 * 卡片阴影样式
	 * - none: 无阴影
	 * - sm: 小阴影
	 * - md: 中等阴影（默认）
	 * - lg: 大阴影
	 * - xl: 超大阴影
	 */
	shadow?: "none" | "sm" | "md" | "lg" | "xl";
	/**
	 * 卡片背景色
	 * 支持基础颜色、透明度变体和渐变背景
	 */
	background?: BackgroundColor;
	/**
	 * 是否使用柔和色背景
	 */
	muted?: boolean;
}

const {
	name,
	image,
	description,
	appStoreUrl,
	productUrl,
	githubUrl,
	size = "md",
	primaryButtonText = "访问官网",
	secondaryButtonText = "App Store",
	githubButtonText = "GitHub",
	buttonLayout = "row",
	equalHeight = false,
	descriptionLines,
	class: className = "",
	shadow = "md",
	background,
	muted = false,
} = Astro.props;

// 尺寸样式映射
const sizeStyles = {
	xs: {
		card: "cosy:max-w-[200px]",
		figure: "cosy:p-2",
		image: {
			width: 150,
			height: 100,
		},
		title: "cosy:text-sm",
		description: "cosy:text-xs cosy:line-clamp-2",
		buttons: "cosy:text-xs cosy:btn-xs",
		padding: "cosy:px-3 cosy:py-2",
		cardHeight: "cosy:h-[280px]",
		imageHeight: "cosy:h-[100px]",
		bodyHeight: "cosy:h-[180px]",
	},
	sm: {
		card: "cosy:max-w-[250px]",
		figure: "cosy:p-3",
		image: {
			width: 200,
			height: 133,
		},
		title: "cosy:text-base",
		description: "cosy:text-sm cosy:line-clamp-3",
		buttons: "cosy:text-sm cosy:btn-sm",
		padding: "cosy:px-4 cosy:py-3",
		cardHeight: "cosy:h-[360px]",
		imageHeight: "cosy:h-[133px]",
		bodyHeight: "cosy:h-[227px]",
	},
	md: {
		card: "cosy:max-w-[320px]",
		figure: "cosy:p-4",
		image: {
			width: 300,
			height: 200,
		},
		title: "cosy:text-xl",
		description: "cosy:text-base",
		buttons: "",
		padding: "cosy:px-6 cosy:py-4",
		cardHeight: "cosy:h-[450px]",
		imageHeight: "cosy:h-[200px]",
		bodyHeight: "cosy:h-[250px]",
	},
	lg: {
		card: "cosy:max-w-[400px]",
		figure: "cosy:p-5",
		image: {
			width: 380,
			height: 253,
		},
		title: "cosy:text-2xl",
		description: "cosy:text-lg",
		buttons: "cosy:text-base cosy:btn-lg",
		padding: "cosy:px-7 cosy:py-5",
		cardHeight: "cosy:h-[550px]",
		imageHeight: "cosy:h-[253px]",
		bodyHeight: "cosy:h-[297px]",
	},
	xl: {
		card: "cosy:max-w-[500px]",
		figure: "cosy:p-6",
		image: {
			width: 480,
			height: 320,
		},
		title: "cosy:text-3xl",
		description: "cosy:text-xl",
		buttons: "cosy:text-lg cosy:btn-lg",
		padding: "cosy:px-8 cosy:py-6",
		cardHeight: "cosy:h-[650px]",
		imageHeight: "cosy:h-[320px]",
		bodyHeight: "cosy:h-[330px]",
	},
};

const currentSize = sizeStyles[size];

// 阴影样式映射
const shadowStyles = {
	none: "cosy:shadow-none",
	sm: "cosy:shadow-sm cosy:hover:shadow-md",
	md: "cosy:shadow-md cosy:hover:shadow-lg",
	lg: "cosy:shadow-lg cosy:hover:shadow-xl",
	xl: "cosy:shadow-xl cosy:hover:shadow-2xl",
};

// 描述文本的行数限制
const descriptionClass = descriptionLines
	? `cosy:line-clamp-${descriptionLines}`
	: currentSize.description.includes("line-clamp")
		? currentSize.description
		: `${currentSize.description} cosy:line-clamp-3`;

// 计算按钮布局类名，根据按钮数量和布局方向调整
const getButtonLayoutClass = () => {
	let count = 0;
	if (productUrl) count++;
	if (appStoreUrl) count++;
	if (githubUrl) count++;

	// 垂直布局时所有按钮都是全宽
	if (buttonLayout === "column") {
		return "cosy:w-full";
	}

	// 水平布局时根据按钮数量选择合适的布局类
	switch (count) {
		case 1:
			return "cosy:w-full"; // 单个按钮占满一行
		case 2:
			return "cosy:flex-1"; // 两个按钮平分
		case 3:
			return "cosy:flex-1"; // 三个按钮平分
		default:
			return "";
	}
};

const buttonLayoutClass = getButtonLayoutClass();
const buttonsContainerClass =
	buttonLayout === "column"
		? "cosy:flex cosy:flex-col cosy:gap-2 cosy:mt-auto"
		: "cosy:flex cosy:flex-wrap cosy:gap-2 cosy:mt-auto";
---

<div
    class:list={[
        'cosy:card cosy:transition-shadow cosy:duration-300',
        background ? getBackgroundClass(background) : 'cosy:bg-base-200',
        shadowStyles[shadow],
        currentSize.card,
        equalHeight && currentSize.cardHeight,
        'cosy:flex cosy:flex-col',
        muted && 'product-card-muted',
        className,
    ]}>
    <figure
        class:list={[
            currentSize.figure,
            equalHeight && currentSize.imageHeight,
        ]}>
        <Image
            src={image}
            alt={`${name} product image`}
            width={currentSize.image.width}
            height={currentSize.image.height}
            rounded="lg"
            transition="fade"
            hover="brightness"
            class="cosy:w-full cosy:h-full cosy:object-cover"
            loading="lazy"
            showError={true}
        />
    </figure>
    <div
        class:list={[
            currentSize.padding,
            'cosy:card-body',
            'cosy:flex cosy:flex-col',
            equalHeight && currentSize.bodyHeight,
        ]}>
        <h2
            class:list={[
                'cosy:mb-2 cosy:font-bold cosy:card-title',
                currentSize.title,
            ]}>
            {name}
        </h2>
        <p class:list={['cosy:mb-4', descriptionClass]}>{description}</p>

        <div class={buttonsContainerClass}>
            {
                productUrl && (
                    <Button
                        href={productUrl}
                        target="_blank"
                        variant="primary"
                        class:list={[buttonLayoutClass, currentSize.buttons]}
                        aria-label={`Visit ${name}'s website`}>
                        <span slot="icon-left">
                            <LinkIcon size="22px" />
                        </span>
                        {primaryButtonText}
                    </Button>
                )
            }
            {
                appStoreUrl && (
                    <Button
                        href={appStoreUrl}
                        target="_blank"
                        variant="secondary"
                        class:list={[buttonLayoutClass, currentSize.buttons]}
                        aria-label={`Download ${name} on App Store`}>
                        <span slot="icon-left">
                            <AppStoreIcon size="22px" />
                        </span>
                        {secondaryButtonText}
                    </Button>
                )
            }
            {
                githubUrl && (
                    <Button
                        href={githubUrl}
                        target="_blank"
                        variant="info"
                        class:list={[buttonLayoutClass, currentSize.buttons]}
                        aria-label={`View ${name}'s GitHub repository`}>
                        <span slot="icon-left">
                            <SocialIcon platform="github" size="22px" />
                        </span>
                        {githubButtonText}
                    </Button>
                )
            }
        </div>
    </div>
</div>
